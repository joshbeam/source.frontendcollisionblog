<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Front End Collision</title>
    <description>Website and blog of full-stack JavaScript developer, Josh Beam.
</description>
    <link>http://joshbeam.github.io/</link>
    <atom:link href="http://joshbeam.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 20 Aug 2017 18:09:52 -0700</pubDate>
    <lastBuildDate>Sun, 20 Aug 2017 18:09:52 -0700</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>Estimating Engineering Tasks: The Soft Side</title>
        <description>&lt;!--excerpt.start--&gt;
&lt;p&gt;Estimating work is the bane of every engineer’s existence. If you overestimate and deliver too quickly, the perception is that you’re sandbagging, whereas if you underestimate and deliver too late, the perception is that you’re not competent. Most resources about task estimation are purely technical. The “soft side” of estimation is equally important, yet rarely discussed (and in practice, it usually causes the most friction). In this post I’ll discuss the psychology of estimation, ways to communicate with stakeholders about engineering tasks, and tactics to get closer to hitting your mark (and learning how to be flexible when unexpected challenges come up).
&lt;!--excerpt.end--&gt;&lt;/p&gt;

&lt;h1 id=&quot;who-is-this-post-for&quot;&gt;Who is this post for?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Small startups and tech organizations&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;tldr&quot;&gt;TL;DR&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Many ways to estimate engineering effort, but stakeholders care about deadlines&lt;/li&gt;
  &lt;li&gt;Many psychological and logical barriers to accurately estimating (if you’re aware of them, you can limit their influence on you)&lt;/li&gt;
  &lt;li&gt;You and stakeholders are on the same team; you just communicate in different terms&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;a-quick-primer-how-do-you-estimate-tasks&quot;&gt;A quick primer: how do you estimate tasks?&lt;/h1&gt;

&lt;p&gt;Two typical ways are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;effort-based&lt;/li&gt;
  &lt;li&gt;time-based&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;effort-based&quot;&gt;Effort-based&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Recommended reading: &lt;a href=&quot;https://en.wikipedia.org/wiki/Fibonacci_scale_(agile)&quot;&gt;Fibonacci scale (agile)&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;“Effort-based” tends to make more sense to engineering teams, because it represents the relative complexity of a task. For example, the Agile software development approach considers using the fibonacci scale (or even t-shirt sizes).&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;fibonacci&lt;/strong&gt; scale ([1, 2, 3, 5, 8…]) is used because as a task increases in complexity, it’s harder to accurately determine effort needed to complete it. Using the fibonacci scale, a task with an estimate of 1 might be “relatively simple”, and a task with an estimate of 8 might be “significantly more complex”.&lt;/p&gt;

&lt;p&gt;When numbers increase, it’s harder to tell the difference between two numbers that are both very large (when I was a child, anybody who was older than 13 was an adult, and anybody who was older that 20 was &lt;em&gt;old&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;For example, what is the difference between a task that’s estimated at 50, versus a task that’s estimated at 51? It’s hard to say.&lt;/p&gt;

&lt;p&gt;So, we don’t use 50 and 51. We would instead step to either 34 and 55, or 55 and 89 (2 pairs of numbers within the fibonacci sequence):&lt;/p&gt;

&lt;p&gt;0, 1, 1, 2, 3, 5, 8, 13, 21, &lt;strong&gt;34&lt;/strong&gt;, &lt;strong&gt;55&lt;/strong&gt;, &lt;strong&gt;89&lt;/strong&gt;…&lt;/p&gt;

&lt;p&gt;Again, these are all relative terms; but, stakeholders don’t want to hear about “relative effort”. You need to meet a deadline.&lt;/p&gt;

&lt;h2 id=&quot;time-based-and-the-importance-of-intuition&quot;&gt;Time-based (and the importance of intuition)&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Recommended reading: &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_development_effort_estimation&quot;&gt;Software development effort estimation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hofstadter’s Law: It always takes longer than you expect, even when you take into account Hofstadter’s Law.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;— &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Hofstadter%27s_law&quot;&gt;Hofstadter’s Law&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In practice, time-based estimation requires &lt;strong&gt;experience&lt;/strong&gt;. In a perfect world, you should have the engineer who will be working on the task give input on the estimate (and, optimally, this engineer has had experience dealing with other similar tasks). This, however, depends heavily on your organizational structure, and is much more effective in smaller teams.&lt;/p&gt;

&lt;p&gt;In other words, the optimal person to be estimating the task is &lt;strong&gt;unconsciously competent&lt;/strong&gt; (or, a person whose &lt;strong&gt;intuition&lt;/strong&gt; can be reasonably trusted).&lt;/p&gt;

&lt;p&gt;When we look at the &lt;a href=&quot;https://en.wikipedia.org/wiki/Four_stages_of_competence&quot;&gt;stages of competence&lt;/a&gt;, we see that people generally fall into 1 of 4 categories:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;1 - Unconscious incompetence&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;The individual does not understand or know how to do something and does not necessarily recognize the deficit. They may deny the usefulness of the skill. The individual must recognize their own incompetence, and the value of the new skill, before moving on to the next stage. The length of time an individual spends in this stage depends on the strength of the stimulus to learn.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;2 - Conscious incompetence&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Though the individual does not understand or know how to do something, they recognize the deficit, as well as the value of a new skill in addressing the deficit. The making of mistakes can be integral to the learning process at this stage.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;3 - Conscious competence&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;The individual understands or knows how to do something. However, demonstrating the skill or knowledge requires concentration. It may be broken down into steps, and there is heavy conscious involvement in executing the new skill.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;4 - Unconscious competence&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;The individual has had so much practice with a skill that it has become “second nature” and can be performed easily. As a result, the skill can be performed while executing another task. The individual may be able to teach it to others, depending upon how and when it was learned.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An engineer who is in stages 1 or 2 will generally provide an unreliable estimate (but will gradually begin to provide more accurate estimates as they gain more experience, given that they also learn to overcome certain psychological barriers that I’ll discuss later).&lt;/p&gt;

&lt;p&gt;It may concern some readers that I used the word “intuition” when describing estimating an engineering task. In other words, “intuition” isn’t quantifiable, so the two concepts seem juxtaposed.&lt;/p&gt;

&lt;p&gt;However, the intuition comes after already diving in-depth into each individual component of the task (which I will also discuss more in detail later).&lt;/p&gt;

&lt;p&gt;To give more light on these seemingly contradictory ideas, we can look at &lt;a href=&quot;https://www.quora.com/Whats-more-real-to-you-your-feelings-or-facts/answer/Richard-Muller-3?srid=2dRl&quot;&gt;Richard Mueller’s framework for decision-making&lt;/a&gt; (he is a professor of physics at UC Berkeley):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Rosemary once told me that she approaches all important questions in the same way:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;Analyze the issue to death. Gather all the numbers, all the facts, put them (if possible) on a spreadsheet. Create an evaluation function to weigh the importance of all the numbers and facts (she was a math major), and see what the computer says. (Actually, you can do most of this in your head.) Then analyze it a different way. Compare conclusions.&lt;/li&gt;
    &lt;li&gt;Then, having completed Step 1, ignore the results, and base your conclusion on your feelings.&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;That sounds contradictory, but I don’t think it is. Facts and numbers are important, but they can be misleading. Moreover, your own evaluation function, based on what you think is important to you, may be completely wrong. We often can’t articulate what is really important to us. Maybe we don’t even know.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, this is in the context of personal decision-making, but we can learn some important lessons that translate over to our current context.&lt;/p&gt;

&lt;p&gt;Firstly, it is important to &lt;strong&gt;analyze the facts to death&lt;/strong&gt; (i.e., each individual piece of the task), and then it’s equally as important &lt;strong&gt;to listen to your gut&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We can also look at Gavin DeBecker’s book &lt;a href=&quot;https://www.amazon.com/Other-Survival-Signals-Protect-Violence/dp/0440508835/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1503267711&amp;amp;sr=1-1&amp;amp;keywords=gavin+debecker&quot;&gt;“The Gift of Fear”&lt;/a&gt; for another lesson that can be useful in our context. He says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Intuition is always right in at least two important ways;
it is always in response to something.
It always has your best interest at heart&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, this is out of context, but the lesson we can learn from this is that &lt;strong&gt;after analyzing the facts to death, you should also listen to what your intuition is saying, because it’s trying to help you&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In our context, this tells us a very simple (but important) thing: estimate the shit out of a task, and then do a final gut check. Add a buffer if your gut tells you something doesn’t sound right (&lt;a href=&quot;https://en.wikipedia.org/wiki/Cognitive_dissonance&quot;&gt;cognitive dissonance&lt;/a&gt;), and feel free to subtract from the estimate if your gut tells you that it won’t actually take “that long” (for whatever reason).&lt;/p&gt;

&lt;p&gt;The important considerations here are the “unknowns”, which generally influence your intuition:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;known unknowns&lt;/li&gt;
  &lt;li&gt;unknown unknowns&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;“Known unknowns” are things that you know you don’t know, and don’t have information for yet. If these are present, then you know you should add a little extra buffer, just in case.&lt;/p&gt;

&lt;p&gt;“Unknown unknowns” are even worse. What if you implement this new caching system, and something comes up that you never even thought to think of?&lt;/p&gt;

&lt;p&gt;These two categories of “unknowns” are generally present in more complex tasks (and can be present in simple tasks), but the simpler the task is in complexity, the easier it is to reliably estimate (and even cut off time during your final gut check) because there simply may not be any “unknowns” (aside from irrelevant situations that may affect your task completion, like unrelated server issues, etc.)&lt;/p&gt;

&lt;p&gt;In the conclusion of this post, I’ll give an example of merging the “effort-based” and “time-based” frameworks for estimating a task.&lt;/p&gt;

&lt;h1 id=&quot;the-psychology-of-estimating&quot;&gt;The psychology of estimating&lt;/h1&gt;

&lt;p&gt;Here we’ll discuss barriers to accurately estimating (and how these also affect even experienced engineers’ intuition):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Planning_fallacy&quot;&gt;Planning Fallacy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect&quot;&gt;Dunning-Kruger Effect&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Anchoring&quot;&gt;Anchoring (false premises)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.simplypsychology.org/obedience.html&quot;&gt;Obedience to Authority&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Rebellion (silent or active)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before we dive in, it is worth it to explain why I included this section.&lt;/p&gt;

&lt;p&gt;You should look at psychological factors as external forces that – unbeknownst to you – are attempting to influence your decision-making: once you are aware of these phsycological influences and can define them (and see the role they’re playing in your own thought processes), the easier it is to work past them.&lt;/p&gt;

&lt;p&gt;In other words, you can discover your own natural biases and prevent them from limiting you. &lt;strong&gt;But, the first step is to be aware of them&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;planning-fallacy&quot;&gt;Planning fallacy&lt;/h2&gt;

&lt;p&gt;This is a simple one:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;a phenomenon in which predictions about how much time will be needed to complete a future task display an optimism bias and underestimate the time needed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The takeaway here is: &lt;strong&gt;be skeptical of your optimism about a task&lt;/strong&gt;. On the other hand, &lt;strong&gt;also be careful of your own skepticism&lt;/strong&gt;. The key is to find a balance.&lt;/p&gt;

&lt;h2 id=&quot;dunning-kruger-effect&quot;&gt;Dunning-Kruger Effect&lt;/h2&gt;

&lt;p&gt;Another simple one:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;a cognitive bias wherein persons of low ability suffer from illusory superiority, mistakenly assessing their cognitive ability as greater than it is&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is especially relevant to engineers who fall into categories 1 or 2 of the stages of competence.&lt;/p&gt;

&lt;p&gt;In other words, this is a good lesson in humility, especially for new engineering who might be feeling a bit of &lt;a href=&quot;https://en.wikipedia.org/wiki/Impostor_syndrome&quot;&gt;impostor syndrome&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The takeaway here is: &lt;strong&gt;be humble about yourself and your capabilities, and seek as much information as is reasonably appropriate before making an important decision&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Can I really do this in a day? Can I implement that algorithm from scratch? Whose help will I need? What resources should I use?”&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;anchoring&quot;&gt;Anchoring&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;a cognitive bias that describes the common human tendency to rely too heavily on the first piece of information offered (the “anchor”) when making decisions. During decision making, anchoring occurs when individuals use an initial piece of information to make subsequent judgments. Once an anchor is set, other judgments are made by adjusting away from that anchor, and there is a bias toward interpreting other information around the anchor. For example, the initial price offered for a used car sets the standard for the rest of the negotiations, so that prices lower than the initial price seem more reasonable even if they are still higher than what the car is really worth.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our case, this is also means that we need not to be scared of readjusting estimates when we have more information. For example, if in a meeting with managers, we say “this sounds like something that could take about a week”, and then come back a couple days later after thinking about it more and saying “this will take 2 weeks”, we had already based all of our other discussions over those couple of days on the idea that the task would take a week, and we are more resistant to being open to discussing a new estimate, even when we have new information (more on this in the section about communicating with stakeholders).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“You said it was gonna take a week… now you’re saying it’s gonna take longer? Why’d you tell me a week, then, in the first place?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The takeaway here is: &lt;strong&gt;as a company, don’t be afraid of flexibility. Don’t anchor yourself to initial premises that can be proved wrong once you get new information&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Also, &lt;strong&gt;try not to go fishing for estimates at inappropriate times&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is related to the logical fallacy of drawing conclusions based on &lt;a href=&quot;https://en.wikipedia.org/wiki/False_premise&quot;&gt;false premises&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;obedience-to-authority&quot;&gt;Obedience to Authority&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Obedience is a form of social influence where an individual acts in response to a direct order from another individual, who is usually an authority figure. It is assumed that without such an order the person would not have acted in this way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This isn’t meant to say that you shouldn’t listen to your boss: instead, it is important to keep in mind that you might easily feel pressured into giving an inaccurate estimate because you don’t want to disappoint your boss with an estimate he or she didn’t expect (more on this in the section about communicating with stakeholders).&lt;/p&gt;

&lt;p&gt;The takeaway here is: &lt;strong&gt;be honest in your estimates, even if it isn’t pleasant&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is &lt;em&gt;extremely&lt;/em&gt; important, too, for the person who is going to be doing the work. If you tell your boss that it’ll take a day, knowing that it will take a week, you’re doing disservice to yourself, and everyone else:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;there’s no way you’re gonna get it done in a day, unless you sacrifice your own well-being&lt;/li&gt;
  &lt;li&gt;you will be perceived more and more as incompetent in your estimations&lt;/li&gt;
  &lt;li&gt;end result: you didn’t deliver on time, and possibly negatively impacted the business&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rebellion-silent-or-active&quot;&gt;Rebellion (silent or active)&lt;/h2&gt;

&lt;p&gt;In contract to “Obedience to Authority”, you might feel oppressed by your boss and feel the need to give inappropriate estimates in order to spite him or her, because after all, you are in control of the work output. Without you, your boss would need to find another engineer to do the work. This gives you &lt;em&gt;leverage&lt;/em&gt;. However, it’s important to keep this in mind as well: the important thing is the success of the business (because, after all, it benefits you, especially if you have equity). The key principle you should keep in mind is that you are in search of a &lt;em&gt;correct estimate&lt;/em&gt;, but not necessarily an estimate that is &lt;em&gt;pleasing&lt;/em&gt; to you. The two should not be conflated.&lt;/p&gt;

&lt;p&gt;This is very similar to the concept of finding a correct solution, and not just being biased towards your own solution (“leaving your ego at the door”).&lt;/p&gt;

&lt;p&gt;The takeaway here is: &lt;strong&gt;you’re on the same team&lt;/strong&gt;. You all succeed together.&lt;/p&gt;

&lt;p&gt;Now that we’re aware of psychological and logical barriers to providing estimates, let’s discuss how to communicate to the bosses.&lt;/p&gt;

&lt;h1 id=&quot;communicating-with-stakeholders&quot;&gt;Communicating with stakeholders&lt;/h1&gt;

&lt;p&gt;In this context, we’ll think of “stakeholders” as anybody else who is not an engineer, and who has a degree (limited or otherwise) of influence in your decision-making and the trajectory of the business.&lt;/p&gt;

&lt;p&gt;We’ll discuss some common situations, and how to deal with them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Us vs. them&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Ineedanestimatenow-itus&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Trust issues (sandbagging, honesty, incompetence, black swan)&lt;/li&gt;
  &lt;li&gt;Communication friction&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;us-vs-them&quot;&gt;Us vs. them&lt;/h2&gt;

&lt;p&gt;I want to talk about this one first, because it’s very important. Generally, engineers view businesspeople as just that… “the businesspeople”. You know, the oppressive authority figures lurking in the shadows.&lt;/p&gt;

&lt;p&gt;However, we want to limit this dynamic as much as possible. Just like &lt;a href=&quot;http://blog.close.io/get-past-gatekeeper&quot;&gt;salespeople shouldn’t refer to operations professionals as gatekeepers&lt;/a&gt;, engineers shouldn’t think of businesspeople as “the other guys”.&lt;/p&gt;

&lt;p&gt;Although there can be frequent friction and conflict, the important thing is to understand that you are both attempting to achieve a mutual goal. When the boss says, “why isn’t this done yet?”, it’s probably not because he or she wants to make your life miserable; instead, it’s because your boss (especially if your boss is someone in the C-Suite) has &lt;strong&gt;vested emotional interest in the outcome of the company&lt;/strong&gt; (or, maybe you’re working for a middle-manager who’s just an asshole, but usually you only start encountering these issues at larger firms, since hiring in small organizations and startups can be very selective, and cultural fit is a key aspect that’s looked at… usually).&lt;/p&gt;

&lt;p&gt;Assuming that it’s not the latter case (and your boss isn’t just a salty middle-manager), we can then conclude that there are 1 or 2 issues here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;the boss’s perception is that you’re purposely resisting them, and/or&lt;/li&gt;
  &lt;li&gt;you’re not doing a good job of communicating your decision-making&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Usually, the 2 issues are related (a vicious cycle).&lt;/p&gt;

&lt;p&gt;Maybe the boss has had prior experiences with lazy engineers or free-loaders, and their default view (the premise from which they base their conclusions – their operating principle) is that other engineers will probably be the same. They are inherently skeptical. This is not your problem, it is theirs. However, you still need to be on the same team. You can still take steps to alter this dynamic.&lt;/p&gt;

&lt;p&gt;Or, maybe the boss’s trust issues stemmed from your bad job at communicating your decision-making in the first place. You make silent decisions that affect scope of work, and the boss is left in the dust, confused about the progress of work, and thinking that there was no plan. Maybe the boss &lt;em&gt;is&lt;/em&gt; flexible, &lt;strong&gt;but you’re not communicating your flexible decisions appropriately&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Remember, &lt;strong&gt;if this person has vested emotional interest in the outcome of the company, anything that may stand in the way of that is unconsciously (or worse, consciously) branded as an enemy.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can see, then, that the fault isn’t always necessarily just one person’s. We can alter this dynamic through effective communication (I’ll discuss this after the next few sections).&lt;/p&gt;

&lt;h2 id=&quot;ineedanestimatenow-itus&quot;&gt;&lt;em&gt;Ineedanestimatenow-itus&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Your boss asks, “I know it’s hard to give an estimate right now, but if you had to guess, how long do you think this could take?”&lt;/p&gt;

&lt;p&gt;What do you respond with?&lt;/p&gt;

&lt;p&gt;Optimially, he or she gives you space to be able to say, “I’d love to throw something out there, but I think my best bet might be to let this all churn in my head a little first, and then I can come back to you with something that makes sense.”&lt;/p&gt;

&lt;p&gt;But, what if they insist? Well, this may be a good opportunity to explain something we’ve already talked about before: &lt;em&gt;anchoring&lt;/em&gt;. The tactic would be to preface your gut estimate with a warning about the anchoring fallacy.&lt;/p&gt;

&lt;p&gt;“For the sake of discussion, we can frame our thinking right now based on the idea that this &lt;em&gt;could&lt;/em&gt; take about a week, but let’s be flexible; I need to look into more, and then I can give you a more reliable initial estimate.”&lt;/p&gt;

&lt;p&gt;Optimally, everyone should be on the same page on how we, as a team, handle “initial gut estimates”. There can be many tactics for this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Give a quick organized presentation to the team on the psychological barriers we talked about above&lt;/li&gt;
  &lt;li&gt;Or, have a one-on-one with the person who has &lt;em&gt;Ineedanestimatenow-itus&lt;/em&gt;, and explain the issues that this can cause. Remember to frame it in the correct context: you are both on the same team, and you want to be able to give a reliable estimate and not be anchored to an unreliable one. This is for the benefit of the business.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a side note, &lt;a href=&quot;https://softwareengineering.stackexchange.com/a/716/171283&quot;&gt;this StackExchange post&lt;/a&gt; echoes my point by quoting &lt;a href=&quot;http://rads.stackoverflow.com/amzn/click/020161622X&quot;&gt;The Pragmatic Programmer&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;What to Say When Asked for an Estimate&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;You say “I’ll get back to you.”&lt;/p&gt;

  &lt;p&gt;You almost always get better results if you slow the process down and spend some time going through the steps we describe in this section. Estimates given at the coffee machine will (like the coffee) come back to haunt you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;trust-issues&quot;&gt;Trust issues&lt;/h2&gt;

&lt;h3 id=&quot;sandbagging&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sandbagging&quot;&gt;Sandbagging&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;hiding the strength, skill or difficulty of something or someone early in an engagement&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This can occur when you accidentally overestimate a task, and complete it earlier than intended. If this happens often, it looks like a tactic, and can cause trust issues.&lt;/p&gt;

&lt;p&gt;This brings up 2 important points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;be thorough in your estimates&lt;/li&gt;
  &lt;li&gt;communicate, communicate, communicate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hate to place all the blame on the engineer for not communicating properly. However, you should have some tactics in mind for when someone asks you the question, “why were you able to complete this so quickly?”&lt;/p&gt;

&lt;p&gt;A good response might be:&lt;/p&gt;

&lt;p&gt;“Well, I did my best to estimate accurately, but it turns out, I was actually able to build on top of some good previous architectural decisions [resuable components, etc.]”&lt;/p&gt;

&lt;p&gt;This also gives emphasizes a good point to the questioner: it is important to invest time in good architecture.&lt;/p&gt;

&lt;h3 id=&quot;perceived-incompetence&quot;&gt;Perceived incompetence&lt;/h3&gt;

&lt;p&gt;This is opposite to sandbagging. This happens when you tend to underestimate tasks, and exceed deadlines. If it happens once, ok. If it happens twice, you need to re-evaluate your system. If you it happens three times, there’s a major issue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You might not be incompetent in your work, but you are incompetent in your estimates.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, those two ideas can get easily conflated.&lt;/p&gt;

&lt;h3 id=&quot;honesty&quot;&gt;Honesty&lt;/h3&gt;

&lt;p&gt;Always, always, always, be honest with your estimates. If you succumb to the “Obedience to Authority” fallacy (or on the opposite end of the spectrum, “Rebellion”), then this is the quickest way to put yourself in a situation where you can’t be trusted – and the worst part is, you could’ve avoided it in the first place. You know when you’re being honest, and you know when you’re being dishonest. &lt;strong&gt;Choose to be honest&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;black-swan-theory&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Black_swan_theory&quot;&gt;Black swan theory&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;1 - The event is a surprise (to the observer).&lt;/p&gt;

  &lt;p&gt;2 - The event has a major effect.&lt;/p&gt;

  &lt;p&gt;3 - After the first recorded instance of the event, it is rationalized by hindsight, as if it could have been expected; that is, the relevant data were available but unaccounted for in risk mitigation programs. The same is true for the personal perception by individuals.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is when you’re blamed for an “unknown unknown”, with the assumption that it could’ve been predicted based on the information at the time. It’s easy to armchair quarterback engineers.&lt;/p&gt;

&lt;p&gt;It is important to communicate up-front about your estimates, and everybody should be on the same page that “shit happens”.&lt;/p&gt;

&lt;h1 id=&quot;communication-friction&quot;&gt;Communication friction&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;You and stakeholders are on the same team; you just communicate in different terms&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There is a difference between “dealing with” businesspeople, and being on the same team as them. You should re-frame your thinking in your interactions if you, by default, view them as people to be “dealt with”. If you don’t, you will set yourself up for failure.&lt;/p&gt;

&lt;p&gt;Once you operate from this principle, you can then delve into methods for reducing friction in communication:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;metaphors&lt;/li&gt;
  &lt;li&gt;business terms&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;metaphors&quot;&gt;Metaphors&lt;/h2&gt;

&lt;p&gt;This one kind of makes me laugh out loud, but it’s very useful.&lt;/p&gt;

&lt;p&gt;You are an engineer, so you know the words you use. When someone says “server”, you might know to ask: “you mean, the app server or the db server?”. &lt;strong&gt;You are an engineer; you know the words you use&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Other people probably don’t.&lt;/p&gt;

&lt;p&gt;So, explain it in non-technical terms. The easiest way to do this sometimes is with metaphors.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What’s the difference between changing styles and adding functionality? That’s like re-painting a house versus installing new electrical wiring. Re-painting is easier; re-wiring takes a lot of different kind of effort.&lt;/li&gt;
  &lt;li&gt;What does it mean that the process is running out of memory? It’s like when the drain gets clogged and the sink starts to overflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yes, I know, some of you are probably rolling your eyes. I have to control this impulse as well. But remember, not everybody is a damn engineer! And you are not superior to them because you are; you just have different sets of skills and knowledge.&lt;/p&gt;

&lt;!-- Here's a useful video on the topic (*Napoleon Dynamite talks about skills*):

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/XsiiIa6bs9I?ecver=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt; --&gt;

&lt;h2 id=&quot;business-terms&quot;&gt;Business terms&lt;/h2&gt;

&lt;p&gt;When discussing trade-offs and implementation, talk about them in business terms.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“If we don’t spend time on configuring our database to support encryption-at-rest, this could open us up to leaking customer data, which could bring down the business.”&lt;/li&gt;
  &lt;li&gt;“If we don’t spend the time to implement this caching mechanism correctly, then critical customer information can be operated on when it’s potentially out-of-date, and cause rippling effects throughout the system; this would take days to fix, and then we can implement feature X, Y, and Z.”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The boss only cares about good engineering practices to the extent that it makes the product better and mitigates risk to the business&lt;/strong&gt;. And so should you.&lt;/p&gt;

&lt;p&gt;In other words, the boss is a good check/balance on your ability to be pragmatic. He is completely uninfluenced by any tech implementation details; he just wants something that works, and works well.&lt;/p&gt;

&lt;p&gt;Keep this idea in mind. It is useful to you. Use this ignorance to your benefit.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Let’s do a real-world example to help put this into our context:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;You are designing an admin page that displays a list of users&lt;/li&gt;
  &lt;li&gt;You are using a RESTful API on a Node.js back-end, and Angular on the front-end&lt;/li&gt;
  &lt;li&gt;We already have a “grid component” (say, using &lt;a href=&quot;https://www.telerik.com/kendo-ui&quot;&gt;Kendo Web UI Components&lt;/a&gt;), which we’ve determined is suitable for most of our internal admin display pages&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The components involved in a time-based estimate for this task are:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;A server endpoint to retrieve a list of users (only authorized people can query this endpoint)&lt;/li&gt;
  &lt;li&gt;A UI component to draw the users on an internal admin webpage&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The effort here is minimally complex. We already have most of our basic components to work with. We’ll call this a “3” in complexity.&lt;/p&gt;

&lt;p&gt;How does this translate to time though? What’s involved in setting up the REST endpoint? What about the grid to draw the list of users?&lt;/p&gt;

&lt;p&gt;Ok, the server endpoint will take an hour:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;attach the endpoint to Express router&lt;/li&gt;
  &lt;li&gt;ensure only authorized users can access it&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;write a damn unit test&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;ask someone for a code review and merge the PR&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Side note: &lt;strong&gt;Always account for testing, code review, and deployment.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The UI is super simple; just need to wire up an existing component. That’s a half hour.&lt;/p&gt;

&lt;p&gt;And then, let’s give another hour on top of that, because shit happens.&lt;/p&gt;

&lt;p&gt;It was a minimally complex task (a “3”), but the time necessary is about 2 and a half hours. What’s the gut check on that? You will know, if you know your system. To me, something like this “feels” right. 2 and a half hours is probably more than enough to get through this, and it feels safe.&lt;/p&gt;

&lt;p&gt;Remember, throughout all of this, we need to be communicating. If something changes, tell the boss about the business implications. Why is it more important to spend time on a different part of it? What is the important of having a unit test for it?&lt;/p&gt;

&lt;p&gt;If takes less time than you originally thought, you’re not sandbagging. You built on top of previous good architecture. But, it’s important to keep this in mind when analyzing your estimate in the first place. You need to hit your mark.&lt;/p&gt;

&lt;p&gt;There is a soft counterpart to the technical implementation of a system. Use it to your advantage.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Aug 2017 05:45:00 -0700</pubDate>
        <link>http://joshbeam.github.io/product/2017/08/15/estimating-engineering-tasks.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/product/2017/08/15/estimating-engineering-tasks.html</guid>
        
        
        <category>product</category>
        
      </item>
    
      <item>
        <title>How to Actually Brainstorm (like a respectable businessperson)</title>
        <description>&lt;!--excerpt.start--&gt;
&lt;p&gt;How do you brainstorm while maintaining a balance between pragmatism and creativity? In this post, I’ll discuss some theory behind maintaining this balance, and then I’ll discuss some actual, real-world tips for how to “actually brainstorm”, and where to proceed next.
&lt;!--excerpt.end--&gt;&lt;/p&gt;

&lt;h1 id=&quot;who-is-this-for&quot;&gt;Who is this for?&lt;/h1&gt;

&lt;p&gt;This is mostly geared towards small groups, perhaps working in a startup environment. It revolves around a company structure that may have certain elements, like the business, engineering, and design team or individuals.&lt;/p&gt;

&lt;p&gt;We’ll start with a bit of theory, and then go into some practical methods to actually get something out of a brainstorming session.&lt;/p&gt;

&lt;h1 id=&quot;tldr&quot;&gt;TL;DR&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;There are 2 extremes: overly pragmatic and overly naïve&lt;/li&gt;
  &lt;li&gt;There &lt;em&gt;are&lt;/em&gt; bad ideas, but you don’t know which part of it is bad until you say it out loud&lt;/li&gt;
  &lt;li&gt;Lay the groundwork, have a facilitator, and warm it up&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://betterhumans.coach.me/rule-of-three-bad-ideas-arguments-and-brainstorming-ac0d06fbd4ee&quot;&gt;Ideas come in 3s&lt;/a&gt;: one idea is a bad idea, two ideas is an argument, and three ideas is brainstorming&lt;/li&gt;
  &lt;li&gt;Have a respectable plant who says bad ideas to unblock people&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Typically, the term “brainstorming” brings to mind one of the following scenarios:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The boss calls a brainstorming session, and mostly people are quiet for fear of saying something stupid. A couple brave ideas might be written on a whiteboard. The meeting is adjourned with people feeling like they didn’t &lt;em&gt;really&lt;/em&gt; come up with any good ideas.&lt;/li&gt;
  &lt;li&gt;Someone calls a brainstorming session, and everybody is throwing out random, unrealistic ideas. People are talking over one another; smaller groups form where independent ideas are discussed separately from the rest of the group. The meeting is adjourned with people feeling more confused than when they started.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These 2 scenarios represent a couple of common extremes (one on either side of the spectrum): &lt;strong&gt;control, but no creativity&lt;/strong&gt;, and &lt;strong&gt;creativity, but no control&lt;/strong&gt;. The trick is to find a proper balance.&lt;/p&gt;

&lt;h1 id=&quot;hang-ups&quot;&gt;Hang ups&lt;/h1&gt;

&lt;p&gt;On one side of the spectrum, there is the overly &lt;strong&gt;pragmatic&lt;/strong&gt; person or people in the room who view brainstorming as a waste of time, and any ideas that are not completely realistic should be immediately suppressed before they are even said.&lt;/p&gt;

&lt;p&gt;Even further on that side of the spectrum, there are people who suppress even the notion of openly discussing new ideas, for fear that those who are discussing the ideas are &lt;em&gt;planning to execute them&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You should not conflate the two ideas, as they are completely separate things: &lt;strong&gt;open discussion of new ideas should not be interpreted to suggest that they will be implemented&lt;/strong&gt;. This fear is valid, because you don’t want a “runaway” engineering or design team, and, contrary to the popular aphorism “there are no bad ideas”, &lt;strong&gt;there &lt;em&gt;are&lt;/em&gt; bad ideas&lt;/strong&gt;. But that doesn’t mean you shouldn’t say them out loud.&lt;/p&gt;

&lt;h1 id=&quot;ideas-are-like-faucets&quot;&gt;Ideas are like faucets&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;“View it as a dirty tap. When you switch on the dirty tap on it’s going to flow shit water for a substantial amount of time. Then, clean water is going to start flowing. Every now and again you’re gonna get a bit of shit, but as long as you get it out of you, it’s fine. It’s the same thing with gigs. You will always play bad gigs in the beginning. The more gigs you do, the better you will get.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ed Sheeran, one of the fastest growing artists in the world over the last couple years, &lt;a href=&quot;https://www.youtube.com/watch?v=RDyg_41QF1w&quot;&gt;said the above&lt;/a&gt; in regards to songwriting, as a way to express how he approaches songwriting.&lt;/p&gt;

&lt;p&gt;This translates nicely into our mental model for brainstorming as well: just get the idea out there. There are bad ideas, but it’s easier to understand which parts are good, and which parts are bad, if you actually say it out loud. Get the shit out of the way, and let the clean water flow.&lt;/p&gt;

&lt;h1 id=&quot;imagine-the-unimaginable-humor-your-imagination&quot;&gt;“Imagine the unimaginable, humor your imagination.”&lt;/h1&gt;

&lt;p&gt;The above sentiment comes from Pete Blaber, a prior Delta Force commander, who participated in (and had great success with) Operation Anaconda. If you don’t know what any of this means, just know that it’s coming from a pretty badass guy who was in charge of autonomously leading a group of other badass guys in extremely dangerous circumstances, and he was really good at it.&lt;/p&gt;

&lt;p&gt;I know, I know: the comparison between business and special forces is an old, tired, annoying one. Bear with me for a second, though. Don’t worry, I’m not gonna call anybody a “design ninja” or a “coding warrior”.&lt;/p&gt;

&lt;p&gt;He wrote a book called &lt;a href=&quot;https://www.amazon.com/Mission-Men-Me-Lessons-Commander/dp/0425236579&quot;&gt;“The Mission, The Men, and Me”&lt;/a&gt; that shares some of his philosophies. However, the one that I think is mostly relevant here (which is a lesson made &lt;a href=&quot;http://peteblaber.weebly.com/lessons.html&quot;&gt;available online&lt;/a&gt;) is in regards to brainstorming.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;At the start of a new mission, the force is attempting to capture one of the most notorious war criminals on the UN’s most-wanted list, Osama Bin Ladin (UBL). Pete’s job is to collect any information on the environment and around the road that UBL will be traveling. They filmed the road in every possible angle so nothing could be hidden. The team gets together to try and figure out a concept to achieve surprise. One member thought to create an accident or woman looking for help, but they thought the criminal wouldn’t bother to slow down. Then someone thought of a gorilla suit. The team almost considered using a gorilla suit to capture UBL. The imagination that the team thought of was crazy, but brought the humor out to everyone. Pete believes that imagination created the evolution of man to dominate the planet to keep ourselves from extinction. Mankind found the ability to use fire, water, and wood by imagining. The side that usually wins the battle is the one that can out-smart and out-imagine the enemy as history has proven. The importance from this quote is that imagination drives the road to success. The imagination could then be turned into reality which can end in victory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The important part here is to allow yourself to come up with stupid ideas. This reinforces the idea that, yes, there are bad ideas, but there may be seeds of truth (or “good parts”) to some bad idea. But &lt;em&gt;you need to say it first&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;how-to-actually-brainstorm&quot;&gt;How to actually brainstorm&lt;/h1&gt;

&lt;h2 id=&quot;step-1-everybody-on-the-same-page&quot;&gt;Step 1: everybody on the same page&lt;/h2&gt;

&lt;p&gt;Firstly, I think the basis of any good brainstorming is that &lt;em&gt;people are on the same page from the get-go&lt;/em&gt;. This means that everyone you are in the room with is familiar with the same theory behind what you’re trying to accomplish. They’ve been indoctrinated to the faucet analogy. They know the 2 extremes we discussed above, and they know how to avoid being overly pragmatic and overly naïve. It follows then, that brainstorming is both a uniquely individual &lt;em&gt;and&lt;/em&gt; collective experience.&lt;/p&gt;

&lt;p&gt;Make sure everybody knows the basis from which they are operating.&lt;/p&gt;

&lt;h2 id=&quot;step-2-have-a-facilitator&quot;&gt;Step 2: have a facilitator&lt;/h2&gt;

&lt;p&gt;Make sure people know who is the facilitator. The facilitator’s job is not to be in charge of anything, nor decide anything about which ideas go up on the whiteboard, or which ones stay off. The facilitator simply directs the flow of things. This allows us to have a certain degree of structure, so that we don’t wander into “fluffy hipster territory”. This is a business, after all.&lt;/p&gt;

&lt;p&gt;This person will simply take ideas and write them on a whiteboard, or a window, or a piece of paper.&lt;/p&gt;

&lt;h2 id=&quot;step-3-warm-it-up&quot;&gt;Step 3: warm it up&lt;/h2&gt;

&lt;p&gt;Once everybody is on the same page and knows who the facilitator is, let’s then start talking. Lay down a goal: what are we trying to figure out?&lt;/p&gt;

&lt;p&gt;Even if everybody is on the same page, most people will fear that they will say something stupid. This fear is powerful, because it is directly tied to a person’s &lt;em&gt;credibility&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“If I say stupid stuff in a brainstorming session, how can I then be trusted to do my job?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The idea of warming up means that we need to break the logical fallacy, and ensure that people unconsciously (or better yet, consciously) understand that saying something stupid here, does not mean they are stupid in other places of their lives. Again, break the conflation.&lt;/p&gt;

&lt;p&gt;There are a few tricks for this: &lt;strong&gt;ideas in threes&lt;/strong&gt;, and &lt;strong&gt;a plant&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The concept of &lt;a href=&quot;https://betterhumans.coach.me/rule-of-three-bad-ideas-arguments-and-brainstorming-ac0d06fbd4ee&quot;&gt;ideas in threes&lt;/a&gt;, basically means that any time one idea is said, and no one is willing to give any other ideas, we must collectively force 2 other relevant ideas. &lt;strong&gt;One idea is a bad idea, two ideas is an argument, and three ideas is a brainstorm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In that article, another interesting thing is mentioned:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For some reason, bad ideas unblock people. My theory is that people are blocked because they’re trying to edit their ideas to things that perfectly meet their own idea of the requirements. That’s natural — people want to say smart things, not stupid things.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This brings the concept of &lt;strong&gt;a plant&lt;/strong&gt;. Ideally, this is somebody more senior in the group, who has some sort of real or perceived authority or respect in some aspect of what they do. It’s easy to do: this person just says with tongue in cheek, “hey guys, I’m gonna be the bad idea guy/girl. For the sake of getting all the bad ideas out of my system, I’m gonna go ahead and say one…”, and then proceeds with some off-the-wall, partially realistic idea. This can be said with a bit of a sly smile, so that people know you’re half-joking, but half-serious.&lt;/p&gt;

&lt;p&gt;However, the end result is that people realize the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“He knows he’s saying something stupid, but there’s a reason for it”&lt;/li&gt;
  &lt;li&gt;“If someone with authority and respect in the company is saying something stupid and isn’t shamed or criticized for it, surely I can say my idea, which isn’t nearly as stupid”&lt;/li&gt;
  &lt;li&gt;People laugh&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;People are now unblocked. You can use the plant throughout the entire brainstorming session. The idea is to &lt;strong&gt;unblock the faucet so that the dirty and clean water can flow out&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;where-to-go-next&quot;&gt;Where to go next&lt;/h1&gt;

&lt;p&gt;Okay, brainstorm is over, now what? Well, now you can do lots of stuff:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can rate the priority and quality of the ideas&lt;/li&gt;
  &lt;li&gt;Once you have these ratings, you can use this information in your next product planning meeting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aside from that, now you have everybody on the same page for implementing possible features, etc. The idea here isn’t necessarily to have a strict plan; it’s more to have a framework for generating information that can be useful in the future.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Remember, you don’t need to fool yourself: there &lt;em&gt;are&lt;/em&gt; bad ideas, but you need to say them out loud to find out which one are the good ones. Make sure everybody knows this when you’re brainstorming. It’s good to utilize some little tricks, like “ideas in threes” and “the plant” in order to unblock people.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Aug 2017 05:45:00 -0700</pubDate>
        <link>http://joshbeam.github.io/product/2017/08/15/how-to-actually-brainstorm.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/product/2017/08/15/how-to-actually-brainstorm.html</guid>
        
        
        <category>product</category>
        
      </item>
    
      <item>
        <title>Practical Queue Considerations</title>
        <description>&lt;!--excerpt.start--&gt;
&lt;p&gt;Intuitively, we jump to HTTP to use as our communication protocol between services in a system. However, using a queue has many benefits. In this post, instead of diving only into theory of queues, I’ll give practical advice on implementing a queue, illustrate some use cases I’ve encountered in a production system where using a queue had obvious benefits versus HTTP, as well as give some practical implementation ideas.
&lt;!--excerpt.end--&gt;&lt;/p&gt;

&lt;h1 id=&quot;who-is-this-post-for&quot;&gt;Who is this post for?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Those who have used or are familiar with the idea behind queues (like &lt;a href=&quot;https://www.rabbitmq.com/&quot;&gt;RabbitMQ&lt;/a&gt;), and have a general idea about the purpose and benefits/tradeoffs of a system that uses &lt;a href=&quot;https://martinfowler.com/articles/microservices.html&quot;&gt;microservices&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;recommended-reading&quot;&gt;Recommended Reading&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Enterprise-Integration-Patterns-Designing-Deploying/dp/0321200683&quot;&gt;Enterprise Integration Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;tldr&quot;&gt;TL;DR&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Tip: Use message types properly. &lt;strong&gt;Read &lt;a href=&quot;https://www.amazon.com/Enterprise-Integration-Patterns-Designing-Deploying/dp/0321200683&quot;&gt;Enterprise Integration Patterns&lt;/a&gt; to learn about message types (document, command, and event messages)&lt;/strong&gt;… I cannot stress this point enough&lt;/li&gt;
  &lt;li&gt;Benefit: messages still get delivered even if a server goes down (in theory). But, make sure your consumers are idempotent.&lt;/li&gt;
  &lt;li&gt;Implementation idea: try using a queue for each service&lt;/li&gt;
  &lt;li&gt;Tip: set up a dead letter queue&lt;/li&gt;
  &lt;li&gt;Tip: encrypt everything yourself&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;message-types&quot;&gt;Message Types&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Enterprise-Integration-Patterns-Designing-Deploying/dp/0321200683&quot;&gt;Enterprise Integration Patterns&lt;/a&gt; was published back in 2004, but has invaluable information for patterns in developing a system that uses queues for communication. Best of all, the information is clear and practical (by the way, I don’t get anything for recommending this book, I just think it’s really good). The biggest question I had going into implementing a queue system was:&lt;/p&gt;

&lt;p&gt;How do I format my messages? (Book gives you the patterns: &lt;a href=&quot;http://www.enterpriseintegrationpatterns.com/patterns/messaging/DocumentMessage.html&quot;&gt;document&lt;/a&gt;, &lt;a href=&quot;http://www.enterpriseintegrationpatterns.com/patterns/messaging/EventMessage.html&quot;&gt;event&lt;/a&gt;, &lt;a href=&quot;http://www.enterpriseintegrationpatterns.com/patterns/messaging/CommandMessage.html&quot;&gt;command&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Very briefly:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Document message - data is a single unit of data. It is a piece of information (for example, a MongoDB or SQL document)&lt;/li&gt;
  &lt;li&gt;Event message - it’s simply a notification that something happened (*)&lt;/li&gt;
  &lt;li&gt;Command message - it is a verb that says “do this”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’ll give you an example of how these message types interact with one another:&lt;/p&gt;

&lt;p&gt;You send a &lt;strong&gt;command&lt;/strong&gt; message to a particular service (with the routing key &lt;strong&gt;DoSomething&lt;/strong&gt;). Some asynchronous stuff happens in the background, and an &lt;strong&gt;event&lt;/strong&gt; message &lt;strong&gt;SomethingDone&lt;/strong&gt; is broadcasted to &lt;em&gt;all&lt;/em&gt; queues that are interested when something is done. This message contains the &lt;code&gt;_id&lt;/code&gt; of a document that was affected, and then each service that heard the &lt;strong&gt;SomethingDone&lt;/strong&gt; event requests via a request-reply queue for the document with the &lt;code&gt;_id&lt;/code&gt; that was received in the event message (and whichever service knows about that document type sends a &lt;strong&gt;document&lt;/strong&gt; message to the requesting service) (**).&lt;/p&gt;

&lt;p&gt;This is a very lightweight interaction method between services, and is especially useful when the communication can happen asynchronously. It may seem convoluted, but when you have your infrastructure set up, it can all happen pretty automatically.&lt;/p&gt;

&lt;p&gt;(*) &lt;em&gt;There is a nuance between event messages that contain metadata, versus an event message that contains a document, which is described in the book&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;(**) &lt;em&gt;This is the “pull” method, as opposed to the “push” method. The “push” method would actually send the entire document along with the event message so that there doesn’t need to be a separate RPC request for the document after the event is received. For brevity, I’ll leave out the details here, and recommend you again to read the Message Types chapters in the book&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;message-delivery&quot;&gt;Message Delivery&lt;/h1&gt;

&lt;p&gt;Queues are especially useful when you have &lt;strong&gt;important messages&lt;/strong&gt; that you want to know &lt;strong&gt;will be delivered&lt;/strong&gt;. However, your design pattern for your messages and your message consumers should be &lt;strong&gt;idempotent&lt;/strong&gt; (meaning, given the same message, the consumer will do the same thing each time). In other words, you don’t want a consumer that increments somebody’s bank account value by $1 every time it receives a message. Instead, you want the consumer to set the value to a specific value (which was $1 plus whatever the previous known value was). This is safer.&lt;/p&gt;

&lt;p&gt;There are caveats to this, and it depends on if, for example, your queues are durable, your messages are persistent, and your queue server is up (you can mitigate this risk too, by using an offline in-memory queue). However, given that your queue system itself is generally reliable, you have now managed to separate message delivery reliability from the application server itself.&lt;/p&gt;

&lt;p&gt;Places where this is helpful:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If an app server crashes and restarts&lt;/li&gt;
  &lt;li&gt;If you have to manually restart a server&lt;/li&gt;
  &lt;li&gt;If you need to scale a cloud server, which causes a restart&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For points 1 and 2, most people will quip back with “well, you should have error handlers”. Yes, agreed. However, this assumes that the engineer managed to provide 100% error coverage, which isn’t realistic. Servers still crash, servers still need to be restarted, etc.&lt;/p&gt;

&lt;p&gt;For point 3, if you’ve used something like &lt;a href=&quot;https://www.heroku.com&quot;&gt;Heroku&lt;/a&gt;, you’ll notice that you have the option to scale horizontally, which means in Heroku’s context that you increase the number of dynos, which supports more traffic to the dyno. However, this also causes a server restart.&lt;/p&gt;

&lt;p&gt;Now, the benefit: I’ve seen a server restart, watched the logs, and then see a message get delivered (a message that was sent immediately &lt;em&gt;before&lt;/em&gt; the server restarted). It didn’t really click in my head until I actually saw it happen in production in a critical instance: I restarted the server, and a message was still consumed by the process that I restarted.&lt;/p&gt;

&lt;p&gt;This is fantastic. However, &lt;strong&gt;it is also extremely important that your services consume messages in an idempotent manner&lt;/strong&gt;. For example:&lt;/p&gt;

&lt;p&gt;A service sends a message to invoke a process that will take 15 seconds, and then the message will be acknowledged. However, the process crashed at 10 seconds, but unfortunately 10 database documents were already manipulated in that time. The message wasn’t acknowledged yet, so when the server boots up again, the message &lt;em&gt;will be redelivered&lt;/em&gt;. So, will those updates cause the 10 documents to be updated &lt;em&gt;again&lt;/em&gt;? Is there some value you’re incrementing, for example? That wouldn’t necessarily be idempotent.&lt;/p&gt;

&lt;h1 id=&quot;queue-per-service&quot;&gt;Queue Per Service&lt;/h1&gt;

&lt;p&gt;In HTTP, there exist common patterns for deciding how services will communicate (for example, REST). However, a pain point in building out a queue system from scratch is that you also have to figure out what “queue” means in &lt;em&gt;your&lt;/em&gt; system. Do I set up a queue for certain message types (possibly)? Do I set up a queue per service and deliver all messages on that queue?&lt;/p&gt;

&lt;p&gt;The method I’ve had luck with in production so far is using a queue per service. This is the simplest way for me to reason about it in my head. You have a routing key for your message, and then it goes to a specific place (this would be for a “direct” queue using command messages).&lt;/p&gt;

&lt;p&gt;So, if you have a service that maintains user data, and the service is named “user-service”, then you create a queue called “user-service”. There are other patterns, but depending on your system, you may find the “queue per service” pattern useful.&lt;/p&gt;

&lt;p&gt;If you’re using RabbitMQ, you can just send a message with a specific routing key, and the queue server knows automatically which queue to send it to.&lt;/p&gt;

&lt;h1 id=&quot;dead-letters&quot;&gt;Dead letters&lt;/h1&gt;

&lt;p&gt;There are nuances between Dead Letter Channels and Invalid Message Channels. For brevity, again, I’ll recommend you read those 2 chapters in EIP, but for the sake of practical advice, I’ll tell you &lt;strong&gt;set up a dead letter queue&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What do you do with those messages? Do you store them to a database? Do you redeliver them?&lt;/p&gt;

&lt;p&gt;Depending on your system, you could decrypt the message and store it in a database that provides encryption at rest. This will allow you a quick way to scan through the messages that couldn’t be delivered and debug (your mileage may vary here; depending on your system, you might have to encrypt certain fields yourself, etc.)&lt;/p&gt;

&lt;h1 id=&quot;encryption&quot;&gt;Encryption&lt;/h1&gt;

&lt;p&gt;TL;DR&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use &lt;code&gt;amqps://&lt;/code&gt; protocol&lt;/li&gt;
  &lt;li&gt;Encrypt your message before sending to the queue server&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you’re using the secure protocol, you have encryption while in-transit, but depending on your provider, you might not have encryption at rest.&lt;/p&gt;

&lt;p&gt;Encrypting your messages might be a hassle, since now your services all need to use, say, a shared key, but you can bury this under the hood of your API using a message adapater to automatically handle the key negotiation, encryption, and decryption.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Again, I can’t recommend the EIP book enough. It can be hard to find coherent internet resources for implementing a queue, and this book provides well-tested production design patterns. Remember, consider your messages types, encrypt everything, and consider storing your dead letter messages to persistent storage to help you debug your system when (not if) something fails.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Aug 2017 06:45:00 -0700</pubDate>
        <link>http://joshbeam.github.io/rabbitmq/2017/08/14/practical-queue-considerations.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/rabbitmq/2017/08/14/practical-queue-considerations.html</guid>
        
        
        <category>rabbitmq</category>
        
      </item>
    
      <item>
        <title>Understanding Mongoose Deep Population</title>
        <description>&lt;!--excerpt.start--&gt;
&lt;p&gt;While MongoDB doesn’t natively support joins, the Mongoose framework now supports “deep population” (Mongoose has supported single-level populations for a while), which is akin to passing Mongoose a “graph” of what data should be populated in the results of your query. 
&lt;!--excerpt.end--&gt;&lt;/p&gt;

&lt;h1 id=&quot;who-is-this-post-for&quot;&gt;Who is this post for?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Those who have used or are familiar with &lt;a href=&quot;http://mongoosejs.com/&quot;&gt;Mongoose for MongoDB&lt;/a&gt; in a &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; app and are familiar with basics of models, schemas, and queries.&lt;/li&gt;
  &lt;li&gt;You may also have noticed that to aggregate data, you have several built-in MongoDB and Mongoose options available, but realized that queries for aggregating data oftentimes result in having to make multiple round-trips between your server and the database&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;It looks like &lt;a href=&quot;http://mongoosejs.com/&quot;&gt;Mongoose&lt;/a&gt; recently added sub-population to its API (see &lt;a href=&quot;https://github.com/Automattic/mongoose/blob/4.1.0/lib/utils.js#L464&quot;&gt;the exact line in the 4.1.0 (github)&lt;/a&gt; release, which is the first mention I can see of &lt;code class=&quot;highlighter-rouge&quot;&gt;subPopulate&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;This means that if you upgrade from Mongoose 3.8.x to ^4.1.x (the latest release is &lt;a href=&quot;https://github.com/Automattic/mongoose/tree/4.3.7&quot;&gt;4.3.7 (github)&lt;/a&gt; at the time of writing), then you get this built in, as well as some other feature. Keep in mind, however, there are backwards breaking changes, but &lt;a href=&quot;http://mongoosejs.com/docs/migration.html&quot;&gt;this guide (mongoose docs)&lt;/a&gt; covers how to migrate successfully.&lt;/p&gt;

&lt;p&gt;If you don’t know what sub-population is, or have never even heard of &lt;strong&gt;population&lt;/strong&gt;, keep reading…&lt;/p&gt;

&lt;h1 id=&quot;quick-primer-on-population&quot;&gt;Quick primer on population&lt;/h1&gt;

&lt;p&gt;Skip this section if you’re already familiar with &lt;a href=&quot;http://mongoosejs.com/docs/populate.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Model.populate&lt;/code&gt; (mongoose docs)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s pretend we’re building a social app, and we have two models: a &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserSchema&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PostSchema&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'User'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you run this query: &lt;code class=&quot;highlighter-rouge&quot;&gt;Post.find({}).populate('user').exec(callback)&lt;/code&gt;, Mongoose will look at the field &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; in the post, see that it has a &lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; model, and find that user by its &lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt; (yes, right now, &lt;a href=&quot;https://github.com/Automattic/mongoose/issues/2562&quot;&gt;only &lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt; (github issues)&lt;/a&gt;, but this covers most general use-cases).&lt;/p&gt;

&lt;p&gt;In other words, this query might return you this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;__t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Post'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1234'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;__t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'User'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'5678'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'josh'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s almost like a “join” in a SQL language, but not quite (remember, MongoDB doesn’t support joins, but there are some features like the &lt;a href=&quot;https://www.mongodb.com/blog/post/joins-and-other-aggregation-enhancements-coming-in-mongodb-3-2-part-1-of-3-introduction&quot;&gt;Aggregation framework (MongoDB blog post)&lt;/a&gt;, but I won’t cover that in this article). &lt;code class=&quot;highlighter-rouge&quot;&gt;populate&lt;/code&gt; still requires some round-trips, but it optimizes this under the hood so that to you, the developer, it appears that you got all the aggregated data you requested in one fell swoop.&lt;/p&gt;

&lt;p&gt;Mongoose says this quite frankly:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are no joins in MongoDB&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Population is the process of automatically replacing the specified paths in the document with document(s) from other collection(s). We may populate a single document, multiple documents, plain object, multiple plain objects, or all objects returned from a query.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If, for whatever reason, you didn’t find out about &lt;code class=&quot;highlighter-rouge&quot;&gt;populate&lt;/code&gt; until you already have an app running in production and might not feel like changing schemas around or doing any migrations, you can also specify a model for your query (this means that your schema &lt;strong&gt;&lt;em&gt;does not&lt;/em&gt;&lt;/strong&gt; need a &lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt; field):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;popuplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'User'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the query were to fail, your &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; field would just be &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So this is cool, but what if your &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; &lt;strong&gt;&lt;em&gt;also&lt;/em&gt;&lt;/strong&gt; has some field you want to populate? Let’s go deeper…&lt;/p&gt;

&lt;h1 id=&quot;deep-population&quot;&gt;Deep population&lt;/h1&gt;

&lt;p&gt;This is the new thing I was talking about.&lt;/p&gt;

&lt;p&gt;Maybe our user has friends. Let’s update our &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; schema (we’ll drop the &lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt; fields too):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UserSchema&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can populate down an extra level:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;populate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'User'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;populate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'friends'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'User'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Even better. Now we’ll get this as our result:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;__t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Post'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1234'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;__t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'User'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'5678'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'josh'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;__t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'User'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'9012'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'barry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'3456'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'7890'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;__t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'User'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'3456'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rooney'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;friends&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'9012'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'5678'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;        
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You might have noticed that &lt;code class=&quot;highlighter-rouge&quot;&gt;josh&lt;/code&gt;’s friends also have friends. So you’ll have to define your graph even down further if you want to keep populating.&lt;/p&gt;

&lt;p&gt;So how does Mongoose fetch all the correct data?&lt;/p&gt;

&lt;h1 id=&quot;under-the-hood&quot;&gt;Under the hood&lt;/h1&gt;

&lt;p&gt;So I talked about how Mongoose does some smart stuff behind the scenes. If you look at the actual query being made as a result of this &lt;code class=&quot;highlighter-rouge&quot;&gt;populate&lt;/code&gt; query, it’ll look something like this under the hood:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;$in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'5678'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'9012'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'3456'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aha! So it’s just an &lt;a href=&quot;https://docs.mongodb.org/manual/reference/operator/query/in/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$in&lt;/code&gt;&lt;/a&gt; query! Mongoose collects all of the &lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt; fields that it needs to look for per collection, and then after that… I’m not quite sure. Looking at the source code, it looks like it does some smart stuff to reflect on the results of that query and map the correct objects back to each original document, based on its position in the &lt;code class=&quot;highlighter-rouge&quot;&gt;populate&lt;/code&gt; graph that you passed into the query… or something like that (you can look over the source code starting around &lt;a href=&quot;https://github.com/Automattic/mongoose/blob/4.3.7/lib/model.js#L2468&quot;&gt;line 2468 of lib/model.js&lt;/a&gt; if you’re so inclined).&lt;/p&gt;

&lt;p&gt;In other words, yes, we’re making multiple round-trips as expected, and you as the developer could do this same query yourself, but this nice Mongoose API simply &lt;strong&gt;&lt;em&gt;let’s us define a graph of data that we want&lt;/em&gt;&lt;/strong&gt; and takes care of the rest under the hood. Not sure how much of this might be similar to the structure of what &lt;a href=&quot;https://facebook.github.io/react/blog/2015/05/01/graphql-introduction.html&quot;&gt;GraphQL&lt;/a&gt; could be intending to do in the future (I would be interested to know, as I’m not very familiar with that).&lt;/p&gt;

&lt;p&gt;Let’s back up a second. We saw that we can start at one level and traverse down arbitrarily, but what about siblings?&lt;/p&gt;

&lt;h1 id=&quot;sibling-populations&quot;&gt;Sibling populations&lt;/h1&gt;

&lt;p&gt;Let’s back up and add something to our &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt; schema. We’re going to add “related posts”, which is just an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt; IDs:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PostSchema&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;related_posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So now we want to start at 2 different root nodes: the &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; field, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;related_posts&lt;/code&gt; field. Mongoose supports this too, and has for quite some time (but only deeply since recently):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;populate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'User'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;populate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'friends'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'User'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'related_posts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Post'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;populate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'User'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;populate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'friends'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'User'&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see above, we simply can define sibling graphs in an array. If you look starting at &lt;a href=&quot;https://github.com/Automattic/mongoose/blob/4.3.7/lib/utils.js#L543&quot;&gt;line 543 of the lib/utils.js source code&lt;/a&gt;, you can see that we check first if the graph is an array, and if so, map over each individual graph, and then looking for sub-populations, and recursing over and over until we collect all the relevant IDs, perform our &lt;code class=&quot;highlighter-rouge&quot;&gt;$in&lt;/code&gt; query, and then map the resulting docs back to the original docs. Whew. I’m glad Mongoose does that for us.&lt;/p&gt;

&lt;p&gt;It seems like defining an arbitrarily deep graph every time we want to populate something might be a pain in the ass. Do we have to define graphs every time, or can we do it automatically?&lt;/p&gt;

&lt;h1 id=&quot;automatic-population-per-document&quot;&gt;Automatic population per document&lt;/h1&gt;

&lt;p&gt;MongoDB &lt;a href=&quot;https://www.mongodb.com/blog/post/introducing-version-40-mongoose-nodejs-odm&quot;&gt;published an article referencing Mongoose 4.0&lt;/a&gt;, and gave an example using the new &lt;code class=&quot;highlighter-rouge&quot;&gt;pre&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; hooks (&lt;a href=&quot;http://mongoosejs.com/docs/middleware.html&quot;&gt;middleware&lt;/a&gt;):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But what if you always wanted to load the lead singer every time you loaded a band?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// example from the article above&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bandSchema&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;lead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ObjectId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'person'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;autoPopulateLead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;populate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'lead'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;bandSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'findOne'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;autoPopulateLead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'find'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;autoPopulateLead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Band&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'band'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bandSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bands'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Nice. So if we define populations at the model level, we never have to actually call &lt;code class=&quot;highlighter-rouge&quot;&gt;populate&lt;/code&gt;. So in our previous examples, we could just add the hooks to each model, and simply call this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Much cleaner. If you don’t want to handle this middleware yourself, you can use &lt;a href=&quot;https://www.npmjs.com/package/mongoose-autopopulate&quot;&gt;mongoose-autopopulate&lt;/a&gt; plugin:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;PostSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;autopopulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;some-weaknesses-and-things-that-arent-supported&quot;&gt;Some weaknesses and things that aren’t supported&lt;/h1&gt;

&lt;p&gt;If you weren’t aware, you can have multiple models of different schemas all living in the same collection:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'PhotoPost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PhotoPostSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'posts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;mongoose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'TextPost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TextPostSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'posts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or, if you’re using &lt;a href=&quot;https://github.com/briankircho/mongoose-schema-extend&quot;&gt;mongoose-schema-extend&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PhotosPostSchema&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PostSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// your schema&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'posts'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s hard for Mongoose to discriminate under the hood which IDs might be duplicated across documents, so you might end up with &lt;code class=&quot;highlighter-rouge&quot;&gt;$in&lt;/code&gt; queries that have duplicate IDs if you’re querying the entire &lt;code class=&quot;highlighter-rouge&quot;&gt;posts&lt;/code&gt; collection. Keep in mind, though, that you can also define different graphs by &lt;a href=&quot;http://mongoosejs.com/docs/discriminators.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;discriminatorKey&lt;/code&gt;&lt;/a&gt; (by default, &lt;code class=&quot;highlighter-rouge&quot;&gt;__t&lt;/code&gt;). You do this with the &lt;code class=&quot;highlighter-rouge&quot;&gt;match&lt;/code&gt; parameter:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;populationGraph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;__t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'PhotoPost'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'User'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// then continue with deep population&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This can &lt;strong&gt;&lt;em&gt;limit specific graphs to certain models which may have varying schemas that exist in the same collection&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Some other things that aren’t supported by &lt;code class=&quot;highlighter-rouge&quot;&gt;populate&lt;/code&gt; itself that I may write about in the future:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Renaming fields (for example, truly, &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; is just an ID… shouldn’t it be called &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt; then in the database, but be returned to the client as &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; when it’s populated?)&lt;/li&gt;
  &lt;li&gt;Service calls (what if you want to populate a path based on some &lt;em&gt;outside service&lt;/em&gt;?)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This seems like a useful tool in being able to define a &lt;strong&gt;declarative model&lt;/strong&gt; for what your data should look like as a result of any query. There are some inherent weaknesses to a lack of true “joins”, but the Mongoose API does an elegant job of optimizing these types of queries under the hood.&lt;/p&gt;

&lt;p&gt;I’ve only recently begun using this, so if you know something that I don’t and would like to contribute to the discussion for anyone reading this article, feel free to comment below with any critiques, suggestions, random quotes, or song lyrics. Thanks.&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Jan 2016 09:45:00 -0800</pubDate>
        <link>http://joshbeam.github.io/mongodb/2016/01/24/mongoose-populate.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/mongodb/2016/01/24/mongoose-populate.html</guid>
        
        
        <category>mongodb</category>
        
      </item>
    
      <item>
        <title>Breaking down HTTPS</title>
        <description>&lt;!--excerpt.start--&gt;
&lt;p&gt;What is HTTPS, and why is it any more secure than HTTP? What is TLS, RSA, symmetric and asymmetric encryption, and what happens when I send my credit card over a secure connection so that I can buy Game of Thrones with the sole intention of binge watching the entire season in one evening? This article will attempt to answer those questions (but not the one about your obsession with Game of Thrones).
&lt;!--excerpt.end--&gt;&lt;/p&gt;

&lt;h1 id=&quot;who-is-this-for&quot;&gt;Who is this for?&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Intended audience&lt;/strong&gt;: Anyone who knows what basic HTTP (not secure) is, and…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You want to know what makes HTTPS any more secure&lt;/li&gt;
  &lt;li&gt;You also want to know what terms like RSA, TLS, asymmetric, and symmetric actually mean&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’ll have a head start if you’ve ever purchased a domain certificate in the past from someone like Comodo or GoDaddy, or if you already know that HTTPS protects your communications over the internet and want to know how that actually works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time to read&lt;/strong&gt;: 20 minutes of uninterrupted reading.&lt;/p&gt;

&lt;h1 id=&quot;how-did-you-get-this-information&quot;&gt;How did you get this information?&lt;/h1&gt;

&lt;p&gt;Lots of reading and some software engineering. I obtained all this information from various sources on the internet (some of which may or may not be canonical), like various &lt;a href=&quot;http://stackexchange.com/&quot;&gt;StackExchange&lt;/a&gt; websites, &lt;a href=&quot;http://robertheaton.com/2014/03/27/how-does-https-actually-work/&quot;&gt;Robert Heaton’s blog&lt;/a&gt;, &lt;a href=&quot;https://www.schneier.com/&quot;&gt;Schneier on Security&lt;/a&gt;, and &lt;a href=&quot;https://wikipedia.com&quot;&gt;Wikipedia&lt;/a&gt;. If you are generally skeptical of the veractiy of online sources which may or may not be opinionated, you’ll find some various specs and canonical references scattered throughout this article.&lt;/p&gt;

&lt;p&gt;If you want to see a step by step breakdown of an actual HTTPS request, I recommend &lt;a href=&quot;http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html&quot;&gt;The First Few Milliseconds of HTTPS by Moserware&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;I recently read a great &lt;a href=&quot;http://robertheaton.com/2014/03/27/how-does-https-actually-work/&quot;&gt;article by Robert Heaton (an engineer at Stripe), “How does HTTPS actually work?”&lt;/a&gt;. I would definitely recommend giving it a read.&lt;/p&gt;

&lt;p&gt;I wanted to extend off of some of the concepts a bit, and give some examples of how authenticity and encryption work on a very basic level within the context of communicating over the internet. &lt;strong&gt;I’ll do this by giving a simplified example of the HTTPS flow using asymmetric and symmetric encryption algorithms&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For starters, I want to breakdown some terminology. Stay with me, we’ll clarify the whole HTTPS process again later:&lt;/p&gt;

&lt;h1 id=&quot;tls&quot;&gt;TLS&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Related: &lt;a href=&quot;http://security.stackexchange.com/a/5127/45897&quot;&gt;What’s the difference between SSL, TLS, and HTTPS? on StackExchange&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;TLS (previously SSL) is the entire process used for secure communications over the internet. As you know, HTTP is the protocol used for clients and servers to exchange information (any type of information: sending HTML to the client, sending requests for, say, JSON to the server).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When HTTP implements TLS, we call it HTTPS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;TLS uses RSA for &lt;strong&gt;asymmetric cryptography&lt;/strong&gt; (one part of what makes TLS secure). RSA in this case is &lt;em&gt;only&lt;/em&gt; used for the initial connection to verify &lt;em&gt;authenticity&lt;/em&gt; (the “handshake”, we call it). This is important! TLS also uses &lt;strong&gt;symmetric cryptography&lt;/strong&gt;. This second form of cryptography is how messages (like sensitive login details or your credit card number) are actually encrypted and sent back and forth after the initial authenticity verification happens.&lt;/p&gt;

&lt;p&gt;Wait, wait, wait. &lt;strong&gt;Why don’t we just keep using RSA (our asymmetric cryptography) to send all of our messages back and forth? I’ll answer that soon. Keep reading.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;rsa&quot;&gt;RSA&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Related: &lt;a href=&quot;https://en.wikipedia.org/wiki/RSA_(cryptosystem)&quot;&gt;RSA (cryptosystem) on Wikipedia&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-it-is&quot;&gt;What it is&lt;/h2&gt;

&lt;p&gt;It’s an algorithm. Specifically, it is the algorithm we choose to use for private and public keys. These two keys are different, and anything you encrypt with a public key can only be decrypted with the corresponding private key and vice-versa. We call this &lt;strong&gt;asymmetric cryptography&lt;/strong&gt;. There are &lt;a href=&quot;http://security.stackexchange.com/a/54188/45897&quot;&gt;other algorithms&lt;/a&gt; besides RSA, but RSA is the most popular.&lt;/p&gt;

&lt;p&gt;It is important to note that calling a key “public” or “private” really only has to do with its availability to one person or multiple people.&lt;/p&gt;

&lt;p&gt;Another important thing to note is that when we “encrypt” with a private key, we always call this &lt;strong&gt;signing&lt;/strong&gt;, because thousands of people may have the corresponding public key (which is the whole point). When this is the case, we can’t expect to actually “encrypt” a message with the private key, since anyone with the public key could “decrypt” that message: all we’re doing by signing is proving that it came from the person who has the private key (only one person has the private key). This is only &lt;strong&gt;verifying authenticity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;However, when we encrypt something with the &lt;em&gt;public key&lt;/em&gt;, we in fact do call this “encryption”. This is because only one person can decrypt the message: the person who has the private key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When we encrypt something with a private key, we always call it “signing”. When we encrypt something with a public key, we always call it “encrypting”.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There is a comment I read to an answer on &lt;a href=&quot;http://stackoverflow.com/a/28084950/2714730&quot;&gt;SHA1 VS RSA: what’s the difference between them?&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You shouldn’t talk about encryption with a private key when you mean signatures.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, to really &lt;a href=&quot;http://stackoverflow.com/a/408466/2714730&quot;&gt;drive this point home&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quick point of terminology: the public key isn’t used to decrypt a message encrypted with the private key: it’s used to verify (the signature of) a message that has been signed with the private key. Decrypting is done with the private key, following encryption with the private key. (It doesn’t make sense to encrypt something with the private key, so that anyone can decrypt it with the public key.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-it-isnt&quot;&gt;What it isn’t&lt;/h2&gt;

&lt;p&gt;It is not a hashing algorithm. Again, refer to the above &lt;a href=&quot;http://stackoverflow.com/questions/733692/sha1-vs-rsa-whats-the-difference-between-them&quot;&gt;SHA1 VS RSA: what’s the difference between them? on StackOverflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The same applies for SHA2 (SHA-256), etc. For some reason, RSA and hashing algorithms get mixed up easily.&lt;/p&gt;

&lt;p&gt;RSA is the algorithm for creating public and private key-pairs. SHA2 (which is another name for SHA-256, by the way), for example, might be used to hash a password to store it in a database.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;Here’s a fake example of asymmetric cryptography:&lt;/p&gt;

&lt;pre&gt;
Private key:                            abc
Public key:                             xyz
Message we will &quot;encrypt&quot;:              hello world

Output when signed by private key:      asdfghj
Output when verified by public key:     hello world
(OK cool, since we could verify it, it came from the owner of the private key)

Output when encrypted by public key:    zxcvbnm
Output when decrypted by private key:   hello world
&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;OK cool, since we could verify it, it came from the owner of the private key&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wait, what? If you didn’t know what the message was in the first place, how do you know it was really supposed to say &lt;code class=&quot;highlighter-rouge&quot;&gt;hello world&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;As you might notice above, we have to have some sort of expectation of what the message &lt;em&gt;should&lt;/em&gt; look like. We have to know that the message is supposed to be “hello world” in the first place. So what we do is send the original message along with a “digital signature”, which is simply the signed (remember, we don’t say encrypted when we encrypt something with a private key) version of the message. Then you just use the public key to verify (again remember, we don’t “decrypt” with a public key) the attached signature to make sure it matches the plain-text message.&lt;/p&gt;

&lt;p&gt;Here is a fake example of how that would look:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hello world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;privateKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; a5dc78923jhbc&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;certificate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;certificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; hello worlda5dc78923jhbc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When we send that message to someone, they parse out the digital signature (the &lt;code class=&quot;highlighter-rouge&quot;&gt;a5dc78923jhbc&lt;/code&gt; part), and then verify and hash the original themselves to check if they are the same thing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a5dc78923jhbc'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;publicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In reality, certificates (such as the popular X.509 certificate) contain a different message, and the content of the digital signature is different. Here is &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc2459.txt&quot;&gt;the X.509 rfc&lt;/a&gt;, which echos the point above about hashing and then signing:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The data to be signed (e.g., the one-way hash function output value) is formatted for the signature algorithm to be used.  Then, a private key operation (e.g., RSA encryption) is performed to generate the signature value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are some unanswered questions here, like, how do we know who this certificate actually came from. Could someone just copy and paste someone else’s certificate and send it (I don’t mean the private key; I mean the signature, which is public and attached to the certificate, which is also public)? More on this in a sec.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://coolaj86.com/articles/asymmetric-public--private-key-encryption-in-node-js/&quot;&gt;Asymmetric Public / Private Key Encryption (RSA) in Node.js&lt;/a&gt; puts it very well:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Public keys Encrypt &amp;amp; Verify&lt;/p&gt;

  &lt;p&gt;Private keys Sign &amp;amp; Decrypt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;symmetric-cryptography&quot;&gt;Symmetric cryptography&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Related: &lt;a href=&quot;https://en.wikipedia.org/wiki/Caesar_cipher&quot;&gt;Caesar cipher (Wikipedia)&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;example-1&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;On a high level, symmetric cryptography is something like this:&lt;/p&gt;

&lt;pre&gt;
Plain:    ABCDEFGHIJKLMNOPQRSTUVWXYZ
Cipher:   XYZABCDEFGHIJKLMNOPQRSTUVW
&lt;/pre&gt;

&lt;pre&gt;
HELLO WORLD =&amp;gt; EBIIL TLOIA
&lt;/pre&gt;

&lt;p&gt;If we both know the cypher, we can encrypt and decrypt messages.&lt;/p&gt;

&lt;p&gt;The client and server will decide which symmetric algorithm they want to use (thankfully, the Caesar Cipher is not one of the available options). A popular one is &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&quot;&gt;AES&lt;/a&gt;, and the one used before that was &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_Encryption_Standard&quot;&gt;DES&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To give an AES example in code (adapted from &lt;a href=&quot;http://lollyrock.com/articles/nodejs-encryption/&quot;&gt;Encrypt and decrypt content with Nodejs&lt;/a&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'crypto'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;algorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'aes-256-ctr'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randomBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createCipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'utf8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hex'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;final&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hex'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encrypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decipher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createDecipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hex'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'utf8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;final&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'utf8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In other words, we’re created a key: a bunch of &lt;a href=&quot;http://stackoverflow.com/a/2450098/2714730&quot;&gt;cryptographically random bytes&lt;/a&gt; –&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A cryptographically secure number random generator, as you might use for generating encryption keys, works by gathering entropy - that is, unpredictable input - from a source which other people can’t observe.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then we used AES-256 to use that key to encrypt our message. If we share that key, we can also decrypt that message.&lt;/p&gt;

&lt;pre&gt;
Message:           hello world
Password:          2d00cd9bd332cef43a41d80ef31b9ebb
Encrypted message: 940f1f7e63f7bc229169fa 
&lt;/pre&gt;

&lt;p&gt;Symmetric algorithms are generally more efficient than their asymmetric counterparts, but we can’t send a session key (a symmetric shared key) over a non-secure network connection and expect any information encrypted with it to be secure. This is why we start off first with asymmetric encryption, and then end up using symmetric encryption for the rest of the time we’re connected. More on this in a sec.&lt;/p&gt;

&lt;h1 id=&quot;revisiting-the-https-flow&quot;&gt;Revisiting the HTTPS flow&lt;/h1&gt;

&lt;p&gt;Keeping it basic, here is essentially what happens when you visit a site that has &lt;code class=&quot;highlighter-rouge&quot;&gt;https://&lt;/code&gt; in the URL (I’m shortening this into 2 broad steps, but just know that there is more going on at a lower level):&lt;/p&gt;

&lt;h2 id=&quot;step-1-of-2-server-proves-its-authenticity-by-sending-a-signed-certificate&quot;&gt;Step 1 of 2: Server proves its authenticity by sending a signed certificate&lt;/h2&gt;

&lt;p&gt;Remember in the RSA section above where we asked, “how do we know who actually sent the certificate”? Even if there is a signature present, this only proves that the message was somehow signed by the server’s private key. But couldn’t anyone simply copy and paste a valid certificate and send it, pretending to be say, www.microsoft.com? Yes, but remember, the moment you encrypt something with Microsoft’s public key and send it back to the original sender, they will not be able to decrypt it (given that they don’t have the correct private key). Also, we rely on outside constraints like DNS servers to make sure the traffic is routed correctly.&lt;/p&gt;

&lt;p&gt;Another example of this is in real life: you could write a new employment agreement granting yourself double your current salary, create a stamp of your boss’s signature, then stamp the memo and send it to HR. It looks like it came from your boss, but HR needs to check to make sure it actually did.&lt;/p&gt;

&lt;p&gt;We can also sign certificates with as many signatures as we want, belonging to whomever we want.&lt;/p&gt;

&lt;p&gt;Remember, your browser comes pre-installed with “root certificates” that you automatically trust. So, if the server bought its certificate from GoDaddy, the certificate can be signed with, say, GoDaddy’s private key as well as the server’s private key, and you use those two corresponding public keys to check the certificate (in other words, you’re checking that the certificate came from the server since only the server should have its private key, and you also check that the server bought their certificate from someone you trust already, like GoDaddy – we call them the “Certificate Authority”). In other word, we can have any number of people sign the certificate. This is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Chain_of_trust&quot;&gt;Chain of trust (Wikipedia)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As Heaton notes (in an example of Symantec hypothetical being the CA for Microsoft):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Symantec will have taken steps to ensure the organisation they are signing for really does own Microsoft.com, and so given that your client trusts Symantec, it can be sure that it really is talking to Microsoft Inc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To simplify things, here are some ways we can check that the certificate in fact was sent by the correct server (instead of an attacker just copy and pasting an entire certificate and sending it to you, adapted from a &lt;a href=&quot;http://stackoverflow.com/a/188308/2714730&quot;&gt;fantastic answer&lt;/a&gt; to “How are ssl certificates verified?” on StackOverflow):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The certificate is signed by a CA, any intermediate signatures, and the server’s private key.&lt;/li&gt;
  &lt;li&gt;Your browser uses the pre-installed certificates to verify any CA signatures in the server’s certificate.&lt;/li&gt;
  &lt;li&gt;The certificate contains an IP address or domain name, and the browser checks this is the server with which there is an open connection.&lt;/li&gt;
  &lt;li&gt;The client encrypts the symmetric key (more on this in a second) with the server’s public key; only the server can decrypt this.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From &lt;a href=&quot;http://robertheaton.com/2014/03/27/how-does-https-actually-work/&quot;&gt;Heaton’s article&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that the server is also allowed to require a certificate to prove the client’s identity, but this typically only happens in very sensitive applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;step-2-of-2-the-server-and-client-start-using-symmetric-encryption&quot;&gt;Step 2 of 2: The server and client start using symmetric encryption&lt;/h2&gt;

&lt;p&gt;The client encrypts a “password” (the session key that will be used from now on to decrypt each others’ messages) and sends it to the server. Remember, the server can only decrypt this message containing the session key if the server actually has the corresponding private key, which is another cool security measure.&lt;/p&gt;

&lt;p&gt;So to answer a question from earlier, &lt;strong&gt;why don’t we just keep using RSA (our asymmetric cryptography) to send all of our messages back and forth?&lt;/strong&gt; Essentially, asymmetric encryption is less efficient than symmetric encryption. Some of these reasons include:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://crypto.stackexchange.com/a/5790&quot;&gt;Why is asymmetric cryptography bad for huge data? on Crypto StackExchange&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Size of cryptogram: symmetric encryption does not increase the size of the cryptogram (asymptotically), but asymmetric encryption does […] it is safe to say that a symmetric scheme is orders of magnitude faster and less power hungry than an asymmetric one, at least for decryption (some asymmetric schemes, including RSA with low public exponent, are considerably faster on the encryption side than they are on the decryption side, and can approach the throughput of some symmetric cryptography).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Someone mentioned succinctly from &lt;a href=&quot;http://stackoverflow.com/a/4469258/2714730&quot;&gt;How does SSL use symmetric and asymmetric encryption? on StackOverflow&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Asymmetric encryption is necessary to verify the others identity and then symmetric encryption gets used because it’s faster.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Remember too initially that a server can’t encrypt messages with the private key since anyone with the public key could read them. This would mean that the server would need to have the client’s public key as well so that the server could actually encrypt messages.&lt;/p&gt;

&lt;p&gt;From now on, since the client and server both have a shared password (the “session key”), they can both encrypt and decrypt messages with it.&lt;/p&gt;

&lt;p&gt;In our example from the “symmetric encryption” section (these are actual AES-encrypted keys and messages):&lt;/p&gt;

&lt;pre&gt;
Message:                      hello world
Session secret (password):    2d00cd9bd332cef43a41d80ef31b9ebb
Encrypted message:            940f1f7e63f7bc229169fa 
&lt;/pre&gt;

&lt;p&gt;Remember, since the client sent the server the session secret (by encrypting it asymmetrically first by using the server’s public key), &lt;strong&gt;the server and client both now used this shared session secret from now on&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;a-note-on-trust&quot;&gt;A note on trust&lt;/h1&gt;

&lt;p&gt;Part of the Chain of Trust depends on us having pre-installed root certificates that we implicitly trust. That means I could make a certificate and install it on someone’s computer, and then pretend to be the server they are requesting something from. This is a classic “man in the middle” attack.&lt;/p&gt;

&lt;p&gt;You can use &lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles Proxy&lt;/a&gt; to test your native app API. Essentially, your’re performing a MITM attack against your own app. To understand this, check out &lt;a href=&quot;http://nickfishman.com/post/50557873036/reverse-engineering-native-apps-by-intercepting-network&quot;&gt;Reverse Engineering Native Apps by Intercepting Network Traffic&lt;/a&gt; (this was also linked at the end of Heaton’s article above, but I’d like to link to it as well since it is very relevant). You can also use Charles Proxy to perform a MITM attack on one of your co-workers. Remember there are &lt;a href=&quot;https://en.wikipedia.org/wiki/Electronic_Communications_Privacy_Act&quot;&gt;laws against this&lt;/a&gt; (also see &lt;a href=&quot;http://www.hackerlaw.org/?page_id=55&quot;&gt;Hacker Law&lt;/a&gt;). Or your boss could monitor all of your internet traffic (there is probably a clause in your employment agreement allowing your IT department to perform MITM attacks on you). There’s even an article called &lt;a href=&quot;http://www.entrepreneur.com/article/223686&quot;&gt;3 Tips for Legally and Ethically Monitoring Employees Online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, I mentioned above something about “buying a certificate”. If you haven’t purchased a certificate before in order to enable HTTPS on your custom domain, here’s how it works (I’ve bought 3 or 4 certificates from different providers in the past). Some providers (like &lt;a href=&quot;https://www.comodo.com/&quot;&gt;Comodo&lt;/a&gt;) offer a free 90-day certificate where they don’t really verify much about you. On the other hand, you can buy a certificate from them, or from someone like GoDaddy, called “extended validation”, where they email the email address associated with the domain, they verify your business and address, etc. This allows the certificate authority to verify that they are giving a legitimate certificate to a legitimate entity. Does it always work out perfectly? I would say no.&lt;/p&gt;

&lt;p&gt;For example, I could still be a bad guy setting up an HTTPS domain to steal information from people, and I could simply get one of Comodo’s free 90-day certificates, steal a bunch of information from unsuspected users visiting my site over an HTTPS connection. In other words:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Certificate authorities sign a certificate simply saying it belongs to a domain (and that’s it)&lt;/li&gt;
  &lt;li&gt;The certificate allows you to use an HTTPS connection so people can’t steal data that’s going across the wire&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But this doesn’t prove whether the owner of the server is good or bad. This whole process is just about identity, authentication, and secure communications. Just something to keep in mind.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;If you made it this far, I’d like to say… you have no life, and thank you for reading (just kidding about the “no life” part; you only spent 20 minutes reading this, I spent a whole day writing it… So who’s really the one with no life?)&lt;/p&gt;

&lt;p&gt;In pseudo-code using pseudo-certificates, here’s our summary of what happens over HTTPS:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Client connects and asks server for their certificate, which in my pseudo-world looks like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;ip:216.58.192.461:public_key:123456:signature:qa2ws3ed4rf&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Client verifies that &lt;code class=&quot;highlighter-rouge&quot;&gt;verify('qa2ws3ed4rf', public_key) === sha256('ip:216.58.192.461:public_key:123456')&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Client creates a shared symmetric session secret &lt;code class=&quot;highlighter-rouge&quot;&gt;caesarcipher&lt;/code&gt;, and encrypts this with the server’s public key&lt;/li&gt;
  &lt;li&gt;Client sends &lt;code class=&quot;highlighter-rouge&quot;&gt;encrypt('caesarcipher', public_key)&lt;/code&gt; which turns out to look like &lt;code class=&quot;highlighter-rouge&quot;&gt;abcdefg&lt;/code&gt; to the server&lt;/li&gt;
  &lt;li&gt;The server attempts to &lt;code class=&quot;highlighter-rouge&quot;&gt;decrypt('abcdefg', private_key)&lt;/code&gt;, and thankfully, the server gets &lt;code class=&quot;highlighter-rouge&quot;&gt;caesarcipher&lt;/code&gt; (the correct shared session key)&lt;/li&gt;
  &lt;li&gt;The client buys the new season of Game of Thrones by sending his credit card number (encrypted with &lt;code class=&quot;highlighter-rouge&quot;&gt;caesarcipher&lt;/code&gt;) to the server and binge watches the entire season in one evening&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it. This is the real end. Again, this is a very, very basic overview and there is much more going on behind the scenes (for example, things like &lt;a href=&quot;http://security.stackexchange.com/questions/63971/how-is-the-premaster-secret-used-in-tls-generated&quot;&gt;pre-master and master secrets&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Cryptographic_nonce&quot;&gt;nonces&lt;/a&gt;, and all kinds of other stuff. Also, we are still discovering &lt;a href=&quot;http://robertheaton.com/2015/04/06/the-ssl-freak-vulnerability/&quot;&gt;bugs in SSL&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Further reading:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html&quot;&gt;SSL/TLS &amp;amp; Perfect Forward Secrecy&lt;/a&gt; from Vincent Bernat&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://security.stackexchange.com/questions/20105/are-ssl-encrypted-requests-vulnerable-to-replay-attacks&quot;&gt;Are SSL encrypted requests vulnerable to Replay Attacks?&lt;/a&gt; on Security StackExchange (explains partially why we use randoms “so old signatures and temporary keys cannot be replayed.”)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 17 Jan 2016 05:49:00 -0800</pubDate>
        <link>http://joshbeam.github.io/encryption/2016/01/17/breaking-down-https.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/encryption/2016/01/17/breaking-down-https.html</guid>
        
        
        <category>encryption</category>
        
      </item>
    
      <item>
        <title>Using node.js to upload your app to Google Play</title>
        <description>&lt;div class=&quot;note&quot;&gt;
&lt;!--excerpt.start--&gt;
If you're developing a hybrid mobile app, you may want to stick with node.js to upload your app to the Google Play Store. However, Google's node.js client is still in &quot;alpha&quot;, and documentation is very limited. This post gives information about basic setup to get started using the googleapis client.
&lt;!--excerpt.end--&gt;
&lt;/div&gt;

&lt;h1 id=&quot;why-would-i-use-nodejs-to-upload-an-android-app&quot;&gt;Why would I use node.js to upload an Android app?&lt;/h1&gt;

&lt;p&gt;Perhaps you’re developing a &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; (hybrid mobile) app :)&lt;/p&gt;

&lt;p&gt;The only library I found available to upload to the Play Store is &lt;a href=&quot;https://github.com/google/google-api-nodejs-client/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;google-api-nodejs-client&lt;/code&gt;&lt;/a&gt; (written by Google).&lt;/p&gt;

&lt;p&gt;Since I couldn’t find much documentation, I had to comb a bit through the source code of the library to figure out what was going on. This post will go over some of the initial set-up of the library (there are a few holes, which are left to be figured out).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This tutorial starts at the point after you’ve already set up your app in the Google Play store (but have not yet uploaded a new APK).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important: according to Play Store docs, you must first MANUALLY upload your APK the first time (by going into your developer console and clicking the “Upload” button). Any time after that, however, you can use a library such as the one in this tutorial.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also, I’m assuming you’ve already found out a way to build your APK. If you’re using Ionic/Cordiva, follow &lt;a href=&quot;http://ionicframework.com/docs/guide/publishing.html&quot;&gt;their official tutorial&lt;/a&gt; to figure out how to generate an APK.&lt;/p&gt;

&lt;h1 id=&quot;useful-documents-before-we-start&quot;&gt;Useful documents before we start&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;My full example code used in this tutorial (on &lt;a href=&quot;https://github.com/joshbeam/googleapis-androidpublisher-example&quot;&gt;Github&lt;/a&gt;. Save it as something like &lt;code class=&quot;highlighter-rouge&quot;&gt;upload.js&lt;/code&gt;, and remember to &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod a+x upload.js&lt;/code&gt; to be able to run it on the command line.) This may be incomplete or not fully functional in some places (it was originally tailored for one of our organization’s apps), but the basic “skeleton” is there. You can also &lt;a href=&quot;https://github.com/joshbeam/googleapis-androidpublisher-example/archive/master.zip&quot;&gt;download the ZIP&lt;/a&gt; (this is linked from Github).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/google-api-nodejs-client/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;googleapis&lt;/code&gt; README on Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/googleapis&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;googleapis&lt;/code&gt; npm page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/google-api-nodejs-client/blob/master/apis/androidpublisher/v2.js&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;androidpublisher&lt;/code&gt; v2 source code&lt;/a&gt;, which is what I used as my documentation (it’s pleasantly well-commented)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/android-publisher/getting_started&quot;&gt;Google documentation on developers.google.com&lt;/a&gt; for generic usage of the &lt;code class=&quot;highlighter-rouge&quot;&gt;android-publisher&lt;/code&gt; module&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;download-the-library&quot;&gt;Download the library&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install --save-dev googleapis&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the abovementioned library, which, according to Github is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Google’s officially supported node.js client library for using Google APIs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Supposedly it supports &lt;a href=&quot;https://developers.google.com/apis-explorer/#p/&quot;&gt;all of Google’s APIs&lt;/a&gt;, including the &lt;code class=&quot;highlighter-rouge&quot;&gt;androidpublisher&lt;/code&gt; (which is what we’ll be using).&lt;/p&gt;

&lt;h1 id=&quot;uploading-isnt-quite-what-it-seems&quot;&gt;Uploading isn’t quite what it seems&lt;/h1&gt;

&lt;p&gt;With this API, we don’t simply upload an APK.&lt;/p&gt;

&lt;p&gt;Instead, we:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open an “edit” (&lt;code class=&quot;highlighter-rouge&quot;&gt;play.edits.insert&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Upload the APK in sort of a limbo state (&lt;code class=&quot;highlighter-rouge&quot;&gt;play.edits.apks.upload&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Do whatever else in this step (say, set a track, etc.)&lt;/li&gt;
  &lt;li&gt;“Commit” the edit (&lt;code class=&quot;highlighter-rouge&quot;&gt;play.edits.commit&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Basically what we’re doing is opening some sort of “container” in cyberspace where we have a white room to upload our app, set whatever properties, etc., and then finally we either discard or commit all those edits.&lt;/p&gt;

&lt;h2 id=&quot;primer-on-tracks&quot;&gt;Primer on “tracks”&lt;/h2&gt;

&lt;p&gt;Read the &lt;a href=&quot;https://developers.google.com/android-publisher/tracks&quot;&gt;official Google docs about tracks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;“Tracks” are just channels (&lt;code class=&quot;highlighter-rouge&quot;&gt;alpha&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;beta&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;production&lt;/code&gt;). In the Play Store, you can put your app in any of these tracks. Why have &lt;code class=&quot;highlighter-rouge&quot;&gt;alpha&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;beta&lt;/code&gt;? Well, in each one of those tracks, you can designate specific testers.&lt;/p&gt;

&lt;p&gt;For example, your &lt;code class=&quot;highlighter-rouge&quot;&gt;alpha&lt;/code&gt; track can be closed testing for your developers only, and your &lt;code class=&quot;highlighter-rouge&quot;&gt;beta&lt;/code&gt; track can be for, say, QA engineers, or a small subset of other people.&lt;/p&gt;

&lt;p&gt;These “limited” tracks (&lt;code class=&quot;highlighter-rouge&quot;&gt;alpha&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;beta&lt;/code&gt;) are also &lt;strong&gt;fantastic&lt;/strong&gt; if your app is some sort of “admin” app that will only ever be available to specific users in your organization. But be careful: the moment you send your app to production, it is there to stay (and it’s live to everyone in the Play Store) (see &lt;a href=&quot;http://stackoverflow.com/questions/17006165/unable-to-deactivate-apk-accidentally-uploaded-to-prod&quot;&gt;Unable to deactivate APK accidentally uploaded to Prod&lt;/a&gt; on StackOverflow).&lt;/p&gt;

&lt;p&gt;Just as an aside, if you want each APK in each track to hit a different server (for example, if you want your &lt;code class=&quot;highlighter-rouge&quot;&gt;beta&lt;/code&gt; to hit “staging.example.com/api/1.0” and your &lt;code class=&quot;highlighter-rouge&quot;&gt;production&lt;/code&gt; track to hit “production.example.com/api/1.0”), you’re out of luck (as far as I know). The APK you upload and promote through the various tracks can’t be reconfigured each time you move it to a different track (by the way, to move your &lt;code class=&quot;highlighter-rouge&quot;&gt;beta&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;production&lt;/code&gt;, you can just hit the “Promote to…” button and click the new channel. I haven’t yet tried to use the API to do this, as opening a new zshell window is as easy as just logging into the Play Store console in Chrome and pressing the button. Some hardcore shell users may disagree with me.)&lt;/p&gt;

&lt;h1 id=&quot;initial-set-up&quot;&gt;Initial set up&lt;/h1&gt;

&lt;p&gt;There’s a lot going on here. Here are the initial module declarations.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// our handy library&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'googleapis'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// this is optional, but helpful&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bluebird'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// just a utility library (handy, if you haven't used it before)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'lodash'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// command line parsing&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'yargs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// see below in &quot;Finding your secret.json&quot; to find out how to get this&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../../../secret.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// I'm using my package.json as my source of truth for my versioning&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../../../package.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// any unique id will do; a timestamp is easiest&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;editId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// editing &quot;scope&quot; allowed for OAuth2&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scopes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'https://www.googleapis.com/auth/androidpublisher'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// here, we'll initialize our client&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OAuth2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OAuth2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oauth2Client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OAuth2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jwtClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client_email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;private_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scopes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;androidpublisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'v2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oauth2Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// default options&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// this is the package name for your initial app you've already set up on the Play Store&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;packageName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.example.app'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oauth2Client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;finding-your-secretjson&quot;&gt;Finding your &lt;code class=&quot;highlighter-rouge&quot;&gt;secret.json&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;You can make one! Go to &lt;a href=&quot;https://console.developers.google.com/&quot;&gt;https://console.developers.google.com&lt;/a&gt;.&lt;/p&gt;

&lt;center&gt;
  &lt;img src=&quot;/images/googleapis-play-store-permissions-menu.png&quot; width=&quot;25%&quot; /&gt;
  &lt;br /&gt;
  &lt;i&gt;Click on &quot;permissions&quot; in the side menu&lt;/i&gt;
&lt;/center&gt;

&lt;center&gt;
  &lt;img src=&quot;/images/googleapis-permissions-service-account.png&quot; width=&quot;90%&quot; /&gt;
  &lt;br /&gt;
  &lt;i&gt;You can generate your key here. Don't worry, as of the date of writing this post, you can generate as many keys as you'd like without the fear of revoking other active keys! :)&lt;/i&gt;&lt;br /&gt;
&lt;/center&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;secret.json&lt;/code&gt; should look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;private_key_id&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;y34hr1ght&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;private_key&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-----BEGIN PRIVATE KEY-----\nyouthoughtiwasgoingtopostmyprivatekey\n-----END PRIVATE KEY-----\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;client_email&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;someweirdlookingstring-123@developer.gserviceaccount.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;client_id&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;someweirdlookingstring-123.apps.googleusercontent.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;service_account&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I found the initial options and how to initialize &lt;code class=&quot;highlighter-rouge&quot;&gt;androidpublisher&lt;/code&gt; through a bit of trial and error. You can use the &lt;a href=&quot;https://github.com/google/google-api-nodejs-client&quot;&gt;general &lt;code class=&quot;highlighter-rouge&quot;&gt;googleapis&lt;/code&gt; README&lt;/a&gt; (which is not specific to &lt;code class=&quot;highlighter-rouge&quot;&gt;androidpublisher&lt;/code&gt;) if you want to see example of connecting to other APIs, using OAuth2, etc. Again, you won’t find much useful information for this specific case.&lt;/p&gt;

&lt;h1 id=&quot;lets-actually-do-some-stuff&quot;&gt;Let’s actually do some stuff&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// &quot;open&quot; our edit&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;startEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./Chronicled.apk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// stage the upload (doesn't actually upload anything)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;apk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apk&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// set our track&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setTrack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// commit our changes&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commitToPlayStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// log our success!&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Successful upload:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 *  Sets our authorization token and begins an edit transaction.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// get the tokens&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;jwtClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// set the credentials from the tokens&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;oauth2Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;editId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// this edit will be valid for 10 minutes&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;expiryTimeSeconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 *  Stages an upload of the APK (but doesn't actually upload anything)
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;editId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;na&quot;&gt;mimeType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'application/vnd.android.package-archive'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apk&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// pass any data we care about to the next function call&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;omit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uploadResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'apk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 *  Sets our track (beta, production, etc.)
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setTrack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;track&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tracks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'alpha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tracks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;editId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;versionCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uploadResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;versionCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;setTrackResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 *  Commits our edit transaction and makes our changes live.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commitToPlayStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;editId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;commitToPlayStoreResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the code above, all we’re doing is calling these steps in order:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open our edit (&lt;code class=&quot;highlighter-rouge&quot;&gt;startEdit&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Stage our APK for upload (&lt;code class=&quot;highlighter-rouge&quot;&gt;upload&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Set our track (&lt;code class=&quot;highlighter-rouge&quot;&gt;setTrack&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Committing our changes (&lt;code class=&quot;highlighter-rouge&quot;&gt;commitToPlayStore&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Throughout all these steps, all we’re doing is manipulating our data after each function call and piping it into the next function (nothing special about that part).&lt;/p&gt;

&lt;p&gt;If all went well, you should see something like this printed in your consol:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Successful&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1234567'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expiryTimeSeconds&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1441766670'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;uploadResults&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;versionCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dddddd444444aaaaa55555'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;setTrackResults&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'beta'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;versionCodes&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;commitToPlayStoreResults&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1234567'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expiryTimeSeconds&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1441766670'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;forgetting-to-bump-your-version&quot;&gt;Forgetting to bump your version&lt;/h2&gt;

&lt;p&gt;If you see this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;APK&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;specifies&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;already&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;been&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;used&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.]&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'androidpublisher'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'apkUpgradeVersionConflict'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'APK specifies a version code that has already been used.'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cannot&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'edit'&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This means you need to bump your &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; version.&lt;/p&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h1&gt;

&lt;p&gt;The node.js client used in this tutorial is still very much in its early stages, as noted by Google in their &lt;a href=&quot;https://github.com/google/google-api-nodejs-client/&quot;&gt;official README&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This library is in Alpha. We will make an effort to support the library, but we reserve the right to make incompatible changes when necessary.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another gaping hole missing in this tutorial is &lt;strong&gt;promotion through tracks&lt;/strong&gt;. If anyone knows more about that, please comment below! Thanks for reading, and I hope you’ve found some useful information in this post!&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Dec 2015 07:30:00 -0800</pubDate>
        <link>http://joshbeam.github.io/javascript/2015/12/26/using-nodejs-to-upload-app-to-google-play.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/javascript/2015/12/26/using-nodejs-to-upload-app-to-google-play.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Initial thoughts on event sourcing</title>
        <description>&lt;div class=&quot;note&quot;&gt;
&lt;!--excerpt.start--&gt;
&quot;The state of any object can be derived from the events that affect it.&quot; In a nutshell, this is the thesis of &quot;event sourcing&quot;, which, when implemented in an application, becomes an &quot;event driven architecture&quot;. In this post I'll discuss some of the practical applications, benefits, and drawbacks that the team and I have noticed after migrating our current, stateful database to a more event-driven approach.
&lt;!--excerpt.end--&gt;
&lt;/div&gt;

&lt;h1 id=&quot;tldr&quot;&gt;TL;DR&lt;/h1&gt;

&lt;p&gt;Store events in your database, and construct the current state of your database from those events. Keep side-effects separate (like emails being sent to users). Endpoints become open-ended and asynchronous, and you can track the state of your database throughout time (almost like Git).&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;My team and I are several months into a move from a traditional RESTful implementation (which is referred to as &lt;strong&gt;“active record”&lt;/strong&gt; and is arguably the most widespread concept taught in web development) of our server to a more event-driven approach. If you haven’t read much about event-driven architecture (EDA) or &lt;strong&gt;event sourcing&lt;/strong&gt;, I would recommend taking a look at &lt;a href=&quot;https://ookami86.github.io/event-sourcing-in-practice/#title.md&quot;&gt;this easy-to-follow slide deck&lt;/a&gt; (it should take about &lt;strong&gt;10 minutes or so&lt;/strong&gt; to get a basic idea of what’s going on). If you prefer not to read that…&lt;/p&gt;

&lt;h1 id=&quot;heres-a-quick-rundown-of-some-of-the-basic-concepts&quot;&gt;Here’s a quick rundown of some of the basic concepts&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;“Entities” (records in your database) are modeled &lt;em&gt;as&lt;/em&gt; events (for example, &lt;code class=&quot;highlighter-rouge&quot;&gt;UserCreated&lt;/code&gt; would be an entity).&lt;/li&gt;
  &lt;li&gt;Your stateful objects (something that would traditionally be a &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; object or whatever) are &lt;em&gt;derived from&lt;/em&gt; your events.&lt;/li&gt;
  &lt;li&gt;In theory, &lt;strong&gt;if you only kept a backup of your event entities, you should be able to reconstruct the most up-to-date state of your entire database&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;center&gt;&lt;img src=&quot;/images/event-sourcing-diagram.png&quot; width=&quot;50%&quot; /&gt;&lt;/center&gt;

&lt;p&gt;Instead of mutating an object over and over and losing any notion of what led the object to that point, you can instead keep a timeline of the object and &lt;em&gt;derive&lt;/em&gt; its current state. It’s like &lt;strong&gt;having a history of every object in your database&lt;/strong&gt;. Kind of reminds me of Git.&lt;/p&gt;

&lt;p&gt;For performance reasons, every time some requests, say, &lt;code class=&quot;highlighter-rouge&quot;&gt;user/1234&lt;/code&gt;, you don’t want to recompute that user object based on the events that led up to that point (&lt;code class=&quot;highlighter-rouge&quot;&gt;UserCreated&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;UserUpdatedEmailAddress&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;UserLoggedIn&lt;/code&gt;, etc.), but instead, every time an update/delete occurs, you can just store the current state of whatever that object is in a separate table and query for &lt;em&gt;that&lt;/em&gt; on any &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; request.&lt;/p&gt;

&lt;p&gt;In other words, &lt;strong&gt;new events trigger updates, and &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; requests query for the stateful object itself&lt;/strong&gt;. This is almost like a cache.&lt;/p&gt;

&lt;p&gt;In other words, this is a very close model of real life. Things happen over time, and the current state of anything is just the sum of the things that happened to it.&lt;/p&gt;

&lt;h1 id=&quot;what-can-the-endpoints-look-like&quot;&gt;What can the endpoints look like?&lt;/h1&gt;

&lt;p&gt;Something like &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/1.0/userCreated&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One approach is to model your endpoints as events themselves. In other words, the endpoints have a semantic meaning for their corresponding entity, just like any other traditional RESTful endpoint. However, this approach lends itself to being a bit &lt;strong&gt;more open-ended and a bit less procedural&lt;/strong&gt;. Additionally, all endpoints become basically either a &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; or a &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; (similar to “REST without &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt;”), and side-effects are processed asynchronously on the backend.&lt;/p&gt;

&lt;p&gt;That last point about side-effects is important, because if you were to reconstruct your database from your events, you would want to do so without, say, triggering emails being sent to users, etc. The side-effects should be encapsulated in a set of logic seperate from the event creation itself (and endpoints are a great mechanism for this).&lt;/p&gt;

&lt;h1 id=&quot;some-benefits-ive-encountered&quot;&gt;Some benefits I’ve encountered&lt;/h1&gt;

&lt;h3 id=&quot;loosely-coupled-open-ended-endpoints&quot;&gt;Loosely coupled, open-ended endpoints&lt;/h3&gt;

&lt;p&gt;This has been absolutely &lt;em&gt;fantastic&lt;/em&gt;. For most operations, our client application just sends a &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; for a current stateful object, or a &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; to create an event. That’s it. If you’ve ever deployed an iOS application to the App Store, you’ll know it takes about a week (sometimes shorter, sometimes longer) to get approved. This means that if you have a bug in your client application, the fix takes the sum of the time it takes you to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Receive a complaint from a customer&lt;/li&gt;
  &lt;li&gt;Find out why the bug is happening (“well, it was working on my machine?!”)&lt;/li&gt;
  &lt;li&gt;Fix the bug&lt;/li&gt;
  &lt;li&gt;Code review&lt;/li&gt;
  &lt;li&gt;Do some QA&lt;/li&gt;
  &lt;li&gt;And then, get App Store approval&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means you need to &lt;strong&gt;remove flow of control from your client application as much as possible, and move that control to your server&lt;/strong&gt;. This is pretty trivial in most cases with open ended endpoints that simply respond to events.&lt;/p&gt;

&lt;p&gt;We have continuous integration set up through &lt;a href=&quot;https://circleci.com/&quot;&gt;CircleCI&lt;/a&gt;, which means that once we merge in Github from &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;staging&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;staging&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, our server &lt;strong&gt;automatically deploys&lt;/strong&gt;. This means that if we can keep as much logic as possible on our server, we can just deploy our server as often as we want to fix bugs that we encounter (this is obviously useless, however, if it’s a client UI bug).&lt;/p&gt;

&lt;h3 id=&quot;backend-becomes-asynchronous&quot;&gt;Backend becomes asynchronous&lt;/h3&gt;

&lt;p&gt;This is huge. This means that essentially all side effects happen inside workers. So the only response that gets sent back to the client is either something like a &lt;code class=&quot;highlighter-rouge&quot;&gt;401: Unauthorized&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;500: Internal error&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;200: Success&lt;/code&gt;. These responses are only those of &lt;strong&gt;the event creation itself&lt;/strong&gt;. Things that might take a shit ton of time (like making a third-party service send an email to user who just signed up) can take place in the background.&lt;/p&gt;

&lt;p&gt;An asynchronous backend can be implemented without an event-driven architecture (for example, by making traditional, RESTful, active record endpoints kick off async workers), but these approaches mesh very well together.&lt;/p&gt;

&lt;h1 id=&quot;some-drawbacks-ive-encountered&quot;&gt;Some drawbacks I’ve encountered&lt;/h1&gt;

&lt;h3 id=&quot;lots-of-entities&quot;&gt;Lots of entities&lt;/h3&gt;

&lt;p&gt;Events are entities, and, well… entities are entities too. In other words, if you store both events &lt;em&gt;and&lt;/em&gt; the current state of your database, then you have a big database.&lt;/p&gt;

&lt;h3 id=&quot;backend-becomes-asynchronous-1&quot;&gt;Backend becomes asynchronous&lt;/h3&gt;

&lt;p&gt;You’ll notice the second point was mentioned as both a benefit and a drawback. If your endpoints operate asynchronously, this means that you can only rely on sending an HTTP response &lt;em&gt;for the creation of the event itself&lt;/em&gt;. That’s it. No client logic can depend on any subsequent operations or side-effects that take place on the server, &lt;strong&gt;unless you implement some sort of two-way communication via polling, web sockets, etc.&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For example, say we want to prevent users from posting an ad for their used motorcycle on our app unless they’ve verified they’re email address. In a traditional, synchronous, active-record approach, we might do this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /advertisement BODY: { type: 'motorcycle', make: 'Harley Davidson' }&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Server checks &lt;code class=&quot;highlighter-rouge&quot;&gt;user.emailVerified === true&lt;/code&gt;?&lt;/li&gt;
  &lt;li&gt;If not, respond with, say, &lt;code class=&quot;highlighter-rouge&quot;&gt;401: Unauthorized&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;This response triggers logic on the client to show a prompt asking for the user to enter their email address in order to be sent an email with a link to verify it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This works great, if the backend is synchronous. What’s left to be discovered is the best approach for processing complex logic such as this with an asynchronous backend, which requires a different frame of thinking (something we’re still working on figuring out).&lt;/p&gt;

&lt;h1 id=&quot;some-final-thoughtsquestions&quot;&gt;Some final thoughts/questions&lt;/h1&gt;

&lt;h2 id=&quot;deletions&quot;&gt;Deletions&lt;/h2&gt;

&lt;p&gt;Do you want “soft deletes” or “hard deletes”? In other words, do you want to actually remove a stateful record from your database, or simply mark it (via a flag) as “removed” or “deleted”, or whatever?&lt;/p&gt;

&lt;h2 id=&quot;diffs&quot;&gt;Diffs&lt;/h2&gt;

&lt;p&gt;Since this approach is already closely related to Git, one of the only major things missing is the ability to “diff” objects. These diffs could be stored inside the event itself:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// UserUpdated event&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;UserUpdated&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'auth0|123456'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'new_email@gmail.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;updated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'MailingList'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'aXd45'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'new_email@gmail.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'User'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bgg7x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'new_email@gmail.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are still many questions to be answered, and lots of cool things that can be implemented here. It is a shift in the commonly-taught paradigm (the “active record” approach). I am excited to learn more from others who have experience with this! Thanks for reading, and feel free to chime in in the comments below.&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Dec 2015 07:26:00 -0800</pubDate>
        <link>http://joshbeam.github.io/javascript/2015/12/24/initial-thoughts-on-event-sourcing.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/javascript/2015/12/24/initial-thoughts-on-event-sourcing.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Get rid of $scope, and extend into the view model</title>
        <description>&lt;div class=&quot;note&quot;&gt;
&lt;!--excerpt.start--&gt;
AngularJS's &lt;code&gt;controllerAs&lt;/code&gt; syntax is a good first step into being able to have some sort of sense of hierarchy in applications. However, large controllers can still get unwieldy. We can move towards controlling our controllers with &lt;code&gt;angular.extend&lt;/code&gt;.
&lt;!--excerpt.end--&gt;
&lt;/div&gt;

&lt;h1 id=&quot;tldr&quot;&gt;TL;DR&lt;/h1&gt;

&lt;p&gt;Put all your controller properties into an object literal, and extend that object into &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After that, always use &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; to refer to controller properties (don’t use &lt;code class=&quot;highlighter-rouge&quot;&gt;vm.whatever&lt;/code&gt;).&lt;/p&gt;

&lt;h1 id=&quot;a-brief-overview-of-controlleras&quot;&gt;A brief overview of &lt;code class=&quot;highlighter-rouge&quot;&gt;controllerAs&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;#skip&quot;&gt;Skip to the next section&lt;/a&gt; if you already know how to use this.&lt;/p&gt;

&lt;p&gt;Basically, if you have a parent controller and a child controller nested within, you have to explicitly refer to &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope.$parent&lt;/code&gt; to access the parent controller &lt;em&gt;from&lt;/em&gt; the child controller.&lt;/p&gt;

&lt;p&gt;However, with &lt;code class=&quot;highlighter-rouge&quot;&gt;controllerAs&lt;/code&gt; syntax, we get a &lt;strong&gt;namespace&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ParentCtrl as parent&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  
  {{parent.something}}
  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ChildCtrl as child&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    
    {{child.something}}
    {{parent.something}}
    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But then in your controller, you might have to deal with this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// parent.controller.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Bob'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Builder'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;motto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Yes we can!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;motto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Also, wondering why we’re using &lt;code class=&quot;highlighter-rouge&quot;&gt;vm&lt;/code&gt;? Check out &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide#controlleras-with-vm&quot;&gt;John Papa’s AngularJS Style Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now imagine that, 1000x, when you have a controller full of lots and lots of stuff. Really, you could argue that you should consider leveraging directives and services for most of your business logic, but sometimes it’s difficult to do.&lt;/p&gt;

&lt;p&gt;By the way, &lt;code class=&quot;highlighter-rouge&quot;&gt;controllerAs&lt;/code&gt; still knows about &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt;. This fake “namespace” simply happens internally by attaching an object to &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt;. So in the above example, our parent controller &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt; would look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// a bunch of $$ angular properties, and then...&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Bob'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Builder'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;motto&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Yes we can!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){...}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In fact, if you were to inject &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt; into that controller and ask for &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope.parent&lt;/code&gt;, you’d see all those properties. There’s nothing fancy about it.&lt;/p&gt;

&lt;p&gt;&lt;span id=&quot;skip&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;extending-the-view-model&quot;&gt;Extending the view model&lt;/h1&gt;

&lt;p&gt;Ever heard of &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.extend&quot;&gt;&lt;code&gt;angular.extend&lt;/code&gt;&lt;/a&gt;? It’s pretty nifty. It basically just puts properties from one object into another object, without overwriting any properties. AngularJS already attempts to protect us from this by delimiting internal properties with &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;$$&lt;/code&gt;, so it’s not really a concern anyway, but it’s a nice added touch.&lt;/p&gt;

&lt;p&gt;So, we can just make our controller look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// parent.controller.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Bob'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Builder'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;motto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Yes we can!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;motto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, you’ll notice that it’ll usually be better from then on to continue to refer to controller properties with &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;vm&lt;/code&gt;, because any changes through data-binding will propogate only to &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; (our namespaced controller), and not to our &lt;code class=&quot;highlighter-rouge&quot;&gt;vm&lt;/code&gt; object reference. You can leverage things like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;&lt;code&gt;Function.prototype.bind&lt;/code&gt;&lt;/a&gt; if you get into hairy contexts (like &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; loops, etc.).&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Aug 2015 11:30:00 -0700</pubDate>
        <link>http://joshbeam.github.io/angularjs/2015/08/23/extending-vm-into-this.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/angularjs/2015/08/23/extending-vm-into-this.html</guid>
        
        
        <category>angularjs</category>
        
      </item>
    
      <item>
        <title>3 lessons in solving stupid engineering problems (without resorting to manslaughter)</title>
        <description>&lt;div class=&quot;note&quot;&gt;
&lt;!--excerpt.start--&gt;
Recently, some colleagues and I dreadfully spent (read: wasted) valuable man hours attempting to solve a bug in a hybrid mobile app. The cause of the bug? A missing &amp;lt;script&amp;gt; tag. Several important lessons can be learned from the ways in which we decided to go about solving this simple headbanger (no, not like you'd do at a heavy metal concert; rather, where you actually consider banging your head on a solid object) of a problem.
&lt;!--excerpt.end--&gt;
&lt;/div&gt;

&lt;center&gt;
  &lt;img src=&quot;/images/honorable-suicide-meme.png&quot; width=&quot;50%&quot; /&gt;
&lt;/center&gt;

&lt;h1 id=&quot;before-we-continue-heres-the-problem-and-our-solution&quot;&gt;Before we continue, here’s the problem and our solution&lt;/h1&gt;

&lt;p&gt;We were attempting to integrate a certain OAuth library into a hybrid mobile app, which uses &lt;a href=&quot;http://ionicframework.com/&quot;&gt;ionic&lt;/a&gt; (if you haven’t heard of it, it’s a pretty… interesting hybrid framework for building mobile apps with web technologies, aka, no Objective-C or Java).&lt;/p&gt;

&lt;p&gt;Basically, the OAuth library would just let us login to our app. Except we couldn’t login… Why? Because we were missing this line of code in our &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;
&amp;lt;script src=&quot;cordova.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;That took quite a while to figure out. Pretty simple solution, though, no?&lt;/p&gt;

&lt;h1 id=&quot;lesson-1-everyone-is-responsible-for-the-environment&quot;&gt;Lesson 1: Everyone is responsible for the environment&lt;/h1&gt;

&lt;center&gt;
  &lt;img src=&quot;/images/tree-hugger.png&quot; width=&quot;50%&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;No, not &lt;em&gt;that&lt;/em&gt; environment (well, that environment too, but that’s not what we’re referring to, here). We’re referring to the development environment.&lt;/p&gt;

&lt;p&gt;When you run &lt;code class=&quot;highlighter-rouge&quot;&gt;ionic start myApp blank&lt;/code&gt;, it scaffolds a blank app for you. It also happens to set up an &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; for you, which already contains this cryptic line:&lt;/p&gt;

&lt;pre&gt;
&amp;lt;!-- this will be a 404 when in a development environment --&amp;gt;
&amp;lt;script src=&quot;cordova.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;However, with plethora build tools available (like &lt;a href=&quot;http://webpack.github.io/&quot;&gt;webpack&lt;/a&gt;), one can usually just &lt;code class=&quot;highlighter-rouge&quot;&gt;require('ionic')&lt;/code&gt; or whatever. Instead, we got rid of the &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; and replaced it with our own, because we thought we were being super developers who could build an app in one step. There are many issues that play into this (for example, the whole point of a build tool such as webpack &lt;em&gt;is&lt;/em&gt; to be able to be a super developer and build the app in one step… but we’ll ignore that for now).&lt;/p&gt;

&lt;p&gt;Anyway, &lt;strong&gt;the initial assumption was that the environment was set up correctly from the get-go&lt;/strong&gt;. Usually this is a reasonable assumption, and everything &lt;em&gt;did&lt;/em&gt; appear to be working correctly from the get-go, but there were some clues that we weren’t paying attention to.&lt;/p&gt;

&lt;p&gt;This isn’t anyone’s fault, per se, but the &lt;strong&gt;key takeaway is that when you run into a bug like this, you should do your due diligence and consider that the environment could have, in fact, been setup incorrectly.&lt;/strong&gt; Had this been the first step, many man-hours would’ve been saved.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We had three devs working on this problem, and all of us assumed that everyone else had made sure the environment was pristine. We never questioned it.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;lesson-2-everything-is-a-clue&quot;&gt;Lesson 2: Everything is a clue&lt;/h1&gt;

&lt;center&gt;
  &lt;img src=&quot;/images/aliens.png&quot; width=&quot;50%&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;In our situation, we had two apps: the first app was already working, login and all. The environment, plugins, etc., in our second app appeared to be &lt;em&gt;equivalent&lt;/em&gt; to those of the first app. But there was a nagging clue that was ignored.&lt;/p&gt;

&lt;p&gt;In the context of ionic, in order to make outside requests (i.e., XHR), you have to have the &lt;a href=&quot;https://github.com/apache/cordova-plugin-whitelist&quot;&gt;cordova-plugin-whitelist&lt;/a&gt; installed. However, it’ll give you a nice little warning if you specify that the app can access &lt;em&gt;all&lt;/em&gt; outside origins (with an asterisk: &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;), and don’t supply a certain &lt;code class=&quot;highlighter-rouge&quot;&gt;meta&lt;/code&gt; tag: &lt;code class=&quot;highlighter-rouge&quot;&gt;No Content-Security-Policy meta tag found. Please add one when using the Cordova-plugin-whitelist plugin.&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because our second app environment was theoretically equivalent to the first app, we should’ve expected to see this warning in our second app. However, even though this clue was extremely subtle, it could’ve led us to a solution much earlier. In fact, I admit that I noticed the warning wasn’t present, but discounted it as a non-clue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The key takeaway is that everything, no matter how subtle, can be a clue.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;lesson-3-question-your-assumptions-and-then-question-them-again&quot;&gt;Lesson 3: Question your assumptions… and then question them again&lt;/h1&gt;

&lt;center&gt;
  &lt;img src=&quot;/images/debugging-timeline.png&quot; width=&quot;50%&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;Our initial assumption was that it &lt;em&gt;had&lt;/em&gt; to be the specific OAuth library we were using that was causing the problem.&lt;/p&gt;

&lt;p&gt;We spent several hours combing through the source code of the library, comparing the differences between execution in the first app and the second app. But they appeared identical. And that’s because they &lt;em&gt;were&lt;/em&gt; identical. That’s because our problem had virtually &lt;em&gt;nothing&lt;/em&gt; to do with the OAuth library.&lt;/p&gt;

&lt;p&gt;While delving into this source code did lead us to make some valuable discoveries (related and unrelated to the issue at hand), it was not the genesis of the bug. &lt;strong&gt;The key takeaway is that you should question your assumptions of where the root of the problem lies.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How do you do this practically? Well, perhaps by verbalizing your assumptions, and making a list of them. Here’s what our list would’ve been:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Assumption 1: our OAuth library is causing the problem&lt;/li&gt;
  &lt;li&gt;Assumption 2: our plugins (&lt;code class=&quot;highlighter-rouge&quot;&gt;whitelist&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;inAppBrowser&lt;/code&gt;, etc.) aren’t configured correctly&lt;/li&gt;
  &lt;li&gt;Assumption 3: our environment is set up correctly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These assumptions led us to &lt;strong&gt;this potentially devastating logic&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Assumption: our OAuth library sucks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion: therefore, we need to reimplement our login system&lt;/strong&gt;&lt;/p&gt;

&lt;center&gt;
  &lt;img src=&quot;/images/i-dont-always-make-assumptions-meme.png&quot; width=&quot;50%&quot; /&gt;
&lt;/center&gt;

&lt;h1 id=&quot;so-how-did-we-stumble-upon-a-solution-to-this-mystical-problem&quot;&gt;So how did we stumble upon a solution to this mystical problem?&lt;/h1&gt;

&lt;p&gt;We drunkenly stumbled into our solution by attempting to implement a workaround to the &lt;code class=&quot;highlighter-rouge&quot;&gt;inAppBrowser&lt;/code&gt; plugin. &lt;strong&gt;Wait, wot?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, one of our other underlying assumpetions was that &lt;code class=&quot;highlighter-rouge&quot;&gt;window.open&lt;/code&gt; wasn’t functioning properly (this is something the OAuth library was using interally). So we thought, why not try to use &lt;code class=&quot;highlighter-rouge&quot;&gt;cordova.inAppBrowser.open&lt;/code&gt; instead, as suggested by some StackOverflow answers?&lt;/p&gt;

&lt;p&gt;This led us to this haunting error (I’ll probably have nightmares about it for years to come):&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Uncaught ReferenceError: cordova is not defined&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Only at that point did we go back to the ionic docs and see that, in fact, you have to include this script tag in your &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; (even though we were attempting to use the magic of webpack):&lt;/p&gt;

&lt;pre&gt;
&amp;lt;!-- this will be a 404 when in a development environment --&amp;gt;
&amp;lt;script src=&quot;cordova.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;center&gt;
  &lt;img src=&quot;/images/y-u-no-include-cordova-webpack-meme.png&quot; width=&quot;50%&quot; /&gt;
&lt;/center&gt;
</description>
        <pubDate>Sun, 23 Aug 2015 06:39:00 -0700</pubDate>
        <link>http://joshbeam.github.io/javascript/2015/08/23/solving-stupid-problems.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/javascript/2015/08/23/solving-stupid-problems.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>3 reasons you should not be using Array.prototype.forEach</title>
        <description>&lt;div class=&quot;note&quot;&gt;&lt;!--excerpt.start--&gt;
One of the main problems with &lt;code&gt;forEach&lt;/code&gt; is that it primarily relies on side effects, whereas some native &lt;code&gt;Array.prototype&lt;/code&gt; alternatives make use of semantically-correct programming paradigms (such as reduction, mapping, and filtering) and may in turn introduce less &lt;a href=&quot;http://shaffner.us/cs/papers/tarpit.pdf&quot;&gt;incidental complexity&lt;/a&gt; (and enhance readability) when writing code.&lt;!--excerpt.end--&gt;
&lt;/div&gt;

&lt;center&gt;
  &lt;img src=&quot;https://i.imgflip.com/pm0to.jpg&quot; title=&quot;made at imgflip.com&quot; width=&quot;50%&quot; /&gt;
&lt;/center&gt;

&lt;h1 id=&quot;3-you-should-be-filtering&quot;&gt;3) You should be filtering&lt;/h1&gt;

&lt;p&gt;In this example, we have an array, and we want to eliminate items from an array that don’t meet a specific criteria. Here’s how you’ll see it done with &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;:&lt;/p&gt;

&lt;h2 id=&quot;bad&quot;&gt;Bad&lt;/h2&gt;

&lt;div class=&quot;repl&quot;&gt;
  &lt;div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filteredArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;filteredArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filteredArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;/div&gt;
  &lt;div&gt;
&lt;pre&gt;
[4, 5]
&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This is a typical implementation. With &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;, you simply push each object to a &lt;em&gt;completely new&lt;/em&gt; array. You’ll notice that &lt;strong&gt;this introduces extra state to maintain&lt;/strong&gt;. More state equals more brainpower needed to understand what is happening.&lt;/p&gt;

&lt;p&gt;Luckily, &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.filter&lt;/code&gt; already has you covered there. It simply &lt;em&gt;returns&lt;/em&gt; a new array of the items we want.&lt;/p&gt;

&lt;h2 id=&quot;good&quot;&gt;Good&lt;/h2&gt;

&lt;div class=&quot;repl&quot;&gt;
  &lt;div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filtered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isBig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isBig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filtered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;/div&gt;
  &lt;div&gt;
&lt;pre&gt;
[4, 5]
&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;2-you-should-be-mapping&quot;&gt;2) You should be mapping&lt;/h1&gt;

&lt;p&gt;In this example, we want to “change” each value in an array to something else. Here’s how we’d do it with &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;:&lt;/p&gt;

&lt;h2 id=&quot;bad-1&quot;&gt;Bad&lt;/h2&gt;

&lt;div class=&quot;repl&quot;&gt;
  &lt;div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stringNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Josh'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Beam'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ozzy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Osbourne'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;stringNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;/div&gt;
  &lt;div&gt;
&lt;pre&gt;
[&quot;Josh Beam&quot;, &quot;Ozzy Osbourne&quot;]
&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Again, naked looping requires us to create additional state within our application.&lt;/p&gt;

&lt;p&gt;Here, we’re gonna use &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; instead. Again, it simply returns a new array without requiring us to do it ourselves:&lt;/p&gt;

&lt;h2 id=&quot;good-1&quot;&gt;Good&lt;/h2&gt;

&lt;div class=&quot;repl&quot;&gt;
  &lt;div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Josh'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Beam'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ozzy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Osbourne'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;/div&gt;
  &lt;div&gt;
&lt;pre&gt;
[&quot;Josh Beam&quot;, &quot;Ozzy Osbourne&quot;]
&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;1-you-should-be-reducing&quot;&gt;1) You should be reducing&lt;/h1&gt;

&lt;p&gt;Here, we want to &lt;em&gt;combine certain values&lt;/em&gt; in an array.&lt;/p&gt;

&lt;h2 id=&quot;bad-2&quot;&gt;Bad&lt;/h2&gt;

&lt;div class=&quot;repl&quot;&gt;
  &lt;div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;/div&gt;
  &lt;div&gt;
&lt;pre&gt;
15
&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In other words, when you think “reduce”, think about “collapsing” items into a new item. Another way to think of it is to imagine you have an array filled with the words of a sentence, and you want to concatenate them all into one string.&lt;/p&gt;

&lt;h2 id=&quot;good-2&quot;&gt;Good&lt;/h2&gt;

&lt;div class=&quot;repl&quot;&gt;
  &lt;div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;/div&gt;
  &lt;div&gt;
&lt;pre&gt;
15
&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;You’ll notice one of the overarching concepts of all these three methods is that they all take the “functional route”, where they don’t necessarily require the manual creation of additional state. It is possible to introduce side effects within these methods, however, they don’t &lt;strong&gt;primarily rely on side effects to function&lt;/strong&gt;. In other words, you’ll see that &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.forEach&lt;/code&gt; primarly relies on side effects. &lt;strong&gt;It never returns a value other than &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; unless you explicity force it to&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Why am I referring to functional programming in the context of JavaScript, which is clearly &lt;em&gt;not&lt;/em&gt; a functional programming language? Well, to quote the &lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot;&gt;omniscient Wikipedia article on functional programming&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Eliminating side effects, i.e. changes in state that do not depend on the function inputs, can make it much easier to understand and predict the behavior of a program&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, it can take more “brain power” to understand what is happening in a &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; loop whose sole purpose is to mutate outside data based on side effects, whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; all have &lt;strong&gt;immediate&lt;/strong&gt; and &lt;strong&gt;clear&lt;/strong&gt; semantic meanings to the programmer (that’s not to say, though, that you can’t use the power of those methods for evil).&lt;/p&gt;

&lt;center&gt;
  &lt;img src=&quot;https://i.imgflip.com/pm0kr.jpg&quot; title=&quot;made at imgflip.com&quot; width=&quot;50%&quot; /&gt;
&lt;/center&gt;
</description>
        <pubDate>Sat, 15 Aug 2015 12:04:00 -0700</pubDate>
        <link>http://joshbeam.github.io/javascript/2015/08/15/3-reasons-you-should-not-be-using-foreach.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/javascript/2015/08/15/3-reasons-you-should-not-be-using-foreach.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
  </channel>
</rss>
