[
  
    {
      "title"    : "Getting started with a search engine for your site (no server required!)",
      "category" : "javascript jekyll json lunr.js tutorial",
      "content"	 : "This tutorial is in the context of Jekyll and GitHub pagesWhat do you mean “no server”?Lots of search features on websites rely on communicating with the server to deliver search results. For example, a user might click a search button that sends, say, a POST request to the server, where a .php file handles the request, and sends the results back.With the way we’re gonna do it here, we’re going to handle the request entirely on the client. No server-side code processing required. We’ll go over the architecture in a minute.Why not process on the server?Nothing wrong with the traditional way of doing it. For my website, though, I’m using Jekyll, and I’m hosting it on GitHub pages. GitHub pages doesn’t support processing with PHP, Node.js, etc. Therefore, the only way to do it is on the client (with a little bit of pre-processing, which we’ll go over in a second).TutorialTechnologies used  Jekyll (a static site generator)  lunr.js (a JavaScript search indexer)  jQuery (to make the AJAX stuff and displaying the results easier)Architecture  Take advantage of Liquid (the template system that Jekyll uses) to create a JSON file of all our searchable content (in this example, blog posts)  Write some JavaScript that sends an AJAX request to retrieve the JSON file whenever the user searches for something  Use lunr.js to match the search query against all the blog posts in the JSON file  Display the search results in order by the strength of the match&amp;hellip;Step 1 — Make the JSON fileWe’re going to kind of “hack” our way through Liquid to create a JSON file.Create a new file in your root called posts.json. Open it up:------[  {% for post in site.posts %}    {      &amp;quot;title&amp;quot;    : &amp;quot;{{ post.title | escape }}&amp;quot;,      &amp;quot;category&amp;quot; : &amp;quot;{{ post.categories | join: &amp;#39; &amp;#39; }}&amp;quot;,      &amp;quot;content&amp;quot; : &amp;quot;{{post.content | strip_html | strip_newlines | remove:  &amp;quot;&amp;quot; | remove: &amp;quot;&amp;quot;&amp;quot;}}&amp;quot;,      &amp;quot;url&amp;quot;      : &amp;quot;{{ site.baseurl }}{{ post.url }}&amp;quot;,      &amp;quot;date&amp;quot;     : &amp;quot;{{ post.date }}&amp;quot;    }{% unless forloop.last %},{% endunless %}  {% endfor %}]You’ll notice some strange things. First, if you’re using syntax highlighting, you’ll get all kinds of weird “errors”. Ignore them. JSON or JavaScript syntax highlighting doesn’t understand that we’re using Liquid.Second, how the hell is this going to work, if it’s a JSON file? Well, you see the two sets of --- at the top of the file? When you run jekyll build, it will see this file as a “special file” that needs to be processed with Liquid. If we remove the ---, it won’t process the template. This is called “YAML front matter”. Any pages with YAML front matter get processed with Liquid.Most of the templating above is self-explanatory if you understand the basics of Liquid filters. However there is one line I’d like to explain.&amp;quot;content&amp;quot;   : &amp;quot;{{post.content | strip_html | strip_newlines | remove:  &amp;quot;&amp;quot; | remove: &amp;quot;&amp;quot;&amp;quot;}}&amp;quot;,The content of our post might contain raw tab characters, as well as double quotes (&quot;). Well, as it turns out, having tab characters inside a JSON string is invalid JSON, so when we call our AJAX request later, nothing would be returned! Not good.Solution? Run two remove filters: one for the tab character, and one for the double quotes.Also, I want to explain this part:}{% unless forloop.last %},{% endunless %}If you don’t have that line of code, your output would look something like this:[{ /* content */ },{ /* content */ },{ /* content */ },]See the trailing comma on the last object? This is also invalid JSON. Not good. So, we run a some Liquid that says don’t put a comma at the end if it’s the last object.Now, run jekyll build, and you’ll end up with a compiled posts.json underneath _site, which contains the entire built site. Here’s the compiled JSON:[    {      &amp;quot;title&amp;quot;    : &amp;quot;Why do people add semicolons before modules?&amp;quot;,      &amp;quot;category&amp;quot; : &amp;quot;javascript snippet&amp;quot;,      &amp;quot;content&amp;quot; : &amp;quot;Simple answer: because of minification issues.Minification can cause modules to use each other as their arguments (unintentionally), if the developer isn’t careful.(function() {// code})()(function() {// code})();If you look closely enough at the above, you’ll see the first IIFE is missing a semicolon at the end.That means that when minified, it’ll look like this:The broken code:(function() {})()(function() {})();// (a)()(b)()The problem is that now function a is being called with function b passed in as an argument. Interesting.So, we just add a ; to the beginning of the module, and to the end. This acts as a safeguard to ensure we don’t run into that problem when we minify.So, when we try doing the above example with semicolons at the beginning and at the end, and you minify the code, you get this instead:The working code:;(function() {})();;(function() {})();The cool thing is, the above doesn’t throw any errors. In fact, JSHint won’t yell at you either.Why is this? Check out the MDN article on empty:  An empty statement is used to provide no statement, although the JavaScript syntax would expect one.So those extra semicolons are not a syntax error, because a random semicolon anywhere in the code can be interpreted as an empty statement. Cool, huh?&amp;quot;,      &amp;quot;url&amp;quot;      : &amp;quot;/javascript/snippet/2015/03/22/why-do-people-add-semicolons-before-modules.html&amp;quot;,      &amp;quot;date&amp;quot;     : &amp;quot;2015-03-22 18:34:00 -0500&amp;quot;    },    /* and several other posts*/]I strongly recommend running your output through JSONLint if your code isn&#39;t working right. It&#39;ll help you find whatever errors you might have in your JSON syntax.To be continued...",
      "url"      : "/javascript/jekyll/json/lunr.js/tutorial/2015/03/26/getting-started-with-a-search-engine-for-your-site-no-server-required.html",
      "date"     : "2015-03-26 09:41:00 -0500"
    },
  
    {
      "title"    : "Tricks of the JavaScript for loop",
      "category" : "javascript",
      "content"	 : "We use the for loop generally to cycle through, say, an array of items. We can do something with each item. For example:var arr = [1,2,3,4,5];for(var i = 0; i &amp;lt; arr.length; i++) {console.log(arr[i]);}The code above obviously just increases i, starting at 0 and ending at the length of arr, which gives us the ability to access each of the items of arr by its index.How do you declare the loop?There’s frequently discussion on how to best write a for loop. There are some performance issues depending on how you write it (see this StackOverflow question), and I think a lot of it comes down to two things at the end: readability and personal style.Several ways:/*These will all ouput:12345*/var arr = [1,2,3,4,5];// #1for(var i = 0; i &amp;lt; arr.length; i++) {console.log(arr[i]);}// #2var i, len = arr.length;for(i = 0; i &amp;lt; len; i++) {console.log(arr[i]);}// #3var i = 0, len = arr.length;for(; i &amp;lt; len; i++) {console.log(arr[i]);}There are many other ways to write the loops, but those are some of the more common ones.Let’s go over all of them, briefly#1 — The problem with this one is that it might take some browsers longer because we’re “resetting” some variables each time (i.e., each iteration, the loop checks the section where we define the limit, which is oftentimes the length of an array). In fact, we can prove this:// #1var arr = [1,2,3,4,5];for(var i = 0; i &amp;lt; arr.length - i; i++) {console.log(arr[i]);}/*==&amp;gt; 1==&amp;gt; 2==&amp;gt; 3*/The engine appears to check each statement for every iteration of the loop. We can cache the variables, so in comes:#2 — This one caches the length, which could give you a little micro-optimized performance boost in some browsers. The first i definition doesn’t get “re-evaluated” at the end of each iteration. We can prove this too:// #2var i = 0, len = arr.length;for(i+=i; i &amp;lt; len; i++) {console.log(arr[i]);}/*==&amp;gt; 1==&amp;gt; 2==&amp;gt; 3==&amp;gt; 4==&amp;gt; 5*/As you can see above, i is only defined once. If it wasn’t, it would increase by itself each iteration, and we wouldn’t see every number of arr in the output. So it seems we’ve got to a nice, optimized way of writing the loop. But in comes the “personal style” element:#3 — I like the last one, because it defines everything at the top of the function, much like how I described as a best practice in my post about hoisting. You can see everything easier, and predict what is going to be used, and where. However, this is not the best style to use, if you need to re-define the length, or limit, every iteration (for instance, if you’re removing or adding items to an array). I think it also is very minimalistic and clean.// #3var i = 0, len = arr.length;for(; i &amp;lt; len; i++) {console.log(arr[i]);}Why does #3 not throw an error?The third one is strange, because we start it off with a ; all by its lonesome. Well, I think this can be explained if we accept that the second part of the loop, the i &amp;lt; // whatever part, looks to define itself by i, wherever i might be. The first part, the part where we normally declare and define i, it just that: a part where we can initialize variables. In fact, we could initialize any variables we wanted. We could even initialize the limit, or length variable, and the array itself! Check it out:for(var arr = [1,2,3,4,5], i = 0, len = arr.length; i &amp;lt; len; i++) {console.log(arr[i]);}Pretty cool, right? The initialization section of the loop provides us a space to intialize whatever we want; the syntactical benefit is that when a user looks at it, they know that i and len are directly tied to that loop. The downside I think, though, is that a beginner might be fooled into thinking that i only exists in the scope of the for loop, when in fact, even though i was initialized as part of the for loop, it still exists to whatever function scope that it’s inside. We can prove this:for(var arr = [1,2,3,4,5], i = 0, len = arr.length; i &amp;lt; len; i++) {console.log(arr[i]);}console.log(arr); // [1,2,3,4,5]console.log(i); // ==&amp;gt; 5console.log(len); // ==&amp;gt; 5Each of these sections (the first part where we initialize i, the second part, and the third part) all have names, by the way. They are called:for(/*initialization*/;/*condition*/;/*final-expression*/) {console.log(arr[i]);}So what have we learned?Well, we learned its easier when you call things by their names: initialization, condition, and final-expression.Initialization lessonsWe can use this to declare anything we want, but we don’t have to use it to declare anythingvar arr = [1,2,3,4,5], len = arr.length, i = 0;for(;i&amp;lt;len;i++) {console.log(arr[i]);}Additionally, although it may be a personal style issue, I think it’s best to declare everything at the top of the function where the for loop resides, unless you need to redefine something in the condition section, such as the length of an array.Condition lessonsWhen it comes to arrays, we’re probably better off caching the length of the array either in the initialization expression or at the top of the function in which the for loop resides. This can give some performance benefits. However, we want to keep in mind that in a function where we add or remove things from an array, we might need to redefine the condition expression of the for loop every iteration.Bonus!Let’s create a function that does a for loop for us. It eliminates the scoping issues of variables like i and len, and it feels a whole lot cleaner. In fact, this function is a simplified version of something that the Underscore.js and jQuery libraries do (jQuery has $.each). You can even see a very complicated polyfill for Array.prototype.forEach on MDN’s page. Here’s out simplified function:function forEach(arr,fn) {var i = 0, len = arr.length;if(arr.constructor === Array &amp;amp;&amp;amp; fn.constructor === Function) {for(;i&amp;lt;len;i++) {fn.call(arr,arr[i],i,arr);}}}// usage:var arr = [1,2,3,4,5];forEach(arr, function(element, index, array) {console.log(element);console.log(index);console.log(array);});/*==&amp;gt; 1==&amp;gt; 0==&amp;gt; [1,2,3,4,5]==&amp;gt; 2==&amp;gt; 1==&amp;gt; [1,2,3,4,5]==&amp;gt; 3==&amp;gt; 2==&amp;gt; [1,2,3,4,5]==&amp;gt; 4==&amp;gt; 3==&amp;gt; [1,2,3,4,5]==&amp;gt; 5==&amp;gt; 4==&amp;gt; [1,2,3,4,5]*/If you want to play around with that function, or just see if it works, open up your Developer Tools (cmd+opt+j on Mac in Chrome), copy and paste, hit enter, and voila.We could even put it in a module:;(function(win) {var utils = {forEach: forEach};function forEach(arr,fn) {var i = 0, len = arr.length;if(arr.constructor === Array &amp;amp;&amp;amp; fn.constructor === Function) {for(;i&amp;lt;len;i++) {fn.call(arr,arr[i],i,arr);}}}win.utils = utils;})(window);// usage:var myOtherModule = (function(utils) {var forEach = utils.forEach,arr = [1,2,3,4,5];forEach(arr,logEachElement);    /////function logEachElement(element,index,array) {console.log(element);console.log(index);console.log(array);}})(utils);Boom! Why all the strange semicolons? Why the weird function notation? Check out my post on weird semicolons and on a simple way to modularize dependencies for some answers to these question. Also, check out John Papa’s AngularJS style guide. It applies specifically to AngularJS, but a lot of the principles translate well into vanilla JavaScript principles.",
      "url"      : "/javascript/2015/03/24/tricks-of-the-javascript-for-loop.html",
      "date"     : "2015-03-24 17:18:00 -0500"
    },
  
    {
      "title"    : "How to show a summary of your post with Jekyll",
      "category" : "jekyll snippet",
      "content"	 : "I am using the static-site generator Jekyll to compile my website into a bunch of static files (the main benefit being a generally more secure and potentially quicker website due to a lack of server round-trips to a database).I ran across several solutions for displaying a summary or excerpt of the post in the main blog page (if you’re using the basic Jekyll theme that comes standard, it’ll probably be your index.html).Anyway, the solution I came up with is meant to allow me to control what part of the post I want to display as an excerpt. If I don’t choose a part of the post, that’s okay, it just displays a default excerpt.If you didn’t know, Jekyll uses Liquid for its templating.Example:&amp;lt;!-- index.html --&amp;gt;&amp;lt;p class=&amp;quot;post-excerpt&amp;quot;&amp;gt;{% if post.content contains &amp;#39;&amp;lt;!--excerpt.start--&amp;gt;&amp;#39; and post.content contains &amp;#39;&amp;lt;!--excerpt.end--&amp;gt;&amp;#39; %}{{ ((post.content | split:&amp;#39;&amp;lt;!--excerpt.start--&amp;gt;&amp;#39; | last) | split: &amp;#39;&amp;lt;!--excerpt.end--&amp;gt;&amp;#39; | first) | strip_html | truncatewords: 20 }}{% else %}{{ post.content | strip_html | truncatewords: 20 }}{% endif %}&amp;lt;/p&amp;gt;&amp;lt;!-- _posts/some-random-post.html --&amp;gt;&amp;lt;p&amp;gt;Here&amp;#39;s all my content, and &amp;lt;!--excerpt.start--&amp;gt;here&amp;#39;s where I want my summary to begin, and this is where I want it to end&amp;lt;!--excerpt.end--&amp;gt;.&amp;lt;/p&amp;gt;If I don’t add the comments in the post, the template with simply extract the content of the post, strip the HTML tags, and truncate it 20 words, followed by an ellipsis ....",
      "url"      : "/jekyll/snippet/2015/03/23/how-to-show-a-summary-of-your-post-with-jekyll.html",
      "date"     : "2015-03-23 04:50:00 -0500"
    },
  
    {
      "title"    : "Why do people add semicolons before modules?",
      "category" : "javascript snippet",
      "content"	 : "Simple answer: because of minification issues.Minification can cause modules to use each other as their arguments (unintentionally), if the developer isn’t careful.(function() {// code})()(function() {// code})();If you look closely enough at the above, you’ll see the first IIFE is missing a semicolon at the end.That means that when minified, it’ll look like this:The broken code:(function() {})()(function() {})();// (a)()(b)()The problem is that now function a is being called with function b passed in as an argument. Interesting.So, we just add a ; to the beginning of the module, and to the end. This acts as a safeguard to ensure we don’t run into that problem when we minify.So, when we try doing the above example with semicolons at the beginning and at the end, and you minify the code, you get this instead:The working code:;(function() {})();;(function() {})();The cool thing is, the above doesn’t throw any errors. In fact, JSHint won’t yell at you either.Why is this? Check out the MDN article on empty:  An empty statement is used to provide no statement, although the JavaScript syntax would expect one.So those extra semicolons are not a syntax error, because a random semicolon anywhere in the code can be interpreted as an empty statement. Cool, huh?",
      "url"      : "/javascript/snippet/2015/03/22/why-do-people-add-semicolons-before-modules.html",
      "date"     : "2015-03-22 18:34:00 -0500"
    },
  
    {
      "title"    : "Lightweight dependency modularization",
      "category" : "javascript",
      "content"	 : "A common approachA common approach when utilizing the module pattern or something close to it, is to attach the end object to the window, or return the object inside some sort of local variable to create a namespace for your module.So you might end up having something like this:// first.module.js;(function(win) {var exports = //codewin.firstModule = exports;})(window);// several more modules...// and eventually a module that depends on firstModule// fifth.module.js;(function(win,firstModule) {// do something with firstModulevar exports = //code;win.fifthModule = exports;})(window,firstModule);&amp;lt;!-- then in your html... --&amp;gt;&amp;lt;script src=&amp;quot;first.module.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;!-- several other modules --&amp;gt;&amp;lt;scirpt src=&amp;quot;fifth.module.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;Of course, the obvious problems with this are:  You attach a lot of stuff to the global scope (this can be overcome with various techniques, though)  You have to get the order of your &amp;lt;script&amp;gt; tags pretty exact (we’re pretending we’re not using a task runner here, like gulp)… and probably several other I’m forgetting about. There are other ways to do this (a popular library like RequireJS, for example), but in my case, I wanted to try to use a basic object that would be attached to the window, and have all of my dependencies attach to that global object.A global dependencies objectFor angular-state-manager, I utilized a global object called stateManagerDependencies, or something along that line, to attach all of my modules to that would eventually go into the main stateManager module.The purpose of this was to only have one object (the stateManagerDependencies object) be attached to the global scope (i.e. window object), and that would hold all of the dependencies, as opposed to attaching each dependency to the global scope at the end of each module.// dependencies.js;(function(win) {win.stateManagerDependencies = {};})(window);// first.example.module.js;(function(dependencies) {var dependencies = dependencies;// then, use them...})(stateManagerDependencies);// etc.Obvious downsides to this approach  You’re still attaching some strangely named global object to the window  In each module that depends on the dependencies object, there is no error-checking or method to list what modules are available inside the dependencies object (a possible fix for this is to simply implement some of those methods, for example: .list(), or .checkFor(), etc.)",
      "url"      : "/javascript/2015/03/22/lightweight-dependency-modularization.html",
      "date"     : "2015-03-22 16:00:00 -0500"
    },
  
    {
      "title"    : "How do I check if a parameter was passed in to a function in JavaScript?",
      "category" : "javascript",
      "content"	 : "What’s a parameter?A parameter can also be called an argument. It’s the thing passed into a function that you do something with:function test(x) {return x + 1;}test(1); // ==&amp;gt; returns 2var two = test(1); // this variable is now set to 2But what if a function can do something without a parameter, or what if the functionality changes based on whether or not a parameter was passed in?function test(x) {if(x) {// do something} else {// do something else}}In the above example, we expect that if x “exists”, then we’ll do something; if not, we’ll do something else. But checking for existence is a little more difficult than that. It has to do with truthiness.The truth about truthinessIn if statements, JavaScript evaluates the statement to a boolean true or false, and acts accordingly. But when certain values are encountered, JavaScript “coerces” them to a boolean value. For example, these statements are all correct:These are all true:/*1 == true0 == false&amp;#39; &amp;#39; == true&amp;#39;&amp;#39; == falsenull == falseundefined == false*/There are plenty of other examples. However, you’ll notice above that we’re using the == operator. This is called the equality operator. It checks if two values are “equal”, but to do this, JavaScript coerces the types.These are all incorrect (they will evaluate to false):/*1 === true0 === false&amp;#39; &amp;#39; === true&amp;#39;&amp;#39; === falsenull === falseundefined === false*/You’ll notice a very subtle, but important, difference here: we’re using the === operator: also called the identity operator. 1 does not have the identity of true, however, it is equal to true. This is confusing at first, but this is the principle of truthiness.This brings us to a very important logical operator, the exlamation point ! (also called the “not” operator). It gives you the opposite of whatever boolean value you give.The “not” operator in action (the following statements are all true)/*!1 === false!0 === true!&amp;#39; &amp;#39; === false!&amp;#39;&amp;#39; === true!null === true!undefined === true*/You’ll notice above that we are using the strict identity operator ===. This is okay, because the ! operator coerces the values on the left side of the equation to a boolean value. So really when we say !1 === false, we’re actually saying false === false. In other words, false does have the identity of false.The “double not” (or just two “not” operators — these are also all true)/*!!1 === true!!0 === false!!&amp;#39; &amp;#39; === true!!&amp;#39;&amp;#39; === false!!null === false!!undefined === false*/The double not basically coerces each value into its equal boolean form. That’s a weird way to say it. Think of it like this: 0 == false is the same as !!0 === false.So how do we check for existence?Well, it depends on how we want to define existence. Do we want to say that the parameter doesn’t exist, if it is null,undefined,0,false, or some other non-truthy value? What if we want to pass in an empty string (&#39;&#39;) as a value?Bad example:function test(x) {if(!!x) {console.log(&amp;#39;we passed the &amp;quot;if&amp;quot; test&amp;#39;);console.log(&amp;#39;empty strings are okay too&amp;#39;);}}test(null); // logs nothingtest(1); // ==&amp;gt; &amp;#39;we passed the &amp;quot;if&amp;quot; test&amp;#39;; &amp;#39;empty strings are okay too&amp;#39;test(&amp;#39;&amp;#39;); // logs nothing... uh oh// By the way, if(!!x) is basically shorthand for if(x == true)So we can combine instead combine logical statements to check for our idea of existence:Better example:function test(x) {if(!!x || x === &amp;#39;&amp;#39;) {console.log(&amp;#39;we passed the &amp;quot;if&amp;quot; test&amp;#39;);console.log(&amp;#39;empty strings are okay too&amp;#39;);}}test(null); // logs nothingtest(1); // ==&amp;gt; &amp;#39;we passed the &amp;quot;if&amp;quot; test&amp;#39;; &amp;#39;empty strings are okay too&amp;#39;test(&amp;#39;&amp;#39;); // ==&amp;gt; &amp;#39;we passed the &amp;quot;if&amp;quot; test&amp;#39;; &amp;#39;empty strings are okay too&amp;#39;// We could even use &amp;#39;typeof&amp;#39;function test(x) {if(!!x || typeof x === &amp;#39;string&amp;#39;) {console.log(&amp;#39;we passed the &amp;quot;if&amp;quot; test&amp;#39;);console.log(&amp;#39;empty strings are okay too&amp;#39;);}}// the above function will output the same thingChecking strictly for undefined values:function test() {if(a) {console.log(&amp;#39;a exists!&amp;#39;);}}// The above function will throw a ReferenceError: a is not definedfunction test() {if(typeof a !== &amp;#39;undefined&amp;#39;)  {console.log(&amp;#39;a exists!&amp;#39;);}}// This second function won&amp;#39;t log anything, but it also won&amp;#39;t throw an error!In the above example, a was never declared. If a variable is never declared and you try to check for its existence, you’ll get an error. But the typeof operator is the only operator (to my knowledge) that gets around this. If you check the type of a variable that was never declared, you won’t get an error, and your program can continue.Declared vs. definedvar a; // this is a declared variable that exists; its value is undefinedvar a = true; // this is now a defined variable; its value is NO LONGER undefinedvar b;console.log(typeof b); // ==&amp;gt; undefinedconsole.log(!!b); // ==&amp;gt; falsevar c;console.log(typeof c); // ==&amp;gt; undefinedconsole.log(!!c); // ==&amp;gt; ReferenceError! Your program is dead.Best PracticeI think in this circumstance, the best practice depends on however you define “existence” in the context of your specific function. This means that you have to take into consideration the concepts of truthiness, the use of the typeof operator, the principle of declared vs. defined, etc.Keep in mind, too, that there are many ways to check the types of of variables you encounter. For example:var x = [];// x.constructor === Array// typeof x === &amp;#39;object&amp;#39;// x.toString() === &amp;#39;&amp;#39;var y = &amp;#39;hello&amp;#39;;// y.constructor === String// typeof y === &amp;#39;string&amp;#39;// y.toString() === &amp;#39;hello&amp;#39;This is a topic for another post, but it demonstrates how you can check the types of a variable based on your definition of existence in the context of your specific function.",
      "url"      : "/javascript/2015/03/20/how-do-i-check-if-a-parameter-was-passed-in-to-a-javascript-function.html",
      "date"     : "2015-03-20 17:39:00 -0500"
    },
  
    {
      "title"    : "What is hoisting in JavaScript?",
      "category" : "javascript",
      "content"	 : "Hoisting is small concept that’s pretty importantHoisting is a concept that really defines a fundamental principle of JavaScript: there’s no such thing as block scope.What does that mean? Well, we know there’s a thing called function scope:Function scope example// This area out here is our &amp;quot;global scope&amp;quot;var globalVariable = [0,1,2,3];function testFunction() {//This area in here is our &amp;quot;function scope&amp;quot;// We can access variables from the global scopeconsole.log(globalVariable) // ==&amp;gt; [0,1,2,3]// &amp;quot;var&amp;quot; makes this variable only exists inside the functionvar hello = &amp;#39;hello&amp;#39;;// since there&amp;#39;s no &amp;quot;var&amp;quot; keyword,// we might as well have put this variable in the global scopeanotherVariable = &amp;#39;anotherVariable&amp;#39;; }console.log(hello) // ==&amp;gt; undefinedconsole.log(anotherVariable) // ==&amp;gt; &amp;#39;anotherVariable&amp;#39;… Easy.But how do we define block scope? In some other languages, it might be whatever is inside an if statement or a for loop. But that doesn’t exist in JavaScript (well, with a caveat, which we’ll go over in a later section):If-statement examplefunction testFunction(num) {if(num &amp;lt; 5) {console.log(&amp;#39;less than five&amp;#39;);} else {console.log(&amp;#39;greater than or equal to five&amp;#39;);}}testFunction(4); // ==&amp;gt; &amp;#39;less than five&amp;#39;The above example is super easy to understand. But let’s try and do something else with it.Trying to use block scope in JavaScriptfunction test() {if(/* something */) {var foo = &amp;#39;bar&amp;#39;;console.log(&amp;#39;foo&amp;#39;); // ==&amp;gt; &amp;#39;bar&amp;#39;}console.log(&amp;#39;foo&amp;#39;); // ==&amp;gt; &amp;#39;bar&amp;#39;}In the above example, if you didn’t know any better and you thought JavaScript had block scope, you might assume that the variable foo only exists inside the if block. But it doesn’t. In fact, even if the condition in the if statement evaluated to false, the variable foo would still exist to the entire function, but it just would not be set to &#39;bar&#39; (it would actually just remain undefined).So what’s hoisting then?Anything defined inside of a block is actually “hoisted” up to the function scope of whatever function you’re in.function test() {if(/* something */) {var foo;}}// it gets evaluated to something like this:function test() {var foo;if(/* something */) {// do something}}Anything you declare inside of a block (whether it’s a function, a string, an array, or whatever), it is available to the entire scope. Blocks simply evaluate those variable to whatever you say, when a certain condition is met.Best PracticeIn my opinion, declaring all variables that will, or even just might, be later defined within your function should happen at the top of the function. Some arguments against this might cite possible performance issues, but that might be going into the arguments of micro-optimization vs readability.  In my opinion, declaring all variables that will, or even just might, be later defined within your function should happen at the top of the functionI humbly assert this opinion because I think it helps immensely with code readability, especially with large, wordy functions, and understanding ahead of time what is going to happen and what certain variable might get new definitions.function someFunction() {var test, test1, test2, test3;if(/* something */) {test = 0;} else if (/* something */) {test1 = 0;} else if (/* something */) {test2 = 0;} else if (/* something */) {test3 = 0;}}In the above example, you know all the variables ahead of time, even though only one of them might actually be set to something else other than undefined (in this case, only one of those variables might be set to 0).To me, this looks like it could get confusing:function someFunction() {if(/* something */) {var test = 0;} else if (/* something */) {var test1 = 0;} else if (/* something */) {var test2 = 0;} else if (/* something */) {var test3 = 0;}}While this is a small, manufactured function that probably doesn’t make sense and probably does a whole lot of nothing, in a lengthier function, someone else who reads the code might see a new variable definition, and have trouble understanding the context or the use. Additionally, all those variable declarations will get hoisted to the top of the function anyway. You’ll still have three variables that are undefined, and only one that is set to 0, but the code just happens to be more confusing.Small caveat regarding letIf you use the keyword let in place of var, everything I just wrote in this blog post is null and void. let allows you to declare and/or define a block-scoped variable (see the MDN page, which says “The let statement declares a block scope local variable, optionally initializing it to a value.”)Note this warning on the MDN page as well:  The let block and let expression syntax is non-standard and will be removed in the future. Do not use them!",
      "url"      : "/javascript/2015/03/20/what-is-hoisting-in-javascript.html",
      "date"     : "2015-03-20 12:31:00 -0500"
    }
  
]