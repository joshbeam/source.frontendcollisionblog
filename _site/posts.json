[
  
    {
      "title"    : "Initial thoughts on event sourcing",
      "category" : "javascript",
      "content"	 : "&quot;The state of any object can be derived from the events that affect it.&quot; In a nutshell, this is the thesis of &quot;event sourcing&quot;, which, when implemented in an application, becomes an &quot;event driven architecture&quot;. In this post I&#39;ll discuss some of the practical applications, benefits, and drawbacks that the team and I have noticed after migrating our current, stateful database to a more event-driven approach.TL;DRStore events in your database, and construct the current state of your database from those events. Keep side-effects separate (like emails being sent to users). Endpoints become open-ended and asynchronous, and you can track the state of your database throughout time (almost like Git).IntroMy team and I are several months into a move from a traditional RESTful implementation (which is referred to as “active record” and is arguably the most widespread concept taught in web development) of our server to a more event-driven approach. If you haven’t read much about event-driven architecture (EDA) or event sourcing, I would recommend taking a look at this easy-to-follow slide deck (it should take about 10 minutes or so to get a basic idea of what’s going on). If you prefer not to read that…Here’s a quick rundown of some of the basic concepts  “Entities” (records in your database) are modeled as events (for example, UserCreated would be an entity).  Your stateful objects (something that would traditionally be a User object or whatever) are derived from your events.  In theory, if you only kept a backup of your event entities, you should be able to reconstruct the most up-to-date state of your entire database.Instead of mutating an object over and over and losing any notion of what led the object to that point, you can instead keep a timeline of the object and derive its current state. It’s like having a history of every object in your database. Kind of reminds me of Git.For performance reasons, every time some requests, say, user/1234, you don’t want to recompute that user object based on the events that led up to that point (UserCreated, UserUpdatedEmailAddress, UserLoggedIn, etc.), but instead, every time an update/delete occurs, you can just store the current state of whatever that object is in a separate table and query for that on any GET request.In other words, new events trigger updates, and GET requests query for the stateful object itself. This is almost like a cache.In other words, this is a very close model of real life. Things happen over time, and the current state of anything is just the sum of the things that happened to it.What can the endpoints look like?Something like /api/1.0/userCreated.One approach is to model your endpoints as events themselves. In other words, the endpoints have a semantic meaning for their corresponding entity, just like any other traditional RESTful endpoint. However, this approach lends itself to being a bit more open-ended and a bit less procedural. Additionally, all endpoints become basically either a GET or a POST (similar to “REST without PUT”), and side-effects are processed asynchronously on the backend.That last point about side-effects is important, because if you were to reconstruct your database from your events, you would want to do so without, say, triggering emails being sent to users, etc. The side-effects should be encapsulated in a set of logic seperate from the event creation itself (and endpoints are a great mechanism for this).Some benefits I’ve encounteredLoosely coupled, open-ended endpointsThis has been absolutely fantastic. For most operations, our client application just sends a GET for a current stateful object, or a POST to create an event. That’s it. If you’ve ever deployed an iOS application to the App Store, you’ll know it takes about a week (sometimes shorter, sometimes longer) to get approved. This means that if you have a bug in your client application, the fix takes the sum of the time it takes you to:  Receive a complaint from a customer  Find out why the bug is happening (“well, it was working on my machine?!”)  Fix the bug  Code review  Do some QA  And then, get App Store approvalThis means you need to remove flow of control from your client application as much as possible, and move that control to your server. This is pretty trivial in most cases with open ended endpoints that simply respond to events.We have continuous integration set up through CircleCI, which means that once we merge in Github from develop to staging, or staging to master, our server automatically deploys. This means that if we can keep as much logic as possible on our server, we can just deploy our server as often as we want to fix bugs that we encounter (this is obviously useless, however, if it’s a client UI bug).Backend becomes asynchronousThis is huge. This means that essentially all side effects happen inside workers. So the only response that gets sent back to the client is either something like a 401: Unauthorized, 500: Internal error, or 200: Success. These responses are only those of the event creation itself. Things that might take a shit ton of time (like making a third-party service send an email to user who just signed up) can take place in the background.An asynchronous backend can be implemented without an event-driven architecture (for example, by making traditional, RESTful, active record endpoints kick off async workers), but these approaches mesh very well together.Some drawbacks I’ve encounteredLots of entitiesEvents are entities, and, well… entities are entities too. In other words, if you store both events and the current state of your database, then you have a big database.Backend becomes asynchronousYou’ll notice the second point was mentioned as both a benefit and a drawback. If your endpoints operate asynchronously, this means that you can only rely on sending an HTTP response for the creation of the event itself. That’s it. No client logic can depend on any subsequent operations or side-effects that take place on the server, unless you implement some sort of two-way communication via polling, web sockets, etc..For example, say we want to prevent users from posting an ad for their used motorcycle on our app unless they’ve verified they’re email address. In a traditional, synchronous, active-record approach, we might do this:  POST /advertisement BODY: { type: &#39;motorcycle&#39;, make: &#39;Harley Davidson&#39; }  Server checks user.emailVerified === true?  If not, respond with, say, 401: Unauthorized  This response triggers logic on the client to show a prompt asking for the user to enter their email address in order to be sent an email with a link to verify itThis works great, if the backend is synchronous. What’s left to be discovered is the best approach for processing complex logic such as this with an asynchronous backend, which requires a different frame of thinking (something we’re still working on figuring out).Some final thoughts/questionsDeletionsDo you want “soft deletes” or “hard deletes”? In other words, do you want to actually remove a stateful record from your database, or simply mark it (via a flag) as “removed” or “deleted”, or whatever?DiffsSince this approach is already closely related to Git, one of the only major things missing is the ability to “diff” objects. These diffs could be stored inside the event itself:// UserUpdated eventUserUpdated = {  user_id: &#39;auth0|123456&#39;,  email: &#39;new_email@gmail.com&#39;,  updated: [    {type: &#39;MailingList&#39;, _id: &#39;aXd45&#39;, email: &#39;new_email@gmail.com&#39;},    {type: &#39;User&#39;, _id: &#39;bgg7x&#39;, email: &#39;new_email@gmail.com&#39;}  ]}There are still many questions to be answered, and lots of cool things that can be implemented here. It is a shift in the commonly-taught paradigm (the “active record” approach). I am excited to learn more from others who have experience with this! Thanks for reading, and feel free to chime in in the comments below.",
      "url"      : "/javascript/2015/12/24/initial-thoughts-on-event-sourcing.html",
      "date"     : "2015-12-24 07:26:00 -0800"
    },
  
    {
      "title"    : "Get rid of $scope, and extend into the view model",
      "category" : "angularjs",
      "content"	 : "AngularJS&#39;s controllerAs syntax is a good first step into being able to have some sort of sense of hierarchy in applications. However, large controllers can still get unwieldy. We can move towards controlling our controllers with angular.extend.TL;DRPut all your controller properties into an object literal, and extend that object into this:angular.extend(this, vm);After that, always use this to refer to controller properties (don’t use vm.whatever).A brief overview of controllerAsSkip to the next section if you already know how to use this.Basically, if you have a parent controller and a child controller nested within, you have to explicitly refer to $scope.$parent to access the parent controller from the child controller.However, with controllerAs syntax, we get a namespace.&amp;lt;div ng-controller=&quot;ParentCtrl as parent&quot;&amp;gt;    {{parent.something}}    &amp;lt;div ng-controller=&quot;ChildCtrl as child&quot;&amp;gt;        {{child.something}}    {{parent.something}}      &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;But then in your controller, you might have to deal with this:// parent.controller.jsvar vm = this;vm.name = &#39;Bob&#39;;vm.job = &#39;Builder&#39;;vm.motto = &#39;Yes we can!&#39;;vm.speak = speak;function speak() {  return vm.motto;}Also, wondering why we’re using vm? Check out John Papa’s AngularJS Style Guide.Now imagine that, 1000x, when you have a controller full of lots and lots of stuff. Really, you could argue that you should consider leveraging directives and services for most of your business logic, but sometimes it’s difficult to do.By the way, controllerAs still knows about $scope. This fake “namespace” simply happens internally by attaching an object to $scope. So in the above example, our parent controller $scope would look like this:{  // a bunch of $$ angular properties, and then...  parent: {    name: &#39;Bob&#39;,    job: &#39;Builder&#39;,    motto: &#39;Yes we can!&#39;,    speak: function speak(){...}  }}In fact, if you were to inject $scope into that controller and ask for $scope.parent, you’d see all those properties. There’s nothing fancy about it.Extending the view modelEver heard of angular.extend? It’s pretty nifty. It basically just puts properties from one object into another object, without overwriting any properties. AngularJS already attempts to protect us from this by delimiting internal properties with $ or $$, so it’s not really a concern anyway, but it’s a nice added touch.So, we can just make our controller look like this:// parent.controller.jsvar vm = {  name: &#39;Bob&#39;,  job: &#39;Builder&#39;,  motto: &#39;Yes we can!&#39;,  speak: speak };angular.extend(this, vm);function speak() {  return this.motto;}However, you’ll notice that it’ll usually be better from then on to continue to refer to controller properties with this rather than vm, because any changes through data-binding will propogate only to this (our namespaced controller), and not to our vm object reference. You can leverage things like Function.prototype.bind if you get into hairy contexts (like forEach loops, etc.).",
      "url"      : "/angularjs/2015/08/23/extending-vm-into-this.html",
      "date"     : "2015-08-23 11:30:00 -0700"
    },
  
    {
      "title"    : "3 lessons in solving stupid engineering problems (without resorting to manslaughter)",
      "category" : "javascript",
      "content"	 : "Recently, some colleagues and I dreadfully spent (read: wasted) valuable man hours attempting to solve a bug in a hybrid mobile app. The cause of the bug? A missing &amp;lt;script&amp;gt; tag. Several important lessons can be learned from the ways in which we decided to go about solving this simple headbanger (no, not like you&#39;d do at a heavy metal concert; rather, where you actually consider banging your head on a solid object) of a problem.  Before we continue, here’s the problem and our solutionWe were attempting to integrate a certain OAuth library into a hybrid mobile app, which uses ionic (if you haven’t heard of it, it’s a pretty… interesting hybrid framework for building mobile apps with web technologies, aka, no Objective-C or Java).Basically, the OAuth library would just let us login to our app. Except we couldn’t login… Why? Because we were missing this line of code in our index.html:&amp;lt;script src=&quot;cordova.js&quot;&amp;gt;&amp;lt;/script&amp;gt;That took quite a while to figure out. Pretty simple solution, though, no?Lesson 1: Everyone is responsible for the environment  No, not that environment (well, that environment too, but that’s not what we’re referring to, here). We’re referring to the development environment.When you run ionic start myApp blank, it scaffolds a blank app for you. It also happens to set up an index.html for you, which already contains this cryptic line:&amp;lt;!-- this will be a 404 when in a development environment --&amp;gt;&amp;lt;script src=&quot;cordova.js&quot;&amp;gt;&amp;lt;/script&amp;gt;However, with plethora build tools available (like webpack), one can usually just require(&#39;ionic&#39;) or whatever. Instead, we got rid of the index.html and replaced it with our own, because we thought we were being super developers who could build an app in one step. There are many issues that play into this (for example, the whole point of a build tool such as webpack is to be able to be a super developer and build the app in one step… but we’ll ignore that for now).Anyway, the initial assumption was that the environment was set up correctly from the get-go. Usually this is a reasonable assumption, and everything did appear to be working correctly from the get-go, but there were some clues that we weren’t paying attention to.This isn’t anyone’s fault, per se, but the key takeaway is that when you run into a bug like this, you should do your due diligence and consider that the environment could have, in fact, been setup incorrectly. Had this been the first step, many man-hours would’ve been saved.We had three devs working on this problem, and all of us assumed that everyone else had made sure the environment was pristine. We never questioned it.Lesson 2: Everything is a clue  In our situation, we had two apps: the first app was already working, login and all. The environment, plugins, etc., in our second app appeared to be equivalent to those of the first app. But there was a nagging clue that was ignored.In the context of ionic, in order to make outside requests (i.e., XHR), you have to have the cordova-plugin-whitelist installed. However, it’ll give you a nice little warning if you specify that the app can access all outside origins (with an asterisk: *), and don’t supply a certain meta tag: No Content-Security-Policy meta tag found. Please add one when using the Cordova-plugin-whitelist plugin..Because our second app environment was theoretically equivalent to the first app, we should’ve expected to see this warning in our second app. However, even though this clue was extremely subtle, it could’ve led us to a solution much earlier. In fact, I admit that I noticed the warning wasn’t present, but discounted it as a non-clue.The key takeaway is that everything, no matter how subtle, can be a clue.Lesson 3: Question your assumptions… and then question them again  Our initial assumption was that it had to be the specific OAuth library we were using that was causing the problem.We spent several hours combing through the source code of the library, comparing the differences between execution in the first app and the second app. But they appeared identical. And that’s because they were identical. That’s because our problem had virtually nothing to do with the OAuth library.While delving into this source code did lead us to make some valuable discoveries (related and unrelated to the issue at hand), it was not the genesis of the bug. The key takeaway is that you should question your assumptions of where the root of the problem lies.How do you do this practically? Well, perhaps by verbalizing your assumptions, and making a list of them. Here’s what our list would’ve been:  Assumption 1: our OAuth library is causing the problem  Assumption 2: our plugins (whitelist, inAppBrowser, etc.) aren’t configured correctly  Assumption 3: our environment is set up correctlyThese assumptions led us to this potentially devastating logic:Assumption: our OAuth library sucksConclusion: therefore, we need to reimplement our login system  So how did we stumble upon a solution to this mystical problem?We drunkenly stumbled into our solution by attempting to implement a workaround to the inAppBrowser plugin. Wait, wot?Well, one of our other underlying assumpetions was that window.open wasn’t functioning properly (this is something the OAuth library was using interally). So we thought, why not try to use cordova.inAppBrowser.open instead, as suggested by some StackOverflow answers?This led us to this haunting error (I’ll probably have nightmares about it for years to come):Uncaught ReferenceError: cordova is not definedOnly at that point did we go back to the ionic docs and see that, in fact, you have to include this script tag in your index.html (even though we were attempting to use the magic of webpack):&amp;lt;!-- this will be a 404 when in a development environment --&amp;gt;&amp;lt;script src=&quot;cordova.js&quot;&amp;gt;&amp;lt;/script&amp;gt;  ",
      "url"      : "/javascript/2015/08/23/solving-stupid-problems.html",
      "date"     : "2015-08-23 06:39:00 -0700"
    },
  
    {
      "title"    : "3 reasons you should not be using Array.prototype.forEach",
      "category" : "javascript",
      "content"	 : "One of the main problems with forEach is that it primarily relies on side effects, whereas some native Array.prototype alternatives make use of semantically-correct programming paradigms (such as reduction, mapping, and filtering) and may in turn introduce less incidental complexity (and enhance readability) when writing code.  3) You should be filteringIn this example, we have an array, and we want to eliminate items from an array that don’t meet a specific criteria. Here’s how you’ll see it done with forEach:Bad  var filteredArray = [];[1, 2, 3, 4, 5].forEach(function(number) {  if(number &amp;gt; 3) {    filteredArray.push(number);  }});console.log(filteredArray);    [4, 5]  This is a typical implementation. With forEach, you simply push each object to a completely new array. You’ll notice that this introduces extra state to maintain. More state equals more brainpower needed to understand what is happening.Luckily, Array.prototype.filter already has you covered there. It simply returns a new array of the items we want.Good  var filtered = [1, 2, 3, 4, 5].filter(isBig);function isBig(number) {  return number &amp;gt; 3;}console.log(filtered);    [4, 5]  2) You should be mappingIn this example, we want to “change” each value in an array to something else. Here’s how we’d do it with forEach:Bad  var stringNames = [];var names = [{  first: &#39;Josh&#39;,  last: &#39;Beam&#39;},{  first: &#39;Ozzy&#39;,  last: &#39;Osbourne&#39;}]names.forEach(function(name) {  stringNames.push(name.first + &#39; &#39; + name.last);});    [&quot;Josh Beam&quot;, &quot;Ozzy Osbourne&quot;]  Again, naked looping requires us to create additional state within our application.Here, we’re gonna use map instead. Again, it simply returns a new array without requiring us to do it ourselves:Good  var names = [{  first: &#39;Josh&#39;,  last: &#39;Beam&#39;},{  first: &#39;Ozzy&#39;,  last: &#39;Osbourne&#39;}]names = names.map(fullName);function fullName(name) {  return name.first + &#39; &#39; + name.last;}console.log(names);    [&quot;Josh Beam&quot;, &quot;Ozzy Osbourne&quot;]  1) You should be reducingHere, we want to combine certain values in an array.Bad  var total = 0;[1, 2, 3, 4, 5].forEach(function(number) {  total += number;});console.log(total);    15  In other words, when you think “reduce”, think about “collapsing” items into a new item. Another way to think of it is to imagine you have an array filled with the words of a sentence, and you want to concatenate them all into one string.Good  var total = [1, 2, 3, 4, 5].reduce(addAll);function addAll(total, current) {  return total + current;}console.log(total);    15  ConclusionYou’ll notice one of the overarching concepts of all these three methods is that they all take the “functional route”, where they don’t necessarily require the manual creation of additional state. It is possible to introduce side effects within these methods, however, they don’t primarily rely on side effects to function. In other words, you’ll see that Array.prototype.forEach primarly relies on side effects. It never returns a value other than undefined unless you explicity force it to.Why am I referring to functional programming in the context of JavaScript, which is clearly not a functional programming language? Well, to quote the omniscient Wikipedia article on functional programming:  Eliminating side effects, i.e. changes in state that do not depend on the function inputs, can make it much easier to understand and predict the behavior of a programIn other words, it can take more “brain power” to understand what is happening in a forEach loop whose sole purpose is to mutate outside data based on side effects, whereas map, reduce, and filter all have immediate and clear semantic meanings to the programmer (that’s not to say, though, that you can’t use the power of those methods for evil).  ",
      "url"      : "/javascript/2015/08/15/3-reasons-you-should-not-be-using-foreach.html",
      "date"     : "2015-08-15 12:04:00 -0700"
    },
  
    {
      "title"    : "5 Things I Learned in My First Month at a Startup",
      "category" : "engineering",
      "content"	 : "In a departure from the normal content of this blog, I wanted to talk briefly about some of (what I think) are some important things I&#39;ve learned so far in my first month working for a Bay Area tech startup.In no particular order (and at a very high level of abstraction and with as little fluff as possible)…5) Don’t come with a problem. Come with a working prototype.A working prototype says much more about a proposed solution, than does talking about the proposed solution.4) Be both purist and pragmaticThis is a careful balance of business goals vs. coding nirvana, ruthless pragmatism vs. lofty purism. In other words, it’s both good to know exactly what the perfect solution should look like, and to know what compromises you have to make to have a working solution based on business timeline constraints.3) Conflict breeds results (but always listen)As our patient, level-headed CTO says, “One person scores, but the whole team gets them there.” By “conflict” I don’t mean the bad type of conflict. I mean the conflict that arises from a group of passionate people all trying to arrive at the best solution.The opposite side of the coin is: communication. “Today, I will learn nothing by speaking, but much by listening.” Beme engineer Matt Hackett (previously VP of Engineering at Tumblr) says: “Most important engineering skill: Humility.”2) The pieces eventually come togetherWhen working on teams of engineers (perhaps in an Agile environment), all the pieces of the product seem scattered, but eventually, everything will begin to cleanly merge back into the product that everyone has been imagining it would be.1) Work hardYou’re it. You directly influence the success or failure of your company. Dwayne Johnson says, “always be the hardest worker in the room.” This is a tough goal when everyone else is already working harder than everyone else in the room.  Great companies don’t hire skilled people and motivate them, they hire already motivated people and inspire them. People are either motivated or they are not. Unless you give motivated people something to believe in, something bigger than their job to work toward, they will motivate themselves to find a new job and you’ll be stuck with whoever’s left.— Simon Sinek, Start with Why: How Great Leaders Inspire Everyone to Take Action",
      "url"      : "/engineering/2015/08/11/5-things-i-learned-in-my-first-month-at-a-startup.html",
      "date"     : "2015-08-11 10:48:00 -0700"
    },
  
    {
      "title"    : "Modern Looking CSS Toggle Switch",
      "category" : "javascript sass",
      "content"	 : "Create a nice, modern toggle switch that works by just changing its padding and adding a transition (all it takes is a JavaScript click handler to add or remove a class)!JS BinWorks in the latest version of IE, Chrome, Firefox, and Safari.This toggle switch can be used to turn things into an “on” or “off” state (for example, through HTTP requests via AJAX), and the state is represented by the toggle’s CSS.ComponentsThe toggle is made up of two components:The “toggle” (the container for the whole thing):This toggle gets the badass class name of, you guessed it, .toggle. It can also receive the .on class via JavaScript.The next component is the “switch” (the little round thing that moves back and forth):&amp;lt;div class=&quot;toggle&quot;&amp;gt;  &amp;lt;div class=&quot;switch&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;Principle of functionThe only thing that changes when you click the toggle is its padding!When you click on the toggle, it gets an “on” class added or removed, through some nice vanilla JavaScript:[].forEach.call(document.getElementsByClassName(&#39;toggle&#39;), function($toggle) {  $toggle.addEventListener(&#39;mouseup&#39;, function() {    this.classList.toggle(&#39;on&#39;);  });});What this “on” class does is set the padding-left of the toggle () so that the switch appears to move to the side.All we do after that is add some nice CSS3 transitions to the background-color and padding by saying something like transition: 400ms cubic-bezier(0, 0, 0, 1);, and we have a working switch.Don’t SASS me.toggle {  // this is both the width and height of the little circular switch  $switch-height: 36px;    // change the spacing between the switch and the entire toggle  $switch-margin: 2px;    // change the width of the whole toggle  $toggle-width: 70px;    // don&#39;t change these calculations  $toggle-height: 3 * $switch-margin + $switch-height;  $toggle-padding: $toggle-width - $toggle-height;    background-color: #eee;  border: 1px solid #fff;  border-radius: $toggle-height;  box-shadow: 0 0 5px #ddd;  box-sizing: border-box;  height: $toggle-height;  transition: 400ms cubic-bezier(0, 0, 0, 1);  width: $toggle-width;    &amp;amp;.on {    background: lightblue;    padding-left: $toggle-padding;  }    .switch {    background: #fff;    border-radius: 100%;    height: $switch-height;    margin: 2px;    position: relative;    width: $switch-height;    z-index: 9;  } }In its simplest formFor the slow people like me, here is a bare-bones version using regular ol’ onclick and CSS (and some bad practices).JS BinHTML:&amp;lt;div class=&quot;toggle&quot;&amp;gt;  &amp;lt;div class=&quot;switch&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;CSS:.toggle {  background: #eee;  box-sizing: border-box;  transition: 500ms;  width: 150px;}.toggle.on {  padding-left: 100px;}.switch {  background: white;  border: 1px solid gray;  height: 50px;  width: 50px;}JavaScript:document.getElementsByClassName(&#39;toggle&#39;)[0].onclick = function() {  this.classList.toggle(&#39;on&#39;);}ConclusionWell that’s that: a simple CSS selector switch (all it needs is a click handler). You could also make this an AngularJS directive called, say, &amp;lt;toggle&amp;gt;&amp;lt;/toggle&amp;gt;, and add the click handler inside the directive.Key points: The switch moves by just changing the padding, and you can add a transition to make it all smooth-like.",
      "url"      : "/javascript/sass/2015/05/26/modern-looking-css-toggle-switch.html",
      "date"     : "2015-05-26 12:07:00 -0700"
    },
  
    {
      "title"    : "From JavaScript to Ruby: Style Guide",
      "category" : "javascript ruby",
      "content"	 : "This post is the second in the series of “From JavaScript to Ruby”, which is aimed at helping JavaScript developers transition their thinking from JavaScript to Ruby. Here you’ll find a table of the ways we do things in JavaScript, and the way you’re supposed to do them in Ruby.Style GuideThis post is a living document. Expect changes as necessary. Suggestions? Leave a comment below or email Josh.Last updated: Apr 20, 2015                    If you do this in JavaScript...                Airbnb                    ...do it like this in Ruby                bbatsov                        String quotes              &#39;Some string&#39;      &#39;Some string&#39;              String concatenation              var world = &#39;world!&#39;,    helloWorld = &#39;hello &#39; + world;            world = &#39;world&#39;hello_world = &quot;hello #{world}&quot;                    Variable names                      camelCaseVariable = true                    camel_case_variable = false                    Tabs              function foo() {    // &#39;hard tab&#39;, 4 spaces}            def foo  # &#39;soft tab&#39;, 2 spacesend                    Callbacks              function someFunction(cb) {  var hello = &#39;hello&#39;;  if(typeof cb !== &#39;undefined&#39;) {    return cb.call(this, hello);  }}someFunction(function (h) {  return h;});            def someMethod  hello = &#39;hello&#39;  yield(hello) if block_given?endsomeMethod do |h|  hend# orsomeMethod { |h| h }                    Talking about methods              someClass.someMethod      SomeClass#some_method              Comments                      // single-line comment/*  multi-line  comment*/                    # single-line comment# multi-line# comment                ",
      "url"      : "/javascript/ruby/2015/04/20/from-javascript-to-ruby-style-guide.html",
      "date"     : "2015-04-20 07:57:00 -0700"
    },
  
    {
      "title"    : "From JavaScript to Ruby: Using Blocks Like Callbacks",
      "category" : "javascript ruby",
      "content"	 : "This post is the first in the series of “From JavaScript to Ruby”, which is aimed at helping JavaScript developers transition their thinking from JavaScript to Ruby. This post will answer this fundamental question: how do I do “callbacks” in Ruby? The answer is: the “idiomatic” way (we’ll talk about what “idiomatic” means) to use so-called callbacks in Ruby is to use blocks. We’ll discuss blocks, and their similarities to JavaScript callbacks.Defining “callback” through practical examplesA callback is a function that happens after we call another function, but the catch is, they’re coupled. However, being coupled in this way doesn’t mean we can’t reuse the callback function.We often use anonymous functions in JavaScript as callbacks. Here’s an example using Array.prototype.forEach:var names = [&#39;Bob&#39;, &#39;Sue&#39;, &#39;Aron&#39;, &#39;Joseph&#39;];names.forEach(function(name) {  console.log(&#39;Hello &#39; + name);});// =&amp;gt; &quot;Hello Bob&quot;// =&amp;gt; &quot;Hello Sue&quot;// =&amp;gt; &quot;Hello Aron&quot;// =&amp;gt; &quot;Hello Joseph&quot;We can actually sort of “scoop out” the function that we passed into Array.prototype.forEach in order to make it reusable:var names = [&#39;Bob&#39;, &#39;Sue&#39;, &#39;Aron&#39;, &#39;Joseph&#39;];names.forEach(sayHello);function sayHello(name) {  console.log(&#39;Hello &#39; + name);}// =&amp;gt; &quot;Hello Bob&quot;// =&amp;gt; &quot;Hello Sue&quot;// =&amp;gt; &quot;Hello Aron&quot;// =&amp;gt; &quot;Hello Joseph&quot;How do we do this in Ruby? And what does “idiomatic” mean?You’ll hear a lot of Rubyists use the word “idiomatic”. Read:  The idiomatic way to pass arguments to a method in Ruby is such and such…  The idiomatic way to use a “callback” in Ruby is to such and such…In normal-people speak, you’d say:  The common way to go about doing this is such and such…Make sense? In other words, there are certain patterns and best practices (solutions) for common problems in Ruby: we call these solutions “idioms”. So, the idiomatic way to use callbacks in Ruby is not to use callbacks at all. Instead, we use blocks.Here’s how we can do the same exact thing in Ruby, instead of JavaScript:If you run the above, you’ll see Hello &amp;lt;name&amp;gt; printed for each name, and at the end it’ll actually return the entire array for you to use.Let’s compare the two. Essentially, this JavaScript…:names.forEach(function(name) {  console.log(&#39;Hello &#39; + name);});…is the same as this Ruby:names.each do |name|    puts &quot;Hello #{name}&quot; endWe can also write the above Ruby in another, shorter way:names.each { |name| puts &quot;Hello #{name}&quot; }So here’s a few things we’ve learned from the above.1st thing we learned (string interpolation)# Notice the necessary double-quotes. Interpolation doesn&#39;t work without them.puts &quot;Hello #{name}&quot; # That&#39;s &quot;string interpolation&quot;. It&#39;s the same as this:puts &#39;Hello &#39; + nameBoth ways are correct, but the string interpolation notation is more idiomatic.In JavaScript, we call it “string concatenation”:console.log(&#39;Hello &#39; + name);2nd thing we learned (block syntax)We also learned two styles, or syntaxes, for writing blocks:names.each do |name|  # stuff hereend# do ... end is one type of block notation. The other type is:names.each { |name| }# The curly braces replace the &quot;do&quot; and &quot;end&quot;.  Pro Tip      Before we continue, I want to point out a couple style points. Rubyists often use &quot;soft tabs&quot;, or 2 spaces instead of just a 4-character tab, only because it different environments it remains readable (see this StackOVerflow question). Also, look at the spacing between the curly braces and pipes. I recommend something to you: Rubocop, which is sort of the de-facto command line tool that tells you if your code looks bad according to the community style guide on GitHub. It&#39;s good stuff.  3rd thing we learned (Enumerable#each == Array.prototype.forEach)Continuing, we learned that Ruby’s Enumerable#each is equivalent to JavaScript’s Array.prototype.forEach (more or less). I have found only one online blog post so far that has made Ruby’s #each make sense to me. It is by Erik Trautman.“Scooping out” the block like a reusable callbackThere are two common ways to make a reusable “callback” in Ruby. They are the lambda and the Proc. There are very subtle differences between the two ways.LambdaBy the way, that’s the new syntax for the single-line lambda as of Ruby 1.9 (I have Ruby 2.1 right now, if you’re curious). If you want to do a multi-line lambda, you do:sayHello = lambda do |name|            puts &quot;Hello #{name}&quot;           endNow that’s some weird-ass looking syntax, huh? Let’s make it look even weirder:Proc (short for “procedure”)Did you notice, by the way, that you can do multi-line variable assignment? Pretty cool; you can’t do that in JavaScript.Differences  Lambda:          You don’t have to pass in all the arguments if you don’t want to. If your “callback” needs, say, 3 arguments, and you only pass in 2 when you use it, there will be no error. This is just like a JavaScript callback… but in JavaScript, the undefined arguments will be undefined, and in Ruby, the undefined arguments will be nil.      If you call return &amp;lt;whatever&amp;gt;, the lambda stops, but any method that the lambda is in does not stop. You can use the lambda’s returned value in the rest of the containing method.        Proc:          You must pass in all the arguments, or you’ll get an error.      If you call return &amp;lt;whatever&amp;gt;, the Proc and any method that it is in will stop. The Proc will return its value to the containing method, and the containing method will also return that same value.      lambda in JavaScript:// This is a JavaScript lambdafunction world() {  return &#39;world!&#39;;}// This is the &quot;containing method&quot; that uses the lambdafunction hello() {  // world() returns, but it just gives up its value, and the function continues  var who = world();  return &#39;Hello &#39; + who;}// =&amp;gt; &quot;Hello world&quot;Proc in JavaScript:// This is a JavaScript Procfunction world() {  return &#39;world!&#39;;}// This is the &quot;containing method&quot; that uses the Procfunction hello() {  // The containing function returns the return value of the Proc  return &#39;Hello &#39; + world();  // Any code below here obviously won&#39;t run:  console.log(&#39;nothing will log here&#39;);}// =&amp;gt; &quot;Hello world&quot;In Ruby, though, as a side note, we rarely use an explicit return statement. You can just type a value.This JavaScript…:function hello() {  return &#39;Hello&#39;;}…is equivalent to this Ruby:def hello  &#39;Hello&#39;endThe ampersand (&amp;amp;)This confusing thing basically just makes sure the thing you’re passing into the method is a Proc, sort of. You can read about that in detail on a.blog.about.code.names.each(sayHello) # =&amp;gt; error: wrong number of arguments (1 for 0)The above error is basically saying, “why did you pass me an argument? I expected 0 arguments for #each”. &amp;amp;sayHello is not an argument! It is a Proc, and Ruby does not count Procs as arguments!It’s weird, huh? That’s because you can pass in a block at the end of pretty much any method in Ruby, and it won’t see it as an argument, in the typical sense.Check it out:# =&amp;gt; What&#39;s up# =&amp;gt; What&#39;s upWe passed in a block at the end, but it didn’t run. But we didn’t get any error either. If we want the block to actually run, we can just say yield:# =&amp;gt; What&#39;s up# =&amp;gt; What&#39;s up# =&amp;gt;  you#block_given? is a native method that returns a boolean (true or false) that checks if a block was passed in to the method. We have to use it in the above example, because if we just say yield instead of yield if block_given?, then we’ll get an error that says no block given (yield).Also, the question mark ? is Ruby’s way of meaningfully letting the user know that the method is supposed to return a boolean. There’s nothing really special about it.Now, going back to the original error (error: wrong number of arguments (1 for 0)):I’ll try my best to sort of construe a similar error in JavaScript:names.forEach(names, sayHello); // TypeError: [object Array] is not a function// It&#39;s saying &quot;names&quot; is not a function, which is true...// forEach expects one argument (a function)// we expected: names.forEach(sayHello);If the above code were Ruby, you’d get an error something like wrong number of arguments (2 for 1). Once again, I want to emphasize this is because Ruby doesn’t see the Proc as an argument.Conclusion  Use blocks as if they were callbacks.  Use a lambda or a  Proc. Remember the two subtle differences between them (number of arguments, and return values).  Put a &amp;amp; before the block that you pass into the method, if you pass it in to a native Ruby method that will run a block, like Enumberable#each.Further reading  Reactive.IO: Understanding Ruby Blocks, Procs, and Lambdas  makandracards: Short Lambda Syntax in Ruby 1.9",
      "url"      : "/javascript/ruby/2015/04/20/from-javascript-to-ruby-using-blocks-like-callbacks.html",
      "date"     : "2015-04-20 04:40:00 -0700"
    },
  
    {
      "title"    : "Something no one tells you about minifying AngularJS controllers (until it&#39;s too late)",
      "category" : "javascript angularjs",
      "content"	 : "This post is going to talk briefly about the common ways people are shown to write AngularJS controllers, why minifying your code will break your application if you write them in this way, and how to fix this problem.The usual approach to writing controllersIn many online AngularJS tutorials, you’re taught (for simplicity’s sake) to write a controller as such:var app = angular.module(&#39;myModule&#39;);app.controller(&#39;MyController&#39;,function($scope) {$scope.doSomething = function() {// some code here}});The above code has several advantages. First, it’s simple to read. Second, it’s simple to write. However, it is generally recommended to minify your JavaScript code before deploying it live, since this reduces the size of the file that the server has to send (in other words, this can dramatically increase the user’s perception of how fast your application loads).Minifying the above controller will break your application. Here’s why…Quick little tangent: if you’re curious, I use Gulp to concatenate and minify my project files. If you’re just writing some code in JSBin, for example, you can just head over to an online minifier like jscompress, which will do the job just fine in most cases.Continuing on… if you minify our above example and open your app, you’ll see that nothing happens. And you’ll get this error in your console:Error: [$injector:unpr]So what is this error? If we click on the error in our console, it will take us to the AngularJS website, which will say something like this:  This error results from the $injector being unable to resolve a required dependency. To fix this, make sure the dependency is defined and spelled correctly.In other words, because of the way AngularJS uses dependency injection (it actually parses the arguments of your functions), when the code is minified, $scope is no longer $scope, $route is no longer $route, etc. Instead, they’re just minified variables, like e or a, which don’t make any sense to AngularJS (if you want to understand a little bit more about dependency injection and how it works in JavaScript, check out these two posts: one by Anand and one by Alex. For now, just know that minfiying breaks dependency injection.)In fact, I’ve written two JSBin examples for you to see what exactly is going on.Working exampleJS BinNon-working (minified) exampleJS BinOpen up your console (if you’re on Mac with Chrome, hit CMD+opt+j), and you’ll actually see the injector error live on this site (since I embedded the JSBin).How to fix itWhen you click on your error message in the console, which leads to the AngularJS website, they actually provide you with a solution to this error:angular.module(&#39;myApp&#39;, []).controller(&#39;MyController&#39;, [&#39;myService&#39;, function (myService) {  // Do something with myService}]);This way works completely fine. If you minify, AngularJS instead looks at each item in the array (which is the second argument passed to the controller in the above example), and resolves any minified dependency to match its correct string name.But as you may or may not know, I am a big fan of John Papa’s Style Guide, and he specifically recommends against the above example, for several reasons. However, the biggest reason to me, is that with a long list of dependencies, the above code can get very hard to read, very quickly.Just imagine if we have something like this:angular.module(&#39;myApp&#39;, []).controller(&#39;MyController&#39;, [&#39;$scope&#39;, &#39;$route&#39;, &#39;Item&#39;, &#39;items&#39;, &#39;utils&#39;, &#39;shade&#39;, function ($scope,$route,Item,items,utils,shade) {  // Do something}]);Okay, okay, it’s not terrible. But I think there’s a better way to write it. As John Papa says:  Why?: Avoid creating in-line dependencies as long lists can be difficult to read in the array. Also it can be confusing that the array is a series of strings while the last item is the component’s function.Use $inject:angular.module(&#39;myApp&#39;, []);MyController.$inject = [&#39;$scope&#39;, &#39;$route&#39;, &#39;Item&#39;, &#39;items&#39;, &#39;utils&#39;, &#39;shade&#39;];angular.module(&#39;myApp&#39;).controller(&#39;MyController&#39;, MyController);function MyController($scope,$route,Item,items,utils,shade) {// do something}The above makes me breathe a sigh of relief, due to the now ease of readability. And, we’ve solved our issue of minification. We are now minification-safe! Anyone looking at the code can now understand exactly what is happening. “Oh, okay, so we have injected several services into this controller…”You’ll notice too that I separated the declarations of the module (I didn’t chain .controller to angular.module(&#39;myApp&#39;,[])). Once again, I recommend reading John Papa’s style guide for quick clarification on that.ConclusionThis doesn’t just go for controllers. It goes for anything where you inject anything. Directives, configs, runs, factories, etc. I am of the opinion that following the above implementation of dependency injection, at least in the current version of AngularJS at the time of writing this (end of March 2015), is probably one of the best solutions to solving the minification and readibility issues caused by other solutions.So to recap what we learned… Minifying code that uses string-dependent dependency injection can break your application, unless you explicitly define the strings to use for the dependencies, which $inject is perfect for.",
      "url"      : "/javascript/angularjs/2015/03/31/something-no-one-tells-you-about-minifying-angularjs-controllers-until-its-too-late.html",
      "date"     : "2015-03-31 03:48:00 -0700"
    },
  
    {
      "title"    : "Getting started with a search engine for your site (no server required!)",
      "category" : "javascript jekyll tutorial",
      "content"	 : "Today we&#39;ll talk about how to build a JavaScript-only search engine (using JSON and AJAX) to avoid databases and server-side programming. We&#39;ll do it all specifically in the context of Jekyll and GitHub Pages!What do you mean “no server”?Lots of search features on websites rely on communicating with the server to deliver search results. For example, a user might click a search button that sends, say, a POST request to the server, where a .php file handles the request, and sends the results back.With the way we’re gonna do it here, we’re going to handle the request entirely on the client. No server-side code processing required. We’ll go over the architecture in a minute.Why not process on the server?Nothing wrong with the traditional way of doing it. For my website, though, I’m using Jekyll, and I’m hosting it on GitHub pages. GitHub pages doesn’t support processing with PHP, Node.js, etc. Therefore, the only way to do it is on the client (with a little bit of pre-processing, which we’ll go over in a second).TutorialTechnologies used  Jekyll (a static site generator)  lunr.js (a JavaScript search indexer)  jQuery (to make the AJAX stuff and displaying the results easier)Architecture  Take advantage of Liquid (the template system that Jekyll uses) to create a JSON file of all our searchable content (in this example, blog posts)  Write some JavaScript that sends an AJAX request to retrieve the JSON file whenever the user searches for something  Use lunr.js to match the search query against all the blog posts in the JSON file and display the search results in order by the strength of the match&amp;hellip;Step 1 — Make the JSON fileWe’re going to kind of “hack” our way through Liquid to create a JSON file.Create a new file in your root called posts.json. Open it up:------[  {% for post in site.posts %}    {      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,      &quot;category&quot; : &quot;{{ post.categories | join: &#39; &#39; }}&quot;,      &quot;content&quot; : &quot;{{post.content | strip_html | strip_newlines | remove:  &quot;&quot; | escape | remove: &quot;&quot;}}&quot;,      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,      &quot;date&quot;     : &quot;{{ post.date }}&quot;    }{% unless forloop.last %},{% endunless %}  {% endfor %}]You’ll notice some strange things. First, if you’re using syntax highlighting, you’ll get all kinds of weird “errors”. Ignore them. JSON or JavaScript syntax highlighting doesn’t understand that we’re using Liquid.Second, how the hell is this going to work, if it’s a JSON file? Well, you see the two sets of --- at the top of the file? When you run jekyll build, it will see this file as a “special file” that needs to be processed with Liquid. If we remove the ---, it won’t process the template. This is called “YAML front matter”. Any pages with YAML front matter get processed with Liquid.Most of the templating above is self-explanatory if you understand the basics of Liquid filters. However there is one line I’d like to explain.&quot;content&quot;   : &quot;{{post.content | strip_html | strip_newlines | remove:  &quot;&quot; | escape | remove: &quot;&quot;}}&quot;,The content of our post might contain raw tab characters, as well as double quotes (&quot;). Well, as it turns out, having tab characters inside a JSON string is invalid JSON, so when we call our AJAX request later, nothing would be returned! Not good.Solution? Run two remove filters: one for the tab character, and one for the double quotes.Also, I want to explain this part:}{% unless forloop.last %},{% endunless %}If you don’t have that line of code, your output would look something like this:[{ /* content */ },{ /* content */ },{ /* content */ },]See the trailing comma on the last object? This is also invalid JSON. Not good. So, we run a some Liquid that says don’t put a comma at the end if it’s the last object.Now, run jekyll build, and you’ll end up with a compiled posts.json underneath _site, which contains the entire built site. Here’s the compiled JSON:[    {      &quot;title&quot;    : &quot;Why do people add semicolons before modules?&quot;,      &quot;category&quot; : &quot;javascript snippet&quot;,      &quot;content&quot; : &quot;Simple answer: because of minification issues.Minification can cause modules to use each other as their arguments (unintentionally), if the developer isn’t careful.(function() {// code})()(function() {// code})();If you look closely enough at the above, you’ll see the first IIFE is missing a semicolon at the end.That means that when minified, it’ll look like this:The broken code:(function() {})()(function() {})();// (a)()(b)()The problem is that now function a is being called with function b passed in as an argument. Interesting.So, we just add a ; to the beginning of the module, and to the end. This acts as a safeguard to ensure we don’t run into that problem when we minify.So, when we try doing the above example with semicolons at the beginning and at the end, and you minify the code, you get this instead:The working code:;(function() {})();;(function() {})();The cool thing is, the above doesn’t throw any errors. In fact, JSHint won’t yell at you either.Why is this? Check out the MDN article on empty:  An empty statement is used to provide no statement, although the JavaScript syntax would expect one.So those extra semicolons are not a syntax error, because a random semicolon anywhere in the code can be interpreted as an empty statement. Cool, huh?&quot;,      &quot;url&quot;      : &quot;/javascript/snippet/2015/03/22/why-do-people-add-semicolons-before-modules.html&quot;,      &quot;date&quot;     : &quot;2015-03-22 18:34:00 -0500&quot;    },    /* and several other posts*/]I strongly recommend running your output through JSONLint if your code isn&#39;t working right. It&#39;ll help you find whatever errors you might have in your JSON syntax.Step 2 — Send an AJAX requestCreate a “Query” objectDon’t confuse our Query object with jQuery. Our Query object will serve as a container for everything related to our search. I’ve commented the code so you can see what everything does.//Create a module using an IIFE;(function(global,$) {  /*    Put ourselves into &quot;strict&quot; mode    This just helps us write cleaner JavaScript  */  &#39;use strict&#39;;  Query.prototype = {    // this.q is our search query (for example, &quot;javascript tutorial&quot;)    set: function(val) {      this.q = val;      return this;    },    // brings us to our search page with a query string attached    goToLocation: function(route) {      if(typeof this.q !== &#39;undefined&#39; &amp;amp;&amp;amp; typeof this.q === &#39;string&#39;) {        document.location.href=route+&#39;/?query=&#39;+this.q;      } else {        return;      }    },    // returns our search query (for example, &quot;javascript tutorial&quot;)    get: function() {      return this.q;    },    // &quot;grab&quot; the query from the query string in the URL and set this.q to it    setFromURL: function(name) {      name = name.replace(/[[]/, &quot;[&quot;).replace(/[]]/, &quot;]&quot;);      var regex = new RegExp(&quot;[?&amp;amp;]&quot; + name + &quot;=([^&amp;amp;#]*)&quot;),          results = regex.exec(location.search);      this.q = results === null ? &quot;&quot; : decodeURIComponent(results[1].replace(/+/g, &quot; &quot;));      return this;            },    // a wrapper for jQuery&#39;s $.get    getJSON: function(file) {      return $.get(file);    }  };  // when we initialize a query, we have the option of giving it a query string  function Query(q) {    if(typeof q !== &#39;undefined&#39; &amp;amp;&amp;amp; typeof q === &#39;string&#39;) {      this.q = q;    }  }  // attach the Query object to the window  global.Query = Query;})(this,$);Whew! That’s a lot of stuff. Let’s write a little API documentation to show you what everything does:  var query = new Query() — we can create a new “container” to hold our search query  query.set(&#39;javascript tutorial&#39;) — this is what we want to search for, for example  query.goToLocation(&#39;my-search-page&#39;) — will bring us to /my-search-page?query=javascript%20tutorial  query.get() — returns `“javascript tutorial”, in this case  query.setFromURL() — when we reached /my-search-page?query=javascript%20tutorial, we can grab the “javascript tutorial” string, and set it (internally, it says this.q = &quot;javascript tutorial&quot;)  query.getJSON(&#39;/posts.json&#39;) — this just grabs our page, /posts.json and returns the return value of $.get (this is useful because we can call query.getJSON(&#39;/posts.json&#39;).done(function() {}))Still confused? I recommend reading up first on Immediately Invoked Function Expressions.Let the user search for something&amp;lt;!-- Your search form --&amp;gt;&amp;lt;form class=&quot;search&quot;&amp;gt; &amp;lt;input type=&quot;text&quot; class=&quot;search-box&quot; id=&quot;search&quot; /&amp;gt; &amp;lt;input type=&quot;submit&quot; class=&quot;search-button&quot; value=&quot;Search&quot; /&amp;gt;&amp;lt;/form&amp;gt;I hate forms. But here, we use them for a very specific reason. It’s so that we can execute our search function both whenever the user clicks the “Search” button, or whenever the user hits the “enter” key on the keyboard. HTML has this built-in functionality. If we didn’t use a form, and just used, say, a div, we would have to write code that would listen to both the click event on the button, and the keydown event on the text box.So on all pages where there is the above search form, we should also have this JavaScript:// search.js$(function(Query) {&#39;use strict&#39;;var query = new Query();$(&#39;.search&#39;).on(&#39;submit&#39;,exec);function submit(e) {// stop the form from doing its default behaviore.preventDefault();// set the query, and go to the search page with our query URLquery.set($(&#39;.search-box&#39;).val().trim()).goToLocation(&#39;/search&#39;);}}(Query));We could easily write the above code as such:// search.jsfunction submit(e) {e.preventDefault();document.location.href=&#39;/search/?query=&#39;+$(&#39;.search-box&#39;).val().trim();}However, the only reason we’re using our custom Query object is because it separates concerns, and we’ve also created a reusable, easy-to-read and understandable module.Finally, send the requestWe’ll have the following code on our /search page:// results.js$(function(Query,utils) {var query = new Query(),site = location.protocol + &quot;//&quot; + location.host,// some utility functionsutils = utils;query.setFromURL(&#39;query&#39;).getJSON(&#39;/posts.json&#39;).done(function(data) {console.log(data);// show our results});}(Query,utils));Remember my tip about JSONLint? Seriously, use it. Open up your console, and you should see your JSON (since we wrote console.log(data) in the above code). If you don&#39;t see it, your JSON might be improperly formatted.Wait, what’s utils?utils is a little package of a function that we’ll call shade. This function will be used to color our results based on the strength of the match against our query.// utils.js;(function(global) {&#39;use strict&#39;;var utils = {shade: shade};function shade(color,percent) {//Comes from: http://stackoverflow.com/a/13542669/2714730var f=parseInt(color.slice(1),16),t=percent&amp;lt;0?0:255,p=percent&amp;lt;0?percent*-1:percent,R=f&amp;gt;&amp;gt;16,G=f&amp;gt;&amp;gt;8&amp;amp;0x00FF,B=f&amp;amp;0x0000FF;return &quot;#&quot;+(0x1000000+(Math.round((t-R)*p)+R)*0x10000+(Math.round((t-G)*p)+G)*0x100+(Math.round((t-B)*p)+B)).toString(16).slice(1);}global.utils = utils;})(this);We’ve simply wrapped it in a module, because later on we could add more methods to module (if we wanted to). For example, a custom forEach function.Step 3 — Use lunr.js and display the resultsHere comes the fun part. First, here’s the HTML for our /search page:&amp;lt;!-- /search --&amp;gt;&amp;lt;div class=&quot;search-results-count&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;ul class=&quot;search-results&quot;&amp;gt;&amp;lt;/ul&amp;gt;That’s literally it. Our JavaScript is a bit more interesting:// results.js.done(function(data) {var searchIndex,results,$resultsCount = $(&#39;.search-results-count&#39;),$results = $(&#39;.search-results&#39;),totalScore = 0,percentOfTotal;// PIECE 1// set up the allowable fieldssearchIndex = lunr(function() {this.field(&#39;title&#39;);this.field(&#39;category&#39;);this.field(&#39;content&#39;);this.ref(&#39;url&#39;);this.field(&#39;date&#39;);});// PIECE 2// add each item from posts.json to the index$.each(data,function(i,item) {searchIndex.add(item);});// PIECE 3// search for the query and store the results as an arrayresults = searchIndex.search(query.get());// PIECE 4// add the title of each post into each result, too (this doesn&#39;t come standard with lunr.js)for(var result in results) {results[result].title = data.filter(function(post) {return post.url === results[result].ref;})[0].title;}// show how many results there were, in the DOM$resultsCount.append(results.length + (results.length === 1 ? &#39; result&#39; : &#39; results&#39;) + &#39; for &quot;&#39; + query.get() +&#39;&quot;&#39;);// PIECE 5// get the total score of all items, so that we can divide each result into it, giving us a percentage$.each(results, function(i, result) {totalScore+=result.score;});// PIECE 6 &amp;amp; PIECE 7// append each result link, with a border that corresponds to a color with a strength equal to its percentage// of the total score$.each(results, function(i,result) {percentOfTotal = result.score/totalScore;$results.append(&#39;&amp;lt;li&amp;gt;&amp;lt;a href=&quot;&#39;+ site + result.ref +&#39;&quot;&amp;gt;&#39;+result.title+&#39;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&#39;);$results.children(&#39;li&#39;).last().css({&#39;border-left&#39;: &#39;20px solid &#39;+utils.shade(&#39;#ffffff&#39;,-percentOfTotal)});});});Let’s go over this in pieces:Piece 1We set up a searchIndex object, which is just an initialization of lunr. If you notice, we call this.field(), and every field actually exactly matches the fields that we have in our posts.json.Piece 2Then, we loop through our JSON objects from posts.json, and we add them to searchIndex.Piece 3We call .search(query.get()) on our lunr object, searchIndex. Remember, we called query.setFromURL(), so when we call query.get(), it returns the query string from the URLPiece 4It turns out that the results object only contains objects with a ref field. Open up your console and run your code and you’ll see what I mean. The ref field we set up to be the URL of the post. So all we’re gonna do is add the title of each post to the result object too, so that way later, we can add the a tags with the URLs and titles.Piece 5Each object also has a field called score, which lunr.js generates. This is a number between 0 and 1, which reflects the strength of the match. So if we have a match with a score of 0.09, and a match with a score of 0.0062, the one with 0.09 matched higher, based on lunr’s algorithm.Piece 6So, we’ll use a little bit of math. If we have two matches, result #1 at 0.09 and result #2 at 0.0062, the total is 0.0962, right? So result #1’s fraction of the total is result.score / totalScore, which is about 0.9355, and result #2’s is about 0.0644.Piece 7In comes our shade method. We’re gonna add a thick border to the side of each search result, and we’ll darken it by each result’s percentage. Thus, the higher strength of the match for a result, the darker the side border is, which shows the user, intuitively, that that specific match is “stronger”, since it has a “stronger” color. As a side note, when we loop through the elements and display them in a list with jQuery, the results are in order from highest score to lowest score by default (thanks to lunr.js), so the results are automatically ordered from high to low in your resulting HTML.ConclusionSo that’s it. We’ve successfully implemented a client-side only (or, mostly, since we use AJAX) search system.Benefits  We can use it on GitHub pages, or whatever hosting site you use that doesn’t support a backend with PHP, Node.js, etc.  Everything is written in JavaScript and HTML, so it’s relatively simple  We can render all the JSON ourselves (with Liquid and Jekyll), and serve it up statically  … It works.Drawbacks  Could be slow, depending on how many results you have. If you have a lot of results, you might want to consider using some loading icons or some sort of AJAX progress bar to show the progress of the loading so the user isn’t looking at a blank screen thinking nothing is happening. Also, you could display only a certain amount of results at a time, and wait to render to the second or third, etc., set of results until the user clicks a “next” button, or whatever.  JSON is finnicky. You have to render your JSON file with Liquid very detailed.  It’s a little bit hacky (using Liquid to make the JSON file)ExampleAs of the date of this post, I am using this on my website. Scroll down to the footer to utilize the search feature.CreditsThanks to christian-fei for the inspiration for the JSON creation via Liquid.Also, thanks Lunr.js!",
      "url"      : "/javascript/jekyll/tutorial/2015/03/26/getting-started-with-a-search-engine-for-your-site-no-server-required.html",
      "date"     : "2015-03-26 07:41:00 -0700"
    },
  
    {
      "title"    : "Tricks of the JavaScript for loop",
      "category" : "javascript",
      "content"	 : "I&#39;m sure you&#39;ve seen the common for loop written a thousand different ways. Well, in this post, you&#39;ll learn one readable way that is good for pretty much most instances where you&#39;ll use a for loop (some exceptions are noted, too). Oh, and scroll all the way down for a bonus snippet (we&#39;ll create something pretty cool, I think).We use the for loop generally to cycle through, say, an array of items. We can do something with each item. For example:var arr = [1,2,3,4,5];for(var i = 0; i &amp;lt; arr.length; i++) {console.log(arr[i]);}The code above obviously just increases i, starting at 0 and ending at the length of arr, which gives us the ability to access each of the items of arr by its index.How do you declare the loop?There’s frequently discussion on how to best write a for loop. There are some performance issues depending on how you write it (see this StackOverflow question), and I think a lot of it comes down to two things at the end: readability and personal style.Several ways:/*These will all ouput:12345*/var arr = [1,2,3,4,5];// #1for(var i = 0; i &amp;lt; arr.length; i++) {console.log(arr[i]);}// #2var i, len = arr.length;for(i = 0; i &amp;lt; len; i++) {console.log(arr[i]);}// #3var i = 0, len = arr.length;for(; i &amp;lt; len; i++) {console.log(arr[i]);}There are many other ways to write the loops, but those are some of the more common ones.Let’s go over all of them, briefly#1 — The problem with this one is that it might take some browsers longer because we’re “resetting” some variables each time (i.e., each iteration, the loop checks the section where we define the limit, which is oftentimes the length of an array). In fact, we can prove this:// #1var arr = [1,2,3,4,5];for(var i = 0; i &amp;lt; arr.length - i; i++) {console.log(arr[i]);}/*==&amp;gt; 1==&amp;gt; 2==&amp;gt; 3*/The engine appears to check each statement for every iteration of the loop. We can cache the variables, so in comes:#2 — This one caches the length, which could give you a little micro-optimized performance boost in some browsers. The first i definition doesn’t get “re-evaluated” at the end of each iteration. We can prove this too:// #2var i = 0, len = arr.length;for(i+=i; i &amp;lt; len; i++) {console.log(arr[i]);}/*==&amp;gt; 1==&amp;gt; 2==&amp;gt; 3==&amp;gt; 4==&amp;gt; 5*/As you can see above, i is only defined once. If it wasn’t, it would increase by itself each iteration, and we wouldn’t see every number of arr in the output. So it seems we’ve got to a nice, optimized way of writing the loop. But in comes the “personal style” element:#3 — I like the last one, because it defines everything at the top of the function, much like how I described as a best practice in my post about hoisting. You can see everything easier, and predict what is going to be used, and where. However, this is not the best style to use, if you need to re-define the length, or limit, every iteration (for instance, if you’re removing or adding items to an array). I think it also is very minimalistic and clean.// #3var i = 0, len = arr.length;for(; i &amp;lt; len; i++) {console.log(arr[i]);}Why does #3 not throw an error?The third one is strange, because we start it off with a ; all by its lonesome. Well, I think this can be explained if we accept that the second part of the loop, the i &amp;lt; // whatever part, looks to define itself by i, wherever i might be. The first part, the part where we normally declare and define i, it just that: a part where we can initialize variables. In fact, we could initialize any variables we wanted. We could even initialize the limit, or length variable, and the array itself! Check it out:for(var arr = [1,2,3,4,5], i = 0, len = arr.length; i &amp;lt; len; i++) {console.log(arr[i]);}Pretty cool, right? The initialization section of the loop provides us a space to intialize whatever we want; the syntactical benefit is that when a user looks at it, they know that i and len are directly tied to that loop. The downside I think, though, is that a beginner might be fooled into thinking that i only exists in the scope of the for loop, when in fact, even though i was initialized as part of the for loop, it still exists to whatever function scope that it’s inside. We can prove this:for(var arr = [1,2,3,4,5], i = 0, len = arr.length; i &amp;lt; len; i++) {console.log(arr[i]);}console.log(arr); // [1,2,3,4,5]console.log(i); // ==&amp;gt; 5console.log(len); // ==&amp;gt; 5Each of these sections (the first part where we initialize i, the second part, and the third part) all have names, by the way. They are called:for(/*initialization*/;/*condition*/;/*final-expression*/) {console.log(arr[i]);}So what have we learned?Well, we learned its easier when you call things by their names: initialization, condition, and final-expression.Initialization lessonsWe can use this to declare anything we want, but we don’t have to use it to declare anythingvar arr = [1,2,3,4,5], len = arr.length, i = 0;for(;i&amp;lt;len;i++) {console.log(arr[i]);}Additionally, although it may be a personal style issue, I think it’s best to declare everything at the top of the function where the for loop resides, unless you need to redefine something in the condition section, such as the length of an array.Condition lessonsWhen it comes to arrays, we’re probably better off caching the length of the array either in the initialization expression or at the top of the function in which the for loop resides. This can give some performance benefits. However, we want to keep in mind that in a function where we add or remove things from an array, we might need to redefine the condition expression of the for loop every iteration.Bonus!Let’s create a function that does a for loop for us. It eliminates the scoping issues of variables like i and len, and it feels a whole lot cleaner. In fact, this function is a simplified version of something that the Underscore.js and jQuery libraries do (jQuery has $.each). You can even see a very complicated polyfill for Array.prototype.forEach on MDN’s page. Here’s out simplified function:function forEach(arr,fn) {var i = 0, len = arr.length;if(arr.constructor === Array &amp;amp;&amp;amp; fn.constructor === Function) {for(;i&amp;lt;len;i++) {fn.call(arr,arr[i],i,arr);}}}// usage:var arr = [1,2,3,4,5];forEach(arr, function(element, index, array) {console.log(element);console.log(index);console.log(array);});/*==&amp;gt; 1==&amp;gt; 0==&amp;gt; [1,2,3,4,5]==&amp;gt; 2==&amp;gt; 1==&amp;gt; [1,2,3,4,5]==&amp;gt; 3==&amp;gt; 2==&amp;gt; [1,2,3,4,5]==&amp;gt; 4==&amp;gt; 3==&amp;gt; [1,2,3,4,5]==&amp;gt; 5==&amp;gt; 4==&amp;gt; [1,2,3,4,5]*/If you want to play around with that function, or just see if it works, open up your Developer Tools (cmd+opt+j on Mac in Chrome), copy and paste, hit enter, and voila.We could even put it in a module:;(function(win) {var utils = {forEach: forEach};function forEach(arr,fn) {var i = 0, len = arr.length;if(arr.constructor === Array &amp;amp;&amp;amp; fn.constructor === Function) {for(;i&amp;lt;len;i++) {fn.call(arr,arr[i],i,arr);}}}win.utils = utils;})(window);// usage:var myOtherModule = (function(utils) {var forEach = utils.forEach,arr = [1,2,3,4,5];forEach(arr,logEachElement);    /////function logEachElement(element,index,array) {console.log(element);console.log(index);console.log(array);}})(utils);Boom! Why all the strange semicolons? Why the weird function notation? Check out my post on weird semicolons and on a simple way to modularize dependencies for some answers to these question. Also, check out John Papa’s AngularJS style guide. It applies specifically to AngularJS, but a lot of the principles translate well into vanilla JavaScript principles.",
      "url"      : "/javascript/2015/03/24/tricks-of-the-javascript-for-loop.html",
      "date"     : "2015-03-24 15:18:00 -0700"
    },
  
    {
      "title"    : "How to show a summary of your post with Jekyll",
      "category" : "jekyll snippet",
      "content"	 : "In this little snippet, we&#39;re going to explore an option to show a summary of your blog post or article, if you&#39;re using the awesome static-site generator called Jekyll.I am using the static-site generator Jekyll to compile my website into a bunch of static files (the main benefit being a generally more secure and potentially quicker website due to a lack of server round-trips to a database).I ran across several solutions for displaying a summary or excerpt of the post in the main blog page (if you’re using the basic Jekyll theme that comes standard, it’ll probably be your index.html).Anyway, the solution I came up with is meant to allow me to control what part of the post I want to display as an excerpt. If I don’t choose a part of the post, that’s okay, it just displays a default excerpt.If you didn’t know, Jekyll uses Liquid for its templating.Example:&amp;lt;!-- index.html --&amp;gt;&amp;lt;p class=&quot;post-excerpt&quot;&amp;gt;{% if post.content contains &#39;&amp;lt;!--excerpt.start--&amp;gt;&#39; and post.content contains &#39;&amp;lt;!--excerpt.end--&amp;gt;&#39; %}{{ ((post.content | split:&#39;&amp;lt;!--excerpt.start--&amp;gt;&#39; | last) | split: &#39;&amp;lt;!--excerpt.end--&amp;gt;&#39; | first) | strip_html | truncatewords: 20 }}{% else %}{{ post.content | strip_html | truncatewords: 20 }}{% endif %}&amp;lt;/p&amp;gt;&amp;lt;!-- _posts/some-random-post.html --&amp;gt;&amp;lt;p&amp;gt;Here&#39;s all my content, and &amp;lt;!--excerpt.start--&amp;gt;here&#39;s where I want my summary to begin, and this is where I want it to end&amp;lt;!--excerpt.end--&amp;gt;.&amp;lt;/p&amp;gt;If I don’t add the comments in the post, the template with simply extract the content of the post, strip the HTML tags, and truncate it 20 words, followed by an ellipsis ....",
      "url"      : "/jekyll/snippet/2015/03/23/how-to-show-a-summary-of-your-post-with-jekyll.html",
      "date"     : "2015-03-23 02:50:00 -0700"
    },
  
    {
      "title"    : "Why do people add semicolons before modules?",
      "category" : "javascript snippet",
      "content"	 : "This post is going to discuss the reasoning behind a strange-looking syntax style that some people use when declaring JavaScript modules (in the context of immediately invoked function expressions). Simply put, the point of this trick is to get around minification issues when using other people&#39;s code (or your own).Simple answer: because of minification issues.Minification can cause modules to use each other as their arguments (unintentionally), if the developer isn’t careful.(function() {// code})()(function() {// code})();If you look closely enough at the above, you’ll see the first IIFE is missing a semicolon at the end.That means that when minified, it’ll look like this:The broken code:(function() {})()(function() {})();// (a)()(b)()The problem is that now function a is being called with function b passed in as an argument. Interesting.So, we just add a ; to the beginning of the module, and to the end. This acts as a safeguard to ensure we don’t run into that problem when we minify.So, when we try doing the above example with semicolons at the beginning and at the end, and you minify the code, you get this instead:The working code:;(function() {})();;(function() {})();The cool thing is, the above doesn’t throw any errors. In fact, JSHint won’t yell at you either.Why is this? Check out the MDN article on empty:  An empty statement is used to provide no statement, although the JavaScript syntax would expect one.So those extra semicolons are not a syntax error, because a random semicolon anywhere in the code can be interpreted as an empty statement. Cool, huh?",
      "url"      : "/javascript/snippet/2015/03/22/why-do-people-add-semicolons-before-modules.html",
      "date"     : "2015-03-22 16:34:00 -0700"
    },
  
    {
      "title"    : "Lightweight dependency modularization",
      "category" : "javascript",
      "content"	 : "So what&#39;s this post all about? We&#39;re going to examine an interesting alternative for passing dependencies between JavaScript modules. The goal is to avoid any overhead (by using libraries like RequireJS), but also to avoid attaching too many things to the global namespace...A common approachA common approach when utilizing the module pattern or something close to it, is to attach the end object to the window, or return the object inside some sort of local variable to create a namespace for your module.So you might end up having something like this:// first.module.js;(function(win) {var exports = //codewin.firstModule = exports;})(window);// several more modules...// and eventually a module that depends on firstModule// fifth.module.js;(function(win,firstModule) {// do something with firstModulevar exports = //code;win.fifthModule = exports;})(window,firstModule);&amp;lt;!-- then in your html... --&amp;gt;&amp;lt;script src=&quot;first.module.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;!-- several other modules --&amp;gt;&amp;lt;scirpt src=&quot;fifth.module.js&quot;&amp;gt;&amp;lt;/script&amp;gt;Of course, the obvious problems with this are:  You attach a lot of stuff to the global scope (this can be overcome with various techniques, though)  You have to get the order of your &amp;lt;script&amp;gt; tags pretty exact (we’re pretending we’re not using a task runner here, like gulp)… and probably several other I’m forgetting about. There are other ways to do this (a popular library like RequireJS, for example), but in my case, I wanted to try to use a basic object that would be attached to the window, and have all of my dependencies attach to that global object.A global dependencies objectFor angular-state-manager, I utilized a global object called stateManagerDependencies, or something along that line, to attach all of my modules to that would eventually go into the main stateManager module.The purpose of this was to only have one object (the stateManagerDependencies object) be attached to the global scope (i.e. window object), and that would hold all of the dependencies, as opposed to attaching each dependency to the global scope at the end of each module.// dependencies.js;(function(win) {win.stateManagerDependencies = {};})(window);// first.example.module.js;(function(dependencies) {var dependencies = dependencies;// then, use them...})(stateManagerDependencies);// etc.Obvious downsides to this approach  You’re still attaching some strangely named global object to the window  In each module that depends on the dependencies object, there is no error-checking or method to list what modules are available inside the dependencies object (a possible fix for this is to simply implement some of those methods, for example: .list(), or .checkFor(), etc.)",
      "url"      : "/javascript/2015/03/22/lightweight-dependency-modularization.html",
      "date"     : "2015-03-22 14:00:00 -0700"
    },
  
    {
      "title"    : "How do I check if a parameter was passed in to a function in JavaScript?",
      "category" : "javascript",
      "content"	 : "This post is going to talk about checking for the &quot;existence&quot; of a parameter, if we expected one to be there and how to handle this &quot;flow of control&quot;, and how we define &quot;checking for existence&quot; in the first place. The fundamental concept behind all of this, as we&#39;ll learn, is the fuzzy idea of truthiness (which is different depending on which programming language you&#39;re referring too.) We&#39;ll see that JavaScript has a very broad idea of truthiness.What’s a parameter?A parameter can also be called an argument. It’s the thing passed into a function that you do something with:function test(x) {return x + 1;}test(1); // ==&amp;gt; returns 2var two = test(1); // this variable is now set to 2But what if a function can do something without a parameter, or what if the functionality changes based on whether or not a parameter was passed in?function test(x) {if(x) {// do something} else {// do something else}}In the above example, we expect that if x “exists”, then we’ll do something; if not, we’ll do something else. But checking for existence is a little more difficult than that. It has to do with truthiness.The truth about truthinessIn if statements, JavaScript evaluates the statement to a boolean true or false, and acts accordingly. But when certain values are encountered, JavaScript “coerces” them to a boolean value. For example, these statements are all correct:These are all true:/*1 == true0 == false&#39; &#39; == true&#39;&#39; == falsenull == falseundefined == false*/There are plenty of other examples. However, you’ll notice above that we’re using the == operator. This is called the equality operator. It checks if two values are “equal”, but to do this, JavaScript coerces the types.These are all incorrect (they will evaluate to false):/*1 === true0 === false&#39; &#39; === true&#39;&#39; === falsenull === falseundefined === false*/You’ll notice a very subtle, but important, difference here: we’re using the === operator: also called the identity operator. 1 does not have the identity of true, however, it is equal to true. This is confusing at first, but this is the principle of truthiness.This brings us to a very important logical operator, the exlamation point ! (also called the “not” operator). It gives you the opposite of whatever boolean value you give.The “not” operator in action (the following statements are all true)/*!1 === false!0 === true!&#39; &#39; === false!&#39;&#39; === true!null === true!undefined === true*/You’ll notice above that we are using the strict identity operator ===. This is okay, because the ! operator coerces the values on the left side of the equation to a boolean value. So really when we say !1 === false, we’re actually saying false === false. In other words, false does have the identity of false.The “double not” (or just two “not” operators — these are also all true)/*!!1 === true!!0 === false!!&#39; &#39; === true!!&#39;&#39; === false!!null === false!!undefined === false*/The double not basically coerces each value into its equal boolean form. That’s a weird way to say it. Think of it like this: 0 == false is the same as !!0 === false.So how do we check for existence?Well, it depends on how we want to define existence. Do we want to say that the parameter doesn’t exist, if it is null,undefined,0,false, or some other non-truthy value? What if we want to pass in an empty string (&#39;&#39;) as a value?Bad example:function test(x) {if(!!x) {console.log(&#39;we passed the &quot;if&quot; test&#39;);console.log(&#39;empty strings are okay too&#39;);}}test(null); // logs nothingtest(1); // ==&amp;gt; &#39;we passed the &quot;if&quot; test&#39;; &#39;empty strings are okay too&#39;test(&#39;&#39;); // logs nothing... uh oh// By the way, if(!!x) is basically shorthand for if(x == true)So we can combine instead combine logical statements to check for our idea of existence:Better example:function test(x) {if(!!x || x === &#39;&#39;) {console.log(&#39;we passed the &quot;if&quot; test&#39;);console.log(&#39;empty strings are okay too&#39;);}}test(null); // logs nothingtest(1); // ==&amp;gt; &#39;we passed the &quot;if&quot; test&#39;; &#39;empty strings are okay too&#39;test(&#39;&#39;); // ==&amp;gt; &#39;we passed the &quot;if&quot; test&#39;; &#39;empty strings are okay too&#39;// We could even use &#39;typeof&#39;function test(x) {if(!!x || typeof x === &#39;string&#39;) {console.log(&#39;we passed the &quot;if&quot; test&#39;);console.log(&#39;empty strings are okay too&#39;);}}// the above function will output the same thingChecking strictly for undefined values:function test() {if(a) {console.log(&#39;a exists!&#39;);}}// The above function will throw a ReferenceError: a is not definedfunction test() {if(typeof a !== &#39;undefined&#39;)  {console.log(&#39;a exists!&#39;);}}// This second function won&#39;t log anything, but it also won&#39;t throw an error!In the above example, a was never declared. If a variable is never declared and you try to check for its existence, you’ll get an error. But the typeof operator is the only operator (to my knowledge) that gets around this. If you check the type of a variable that was never declared, you won’t get an error, and your program can continue.Declared vs. definedvar a; // this is a declared variable that exists; its value is undefinedvar a = true; // this is now a defined variable; its value is NO LONGER undefinedvar b;console.log(typeof b); // ==&amp;gt; undefinedconsole.log(!!b); // ==&amp;gt; falsevar c;console.log(typeof c); // ==&amp;gt; undefinedconsole.log(!!c); // ==&amp;gt; ReferenceError! Your program is dead.Best PracticeI think in this circumstance, the best practice depends on however you define “existence” in the context of your specific function. This means that you have to take into consideration the concepts of truthiness, the use of the typeof operator, the principle of declared vs. defined, etc.Keep in mind, too, that there are many ways to check the types of of variables you encounter. For example:var x = [];// x.constructor === Array// typeof x === &#39;object&#39;// x.toString() === &#39;&#39;var y = &#39;hello&#39;;// y.constructor === String// typeof y === &#39;string&#39;// y.toString() === &#39;hello&#39;This is a topic for another post, but it demonstrates how you can check the types of a variable based on your definition of existence in the context of your specific function.",
      "url"      : "/javascript/2015/03/20/how-do-i-check-if-a-parameter-was-passed-in-to-a-javascript-function.html",
      "date"     : "2015-03-20 15:39:00 -0700"
    },
  
    {
      "title"    : "What is hoisting in JavaScript?",
      "category" : "javascript",
      "content"	 : "What is this strange word &quot;hoisting&quot;? As of the current version of JavaScript (ECMAScript5), there&#39;s not really such a thing as block scope, which is something common to lots of other programming languages (there is a caveat though, which we&#39;ll learn towards the end of this post.) Hoisting and the non-existence of &quot;block scope&quot; can be confusing. Learn how to overcome this issue.Hoisting is small concept that’s pretty importantHoisting is a concept that really defines a fundamental principle of JavaScript: there’s no such thing as block scope.What does that mean? Well, we know there’s a thing called function scope:Function scope example// This area out here is our &quot;global scope&quot;var globalVariable = [0,1,2,3];function testFunction() {//This area in here is our &quot;function scope&quot;// We can access variables from the global scopeconsole.log(globalVariable) // ==&amp;gt; [0,1,2,3]// &quot;var&quot; makes this variable only exists inside the functionvar hello = &#39;hello&#39;;// since there&#39;s no &quot;var&quot; keyword,// we might as well have put this variable in the global scopeanotherVariable = &#39;anotherVariable&#39;; }console.log(hello) // ==&amp;gt; undefinedconsole.log(anotherVariable) // ==&amp;gt; &#39;anotherVariable&#39;… Easy.But how do we define block scope? In some other languages, it might be whatever is inside an if statement or a for loop. But that doesn’t exist in JavaScript (well, with a caveat, which we’ll go over in a later section):If-statement examplefunction testFunction(num) {if(num &amp;lt; 5) {console.log(&#39;less than five&#39;);} else {console.log(&#39;greater than or equal to five&#39;);}}testFunction(4); // ==&amp;gt; &#39;less than five&#39;The above example is super easy to understand. But let’s try and do something else with it.Trying to use block scope in JavaScriptfunction test() {if(/* something */) {var foo = &#39;bar&#39;;console.log(&#39;foo&#39;); // ==&amp;gt; &#39;bar&#39;}console.log(&#39;foo&#39;); // ==&amp;gt; &#39;bar&#39;}In the above example, if you didn’t know any better and you thought JavaScript had block scope, you might assume that the variable foo only exists inside the if block. But it doesn’t. In fact, even if the condition in the if statement evaluated to false, the variable foo would still exist to the entire function, but it just would not be set to &#39;bar&#39; (it would actually just remain undefined).So what’s hoisting then?Anything defined inside of a block is actually “hoisted” up to the function scope of whatever function you’re in.function test() {if(/* something */) {var foo;}}// it gets evaluated to something like this:function test() {var foo;if(/* something */) {// do something}}Anything you declare inside of a block (whether it’s a function, a string, an array, or whatever), it is available to the entire scope. Blocks simply evaluate those variable to whatever you say, when a certain condition is met.Best PracticeIn my opinion, declaring all variables that will, or even just might, be later defined within your function should happen at the top of the function. Some arguments against this might cite possible performance issues, but that might be going into the arguments of micro-optimization vs readability.  In my opinion, declaring all variables that will, or even just might, be later defined within your function should happen at the top of the functionI humbly assert this opinion because I think it helps immensely with code readability, especially with large, wordy functions, and understanding ahead of time what is going to happen and what certain variable might get new definitions.function someFunction() {var test, test1, test2, test3;if(/* something */) {test = 0;} else if (/* something */) {test1 = 0;} else if (/* something */) {test2 = 0;} else if (/* something */) {test3 = 0;}}In the above example, you know all the variables ahead of time, even though only one of them might actually be set to something else other than undefined (in this case, only one of those variables might be set to 0).To me, this looks like it could get confusing:function someFunction() {if(/* something */) {var test = 0;} else if (/* something */) {var test1 = 0;} else if (/* something */) {var test2 = 0;} else if (/* something */) {var test3 = 0;}}While this is a small, manufactured function that probably doesn’t make sense and probably does a whole lot of nothing, in a lengthier function, someone else who reads the code might see a new variable definition, and have trouble understanding the context or the use. Additionally, all those variable declarations will get hoisted to the top of the function anyway. You’ll still have three variables that are undefined, and only one that is set to 0, but the code just happens to be more confusing.Small caveat regarding letIf you use the keyword let in place of var, everything I just wrote in this blog post is null and void. let allows you to declare and/or define a block-scoped variable (see the MDN page, which says “The let statement declares a block scope local variable, optionally initializing it to a value.”)Note this warning on the MDN page as well:  The let block and let expression syntax is non-standard and will be removed in the future. Do not use them!",
      "url"      : "/javascript/2015/03/20/what-is-hoisting-in-javascript.html",
      "date"     : "2015-03-20 10:31:00 -0700"
    }
  
]