<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Front End Collision</title>
    <description>Website and blog of full-stack JavaScript developer, Josh Beam.
</description>
    <link>http://joshbeam.github.io/</link>
    <atom:link href="http://joshbeam.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 17 Jan 2016 23:35:12 -0800</pubDate>
    <lastBuildDate>Sun, 17 Jan 2016 23:35:12 -0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Brutal Rainbows: intro to password hashing</title>
        <description>&lt;!--excerpt.start--&gt;
&lt;p&gt;We never store plaintext passwords in a database. This is because I could steal a database admin’s password, and then login to the database and steal all the users’ passwords. So how do we store passwords, if we can’t store passwords?
&lt;!--excerpt.end--&gt;&lt;/p&gt;

&lt;p&gt;We use “one way hashing”. I usually need to use Google for math, so if you would like to hear from a really smart person, I would recommend watching &lt;a href=&quot;https://www.youtube.com/watch?v=jzY3m5Kv7Y8&quot;&gt;Everything you need to know about cryptography in 1 hour by Colin Percival on YouTube&lt;/a&gt; (the video is actually almost 2 hours). If you don’t have 2 hours to spare, I will say one of the important points he makes is that right now, you should only use at least SHA-256 for hashing (it’s 2016 at the time of writing this, so if you are reading this from the future, I would suggest using whichever algorithm crypto experts recommend in your current decade).&lt;/p&gt;

&lt;p&gt;Here’s an example of a SHA-256 hash:&lt;/p&gt;

&lt;pre&gt;
password =&amp;gt; 5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8
&lt;/pre&gt;

&lt;p&gt;I happened to just use this sketchy website to generate this hash online: &lt;a href=&quot;http://www.lorem-ipsum.co.uk/hasher.php&quot;&gt;hash generator with optional salt&lt;/a&gt; (I’ll go over salts in a little bit).&lt;/p&gt;

&lt;p&gt;So if one of your users’ password is &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;, the hash above will be stored in your database. Any time they login, you convert the password they input to your login form (sent over &lt;a href=&quot;/encryption/2016/01/17/breaking-down-https.html&quot;&gt;HTTPS&lt;/a&gt;, of course) to a SHA-256 hash, and your server will just check if the hash they sent matches the hash in the database.&lt;/p&gt;

&lt;h1 id=&quot;why-use-a-hash-at-all-though&quot;&gt;Why use a hash at all, though?&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;We use hashes because it’s very unlikely to find two different things that will result in the same hash, and it’s really hard to figure out what it was that created the hash (like, really, really, hard).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solving hashes is a factor of computational power, money, and opportunity.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At this point, you might be asking, why is a hash any more safe than just storing the password? Most people will give you this answer (from &lt;a href=&quot;http://stackoverflow.com/a/4014407/2714730&quot;&gt;Is it safe to ignore the possibility of SHA collisions in practice? on StackOverflow&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The usual answer goes thus: what is the probability that a rogue asteroid crashes on Earth within the next second, obliterating civilization-as-we-know-it, and killing off a few billion people?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, given the current power of computers today, people say that the possibility of finding two different words, sentences, messages, or whatever, that end up as the same SHA-256 hash is less than the probability of a rogue asteroid crashing onto earth in the next second, etc.&lt;/p&gt;

&lt;p&gt;This is speculative at best without knowing how the actual algorithm works. However, I can link you to &lt;a href=&quot;http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf&quot;&gt;the specification from the National Institute of Standards and Technology&lt;/a&gt;, and warn you that reading that is about as dry as… whatever something really dry is. This algorithm (Secure Hash Algorithm) was design by the NSA (see the &lt;a href=&quot;https://en.wikipedia.org/wiki/SHA-2&quot;&gt;page on Wikipedia&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Schneier on Security has an interesting article called &lt;a href=&quot;https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html&quot;&gt;“When Will We See Collisions for SHA-1?”&lt;/a&gt;. This is for SHA-1, remember, but the examples are still relevant.&lt;/p&gt;

&lt;p&gt;He quotes something interesting (about SHA-1, mind you), to point out that previous algorithms are becoming less secure, and that solving them is a factor of computational power, money, and opportunity:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A collision attack is therefore well within the range of what an organized crime syndicate can practically budget by 2018, and a university research project by 2021.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;guessing-passwords&quot;&gt;Guessing passwords&lt;/h1&gt;

&lt;p&gt;You have to keep in mind, too, how long it takes to “brute force” a password. This means that an attacker can tell his computer to go through every possible password that there could be, and try all of those passwords until he finds the correct one. Just as an interesting mental exercise, there’s an online &lt;a href=&quot;https://www.grc.com/haystack.htm&quot;&gt;brute force calculator&lt;/a&gt; that tries to tell you how many “computing years” it would take to brute force a certain password. Now, I link to this in caution, because there are many variables involved, but nonetheless, it’s interesting to look at:&lt;/p&gt;

&lt;pre&gt;
password =&amp;gt; 2.17 seconds (doing 100 billion guesses per second)
&lt;/pre&gt;

&lt;p&gt;Now, what happens if we put the hash in the calculator instead?&lt;/p&gt;

&lt;pre&gt;
5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8 =&amp;gt; 13.12 million trillion trillion trillion trillion trillion trillion centuries (doing 100 billion guesses per second)
&lt;/pre&gt;

&lt;p&gt;Woah. However, there are other considerations. What if the first guess is correct? Good question, and you’re right. The above calculator only gives times for how long to search the entire character space would take. If we get the answer on the first guess, then it’s irrelevant.&lt;/p&gt;

&lt;p&gt;Also, keep in mind, lots of web services and applications try to secure passwords from being brute forced by locking you out of your account after you get your password wrong several times in a row.&lt;/p&gt;

&lt;p&gt;But wait a second, what if someone has a list of thousands and thousands of words, and their corresponding hashes? I’m glad you asked. This is a real thing: it’s called a “rainbow table”.&lt;/p&gt;

&lt;h1 id=&quot;rainbow-tables&quot;&gt;Rainbow tables&lt;/h1&gt;

&lt;p&gt;From &lt;a href=&quot;https://en.wikipedia.org/wiki/Rainbow_table&quot;&gt;Rainbow table on Wikipedia&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A rainbow table is a precomputed table for reversing cryptographic hash functions, usually for cracking password hashes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There’s an interesting website called &lt;a href=&quot;https://crackstation.net/&quot;&gt;CrackStation&lt;/a&gt; that we can use for another practical exercise. It gives you a box where you can input a SHA-256 hash, and it will try and guess the corresponding password. But wait, I thought that it takes 13.12 million trillion trillion trillion trillion trillion trillion centuries to guess? That would be true, if we didn’t already have a table of thousands of words and their corresponding hashes, as mentioned above:&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/images/hash-cracker.png&quot; width=&quot;66%&quot; /&gt;&lt;/center&gt;

&lt;p&gt;Interesting. So, how do we get around this?&lt;/p&gt;

&lt;h1 id=&quot;getting-salty&quot;&gt;Getting salty&lt;/h1&gt;

&lt;p&gt;From &lt;a href=&quot;https://en.wikipedia.org/wiki/Salt_(cryptography)&quot;&gt;Salt (cryptography) on Wikipedia&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The primary function of salts is to defend against dictionary attacks versus a list of password hashes and against pre-computed rainbow table attacks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first thing you want to keep in mind is that you want your password to be something that is unlikely to exist in a rainbow table. I won’t make any specific suggestions on this, as there is a wide range of advice, but I will link you to &lt;a href=&quot;https://www.schneier.com/blog/archives/2014/03/choosing_secure_1.html&quot;&gt;Choosing Secure Passwords from Schneier on Security&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Aside from that, you might notice that every person who has the password “password” will have the same hash in the database.&lt;/p&gt;

&lt;p&gt;This is bad too. If the attacker sees that &lt;code class=&quot;highlighter-rouge&quot;&gt;user.hash&lt;/code&gt; for 15 people is &lt;code class=&quot;highlighter-rouge&quot;&gt;5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8&lt;/code&gt;, and he uses a rainbow table to figure out that the corresponding password is &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;, then he didn’t even have to lookup those 15 peoples’ hashes separately. They all have the same password.&lt;/p&gt;

&lt;p&gt;A common thing is to use a “salt”, which is just some random information attached to the beginning or end of the password, which is different for each user. This should be “cryptographically random” according to most general knowledge (for example, by using &lt;code class=&quot;highlighter-rouge&quot;&gt;crypto.randomBytes(16)&lt;/code&gt; in Node.js) (see &lt;a href=&quot;https://coolaj86.com/articles/symmetric-cryptography-aes-with-webcrypto-and-node-js/&quot;&gt;Symmetric Cryptography (AES) with WebCrypto and Node.js from CoolAJ86&lt;/a&gt; for some other examples).&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;https://en.wikipedia.org/wiki/Salt_(cryptography)&quot;&gt;Salt (cryptography) on Wikipedia&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A new salt is randomly generated for each password. In a typical setting, the salt and the password are concatenated and processed with a cryptographic hash function&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How do we salt a password?&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/images/salty.png&quot; width=&quot;66%&quot; /&gt;&lt;/center&gt;

&lt;p&gt;This means our password will actually be this:&lt;/p&gt;

&lt;pre&gt;
passwordsalty =&amp;gt; 29d6afd14bbcdf0b43d1f2c4fd8ecbe8bdedd5ee255e5fa530a3fb968cbbfa1a
&lt;/pre&gt;

&lt;p&gt;Now if we have 3 users with the same password and we salt them randomly, we would have:&lt;/p&gt;

&lt;pre&gt;
passwordsalty =&amp;gt; 29d6afd14bbcdf0b43d1f2c4fd8ecbe8bdedd5ee255e5fa530a3fb968cbbfa1a

passwordverysalty =&amp;gt; af88afca3aaa435827396518fa2e2429ce42130904b118fee0f714894da0f546

passwordkindofsalty =&amp;gt; c18b77bedee11a6f1d55d54fedb7a9c4578faece96165734c0d5a5bc53bacda6
&lt;/pre&gt;

&lt;p&gt;In other words, even though 15 users might have the same password, we’re forcing each password to be different (however, the user doesn’t need to remember the salt, which is cool). We’re enforcing password uniqueness without forcing the user to do anything different.&lt;/p&gt;

&lt;p&gt;Remember, though, what I just mentioned?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The first thing you want to keep in mind is that you want your password to be something that is unlikely to exist in a rainbow table.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What if the salted password exists in the rainbow table too? Another great question, and you’re right:&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/images/password-salty.png&quot; width=&quot;66%&quot; /&gt;&lt;/center&gt;

&lt;h1 id=&quot;to-conclude&quot;&gt;To conclude&lt;/h1&gt;

&lt;p&gt;Again, I’ll leave recommendations for specifically how to choose a password and how to salt them to the crypto experts, but it’s useful to outline considerations as shown above, which may help readers to understand why we’ve come up with certain ways to try to store passwords in databases securely.&lt;/p&gt;

&lt;p&gt;By the way, if this helps you sleep better at night, I was able to find a salted SHA-256 password hash that doesn’t exist in that online rainbow table:&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/images/not-in-rainbow-table.png&quot; width=&quot;66%&quot; /&gt;&lt;/center&gt;

&lt;p&gt;Not telling you what it was though, lest it end up in your rainbow table.&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Jan 2016 05:49:00 -0800</pubDate>
        <link>http://joshbeam.github.io/encryption/2016/01/17/intro-to-password-hashing.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/encryption/2016/01/17/intro-to-password-hashing.html</guid>
        
        
        <category>encryption</category>
        
      </item>
    
      <item>
        <title>Breaking down HTTPS</title>
        <description>&lt;!--excerpt.start--&gt;
&lt;p&gt;What is HTTPS, and why is it any more secure than HTTP? What is TLS, RSA, symmetric and asymmetric encryption, and what happens when I send my credit card over a secure connection so that I can buy Game of Thrones with the sole intention of binge watching the entire season in one evening? This article will attempt to answer those questions (but not the one about your obsession with Game of Thrones).
&lt;!--excerpt.end--&gt;&lt;/p&gt;

&lt;h1 id=&quot;who-is-this-for&quot;&gt;Who is this for?&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Intended audience&lt;/strong&gt;: Anyone who knows what basic HTTP (not secure) is, and…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You want to know what makes HTTPS any more secure&lt;/li&gt;
  &lt;li&gt;You also want to know what terms like RSA, TLS, asymmetric, and symmetric actually mean&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’ll have a head start if you’ve ever purchased a domain certificate in the past from someone like Comodo or GoDaddy, or if you already know that HTTPS protects your communications over the internet and want to know how that actually works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time to read&lt;/strong&gt;: 20 minutes of uninterrupted reading.&lt;/p&gt;

&lt;h1 id=&quot;how-did-you-get-this-information&quot;&gt;How did you get this information?&lt;/h1&gt;

&lt;p&gt;Lots of reading and some software engineering. I obtained all this information from various sources on the internet (some of which may or may not be canonical), like various &lt;a href=&quot;http://stackexchange.com/&quot;&gt;StackExchange&lt;/a&gt; websites, &lt;a href=&quot;http://robertheaton.com/2014/03/27/how-does-https-actually-work/&quot;&gt;Robert Heaton’s blog&lt;/a&gt;, &lt;a href=&quot;https://www.schneier.com/&quot;&gt;Schneier on Security&lt;/a&gt;, and &lt;a href=&quot;https://wikipedia.com&quot;&gt;Wikipedia&lt;/a&gt;. If you are generally skeptical of the veractiy of online sources which may or may not be opinionated, you’ll find some various specs and canonical references scattered throughout this article.&lt;/p&gt;

&lt;p&gt;If you want to see a step by step breakdown of an actual HTTPS request, I recommend &lt;a href=&quot;http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html&quot;&gt;The First Few Milliseconds of HTTPS by Moserware&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;I recently read a great &lt;a href=&quot;http://robertheaton.com/2014/03/27/how-does-https-actually-work/&quot;&gt;article by Robert Heaton (an engineer at Stripe), “How does HTTPS actually work?”&lt;/a&gt;. I would definitely recommend giving it a read.&lt;/p&gt;

&lt;p&gt;I wanted to extend off of some of the concepts a bit, and give some examples of how authenticity and encryption work on a very basic level within the context of communicating over the internet. &lt;strong&gt;I’ll do this by giving a simplified example of the HTTPS flow using asymmetric and symmetric encryption algorithms&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For starters, I want to breakdown some terminology. Stay with me, we’ll clarify the whole HTTPS process again later:&lt;/p&gt;

&lt;h1 id=&quot;tls&quot;&gt;TLS&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Related: &lt;a href=&quot;http://security.stackexchange.com/a/5127/45897&quot;&gt;What’s the difference between SSL, TLS, and HTTPS? on StackExchange&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;TLS (previously SSL) is the entire process used for secure communications over the internet. As you know, HTTP is the protocol used for clients and servers to exchange information (any type of information: sending HTML to the client, sending requests for, say, JSON to the server).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When HTTP implements TLS, we call it HTTPS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;TLS uses RSA for &lt;strong&gt;asymmetric cryptography&lt;/strong&gt; (one part of what makes TLS secure). RSA in this case is &lt;em&gt;only&lt;/em&gt; used for the initial connection to verify &lt;em&gt;authenticity&lt;/em&gt; (the “handshake”, we call it). This is important! TLS also uses &lt;strong&gt;symmetric cryptography&lt;/strong&gt;. This second form of cryptography is how messages (like sensitive login details or your credit card number) are actually encrypted and sent back and forth after the initial authenticity verification happens.&lt;/p&gt;

&lt;p&gt;Wait, wait, wait. &lt;strong&gt;Why don’t we just keep using RSA (our asymmetric cryptography) to send all of our messages back and forth? I’ll answer that soon. Keep reading.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;rsa&quot;&gt;RSA&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Related: &lt;a href=&quot;https://en.wikipedia.org/wiki/RSA_(cryptosystem)&quot;&gt;RSA (cryptosystem) on Wikipedia&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-it-is&quot;&gt;What it is&lt;/h2&gt;

&lt;p&gt;It’s an algorithm. Specifically, it is the algorithm we choose to use for private and public keys. These two keys are different, and anything you encrypt with a public key can only be decrypted with the corresponding private key and vice-versa. We call this &lt;strong&gt;asymmetric cryptography&lt;/strong&gt;. There are &lt;a href=&quot;http://security.stackexchange.com/a/54188/45897&quot;&gt;other algorithms&lt;/a&gt; besides RSA, but RSA is the most popular.&lt;/p&gt;

&lt;p&gt;It is important to note that calling a key “public” or “private” really only has to do with its availability to one person or multiple people.&lt;/p&gt;

&lt;p&gt;Another important thing to note is that when we “encrypt” with a private key, we always call this &lt;strong&gt;signing&lt;/strong&gt;, because thousands of people may have the corresponding public key (which is the whole point). When this is the case, we can’t expect to actually “encrypt” a message with the private key, since anyone with the public key could “decrypt” that message: all we’re doing by signing is proving that it came from the person who has the private key (only one person has the private key). This is only &lt;strong&gt;verifying authenticity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;However, when we encrypt something with the &lt;em&gt;public key&lt;/em&gt;, we in fact do call this “encryption”. This is because only one person can decrypt the message: the person who has the private key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When we encrypt something with a private key, we always call it “signing”. When we encrypt something with a public key, we always call it “encrypting”.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There is a comment I read to an answer on &lt;a href=&quot;http://stackoverflow.com/a/28084950/2714730&quot;&gt;SHA1 VS RSA: what’s the difference between them?&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You shouldn’t talk about encryption with a private key when you mean signatures.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, to really &lt;a href=&quot;http://stackoverflow.com/a/408466/2714730&quot;&gt;drive this point home&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Quick point of terminology: the public key isn’t used to decrypt a message encrypted with the private key: it’s used to verify (the signature of) a message that has been signed with the private key. Decrypting is done with the private key, following encryption with the private key. (It doesn’t make sense to encrypt something with the private key, so that anyone can decrypt it with the public key.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-it-isnt&quot;&gt;What it isn’t&lt;/h2&gt;

&lt;p&gt;It is not a hashing algorithm. Again, refer to the above &lt;a href=&quot;http://stackoverflow.com/questions/733692/sha1-vs-rsa-whats-the-difference-between-them&quot;&gt;SHA1 VS RSA: what’s the difference between them? on StackOverflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The same applies for SHA2 (SHA-256), etc. For some reason, RSA and hashing algorithms get mixed up easily.&lt;/p&gt;

&lt;p&gt;RSA is the algorithm for creating public and private key-pairs. SHA2 (which is another name for SHA-256, by the way), for example, might be used to hash a password to store it in a database. If you are unfamiliar with this, please read &lt;a href=&quot;/encryption/2016/01/17/intro-to-password-hashing.html&quot;&gt;this article of mine&lt;/a&gt; (it should take about 10 minutes), and then come back here. It’s important to understand what RSA isn’t.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;Here’s a fake example of asymmetric cryptography:&lt;/p&gt;

&lt;pre&gt;
Private key:                            abc
Public key:                             xyz
Message we will &quot;encrypt&quot;:              hello world

Output when signed by private key:      asdfghj
Output when verified by public key:     hello world
(OK cool, since we could verify it, it came from the owner of the private key)

Output when encrypted by public key:    zxcvbnm
Output when decrypted by private key:   hello world
&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;OK cool, since we could verify it, it came from the owner of the private key&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wait, what? If you didn’t know what the message was in the first place, how do you know it was really supposed to say &lt;code class=&quot;highlighter-rouge&quot;&gt;hello world&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;As you might notice above, we have to have some sort of expectation of what the message &lt;em&gt;should&lt;/em&gt; look like. We have to know that the message is supposed to be “hello world” in the first place. So what we do is send the original message along with a “digital signature”, which is simply the signed (remember, we don’t say encrypted when we encrypt something with a private key) version of the message. Then you just use the public key to verify (again remember, we don’t “decrypt” with a public key) the attached signature to make sure it matches the plain-text message.&lt;/p&gt;

&lt;p&gt;Here is a fake example of how that would look:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;hello world&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;privateKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; a5dc78923jhbc&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;certificate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;certificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; hello worlda5dc78923jhbc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When we send that message to someone, they parse out the digital signature (the &lt;code class=&quot;highlighter-rouge&quot;&gt;a5dc78923jhbc&lt;/code&gt; part), and then verify and hash the original themselves to check if they are the same thing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;a5dc78923jhbc&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;publicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sha256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;hello world&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In reality, certificates (such as the popular X.509 certificate) contain a different message, and the content of the digital signature is different. Here is &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc2459.txt&quot;&gt;the X.509 rfc&lt;/a&gt;, which echos the point above about hashing and then signing:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The data to be signed (e.g., the one-way hash function output value) is formatted for the signature algorithm to be used.  Then, a private key operation (e.g., RSA encryption) is performed to generate the signature value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are some unanswered questions here, like, how do we know who this certificate actually came from. Could someone just copy and paste someone else’s certificate and send it (I don’t mean the private key; I mean the signature, which is public and attached to the certificate, which is also public)? More on this in a sec.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://coolaj86.com/articles/asymmetric-public--private-key-encryption-in-node-js/&quot;&gt;Asymmetric Public / Private Key Encryption (RSA) in Node.js&lt;/a&gt; puts it very well:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Public keys Encrypt &amp;amp; Verify&lt;/p&gt;

  &lt;p&gt;Private keys Sign &amp;amp; Decrypt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;symmetric-cryptography&quot;&gt;Symmetric cryptography&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Related: &lt;a href=&quot;https://en.wikipedia.org/wiki/Caesar_cipher&quot;&gt;Caesar cipher (Wikipedia)&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;example-1&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;On a high level, symmetric cryptography is something like this:&lt;/p&gt;

&lt;pre&gt;
Plain:    ABCDEFGHIJKLMNOPQRSTUVWXYZ
Cipher:   XYZABCDEFGHIJKLMNOPQRSTUVW
&lt;/pre&gt;

&lt;pre&gt;
HELLO WORLD =&amp;gt; EBIIL TLOIA
&lt;/pre&gt;

&lt;p&gt;If we both know the cypher, we can encrypt and decrypt messages.&lt;/p&gt;

&lt;p&gt;The client and server will decide which symmetric algorithm they want to use (thankfully, the Caesar Cipher is not one of the available options). A popular one is &lt;a href=&quot;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&quot;&gt;AES&lt;/a&gt;, and the one used before that was &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_Encryption_Standard&quot;&gt;DES&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To give an AES example in code (adapted from &lt;a href=&quot;http://lollyrock.com/articles/nodejs-encryption/&quot;&gt;Encrypt and decrypt content with Nodejs&lt;/a&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;crypto&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;algorithm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;aes-256-ctr&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randomBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cipher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createCipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;utf8&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;hex&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;encrypted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;final&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;hex&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encrypted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decipher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createDecipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;hex&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;utf8&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;decipher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;final&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;utf8&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In other words, we’re created a key: a bunch of &lt;a href=&quot;http://stackoverflow.com/a/2450098/2714730&quot;&gt;cryptographically random bytes&lt;/a&gt; –&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A cryptographically secure number random generator, as you might use for generating encryption keys, works by gathering entropy - that is, unpredictable input - from a source which other people can’t observe.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then we used AES-256 to use that key to encrypt our message. If we share that key, we can also decrypt that message.&lt;/p&gt;

&lt;pre&gt;
Message:           hello world
Password:          2d00cd9bd332cef43a41d80ef31b9ebb
Encrypted message: 940f1f7e63f7bc229169fa 
&lt;/pre&gt;

&lt;p&gt;Symmetric algorithms are generally more efficient than their asymmetric counterparts, but we can’t send a session key (a symmetric shared key) over a non-secure network connection and expect any information encrypted with it to be secure. This is why we start off first with asymmetric encryption, and then end up using symmetric encryption for the rest of the time we’re connected. More on this in a sec.&lt;/p&gt;

&lt;h1 id=&quot;revisiting-the-https-flow&quot;&gt;Revisiting the HTTPS flow&lt;/h1&gt;

&lt;p&gt;Keeping it basic, here is essentially what happens when you visit a site that has &lt;code class=&quot;highlighter-rouge&quot;&gt;https://&lt;/code&gt; in the URL (I’m shortening this into 2 broad steps, but just know that there is more going on at a lower level):&lt;/p&gt;

&lt;h2 id=&quot;step-1-of-2-server-proves-its-authenticity-by-sending-a-signed-certificate&quot;&gt;Step 1 of 2: Server proves its authenticity by sending a signed certificate&lt;/h2&gt;

&lt;p&gt;Remember in the RSA section above where we asked, “how do we know who actually sent the certificate”? Even if there is a signature present, this only proves that the message was somehow signed by the server’s private key. But couldn’t anyone simply copy and paste a valid certificate and send it, pretending to be say, www.microsoft.com? Yes, but remember, the moment you encrypt something with Microsoft’s public key and send it back to the original sender, they will not be able to decrypt it (given that they don’t have the correct private key). Also, we rely on outside constraints like DNS servers to make sure the traffic is routed correctly.&lt;/p&gt;

&lt;p&gt;Another example of this is in real life: you could write a new employment agreement granting yourself double your current salary, create a stamp of your boss’s signature, then stamp the memo and send it to HR. It looks like it came from your boss, but HR needs to check to make sure it actually did.&lt;/p&gt;

&lt;p&gt;We can also sign certificates with as many signatures as we want, belonging to whomever we want.&lt;/p&gt;

&lt;p&gt;Remember, your browser comes pre-installed with “root certificates” that you automatically trust. So, if the server bought its certificate from GoDaddy, the certificate can be signed with, say, GoDaddy’s private key as well as the server’s private key, and you use those two corresponding public keys to check the certificate (in other words, you’re checking that the certificate came from the server since only the server should have its private key, and you also check that the server bought their certificate from someone you trust already, like GoDaddy – we call them the “Certificate Authority”). In other word, we can have any number of people sign the certificate. This is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Chain_of_trust&quot;&gt;Chain of trust (Wikipedia)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As Heaton notes (in an example of Symantec hypothetical being the CA for Microsoft):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Symantec will have taken steps to ensure the organisation they are signing for really does own Microsoft.com, and so given that your client trusts Symantec, it can be sure that it really is talking to Microsoft Inc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To simplify things, here are some ways we can check that the certificate in fact was sent by the correct server (instead of an attacker just copy and pasting an entire certificate and sending it to you, adapted from a &lt;a href=&quot;http://stackoverflow.com/a/188308/2714730&quot;&gt;fantastic answer&lt;/a&gt; to “How are ssl certificates verified?” on StackOverflow):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The certificate is signed by a CA, any intermediate signatures, and the server’s private key.&lt;/li&gt;
  &lt;li&gt;Your browser uses the pre-installed certificates to verify any CA signatures in the server’s certificate.&lt;/li&gt;
  &lt;li&gt;The certificate contains an IP address or domain name, and the browser checks this is the server with which there is an open connection.&lt;/li&gt;
  &lt;li&gt;The client encrypts the symmetric key (more on this in a second) with the server’s public key; only the server can decrypt this.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;From &lt;a href=&quot;http://robertheaton.com/2014/03/27/how-does-https-actually-work/&quot;&gt;Heaton’s article&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that the server is also allowed to require a certificate to prove the client’s identity, but this typically only happens in very sensitive applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;step-2-of-2-the-server-and-client-start-using-symmetric-encryption&quot;&gt;Step 2 of 2: The server and client start using symmetric encryption&lt;/h2&gt;

&lt;p&gt;The client encrypts a “password” (the session key that will be used from now on to decrypt each others’ messages) and sends it to the server. Remember, the server can only decrypt this message containing the session key if the server actually has the corresponding private key, which is another cool security measure.&lt;/p&gt;

&lt;p&gt;So to answer a question from earlier, &lt;strong&gt;why don’t we just keep using RSA (our asymmetric cryptography) to send all of our messages back and forth?&lt;/strong&gt; Essentially, asymmetric encryption is less efficient than symmetric encryption. Some of these reasons include:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://crypto.stackexchange.com/a/5790&quot;&gt;Why is asymmetric cryptography bad for huge data? on Crypto StackExchange&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Size of cryptogram: symmetric encryption does not increase the size of the cryptogram (asymptotically), but asymmetric encryption does […] it is safe to say that a symmetric scheme is orders of magnitude faster and less power hungry than an asymmetric one, at least for decryption (some asymmetric schemes, including RSA with low public exponent, are considerably faster on the encryption side than they are on the decryption side, and can approach the throughput of some symmetric cryptography).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Someone mentioned succinctly from &lt;a href=&quot;http://stackoverflow.com/a/4469258/2714730&quot;&gt;How does SSL use symmetric and asymmetric encryption? on StackOverflow&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Asymmetric encryption is necessary to verify the others identity and then symmetric encryption gets used because it’s faster.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Remember too initially that a server can’t encrypt messages with the private key since anyone with the public key could read them. This would mean that the server would need to have the client’s public key as well so that the server could actually encrypt messages.&lt;/p&gt;

&lt;p&gt;From now on, since the client and server both have a shared password (the “session key”), they can both encrypt and decrypt messages with it.&lt;/p&gt;

&lt;p&gt;In our example from the “symmetric encryption” section (these are actual AES-encrypted keys and messages):&lt;/p&gt;

&lt;pre&gt;
Message:                      hello world
Session secret (password):    2d00cd9bd332cef43a41d80ef31b9ebb
Encrypted message:            940f1f7e63f7bc229169fa 
&lt;/pre&gt;

&lt;p&gt;Remember, since the client sent the server the session secret (by encrypting it asymmetrically first by using the server’s public key), &lt;strong&gt;the server and client both now used this shared session secret from now on&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;a-note-on-trust&quot;&gt;A note on trust&lt;/h1&gt;

&lt;p&gt;Part of the Chain of Trust depends on us having pre-installed root certificates that we implicitly trust. That means I could make a certificate and install it on someone’s computer, and then pretend to be the server they are requesting something from. This is a classic “man in the middle” attack.&lt;/p&gt;

&lt;p&gt;You can use &lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles Proxy&lt;/a&gt; to test your native app API. Essentially, your’re performing a MITM attack against your own app. To understand this, check out &lt;a href=&quot;http://nickfishman.com/post/50557873036/reverse-engineering-native-apps-by-intercepting-network&quot;&gt;Reverse Engineering Native Apps by Intercepting Network Traffic&lt;/a&gt; (this was also linked at the end of Heaton’s article above, but I’d like to link to it as well since it is very relevant). You can also use Charles Proxy to perform a MITM attack on one of your co-workers. Remember there are &lt;a href=&quot;https://en.wikipedia.org/wiki/Electronic_Communications_Privacy_Act&quot;&gt;laws against this&lt;/a&gt; (also see &lt;a href=&quot;http://www.hackerlaw.org/?page_id=55&quot;&gt;Hacker Law&lt;/a&gt;). Or your boss could monitor all of your internet traffic (there is probably a clause in your employment agreement allowing your IT department to perform MITM attacks on you). There’s even an article called &lt;a href=&quot;http://www.entrepreneur.com/article/223686&quot;&gt;3 Tips for Legally and Ethically Monitoring Employees Online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, I mentioned above something about “buying a certificate”. If you haven’t purchased a certificate before in order to enable HTTPS on your custom domain, here’s how it works (I’ve bought 3 or 4 certificates from different providers in the past). Some providers (like &lt;a href=&quot;https://www.comodo.com/&quot;&gt;Comodo&lt;/a&gt;) offer a free 90-day certificate where they don’t really verify much about you. On the other hand, you can buy a certificate from them, or from someone like GoDaddy, called “extended validation”, where they email the email address associated with the domain, they verify your business and address, etc. This allows the certificate authority to verify that they are giving a legitimate certificate to a legitimate entity. Does it always work out perfectly? I would say no.&lt;/p&gt;

&lt;p&gt;For example, I could still be a bad guy setting up an HTTPS domain to steal information from people, and I could simply get one of Comodo’s free 90-day certificates, steal a bunch of information from unsuspected users visiting my site over an HTTPS connection. In other words:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Certificate authorities sign a certificate simply saying it belongs to a domain (and that’s it)&lt;/li&gt;
  &lt;li&gt;The certificate allows you to use an HTTPS connection so people can’t steal data that’s going across the wire&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But this doesn’t prove whether the owner of the server is good or bad. This whole process is just about identity, authentication, and secure communications. Just something to keep in mind.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;If you made it this far, I’d like to say… you have no life, and thank you for reading (just kidding about the “no life” part; you only spent 20 minutes reading this, I spent a whole day writing it… So who’s really the one with no life?)&lt;/p&gt;

&lt;p&gt;In pseudo-code using pseudo-certificates, here’s our summary of what happens over HTTPS:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Client connects and asks server for their certificate, which in my pseudo-world looks like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;ip:216.58.192.461:public_key:123456:signature:qa2ws3ed4rf&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Client verifies that &lt;code class=&quot;highlighter-rouge&quot;&gt;verify(&#39;qa2ws3ed4rf&#39;, public_key) === sha256(&#39;ip:216.58.192.461:public_key:123456&#39;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Client creates a shared symmetric session secret &lt;code class=&quot;highlighter-rouge&quot;&gt;caesarcipher&lt;/code&gt;, and encrypts this with the server’s public key&lt;/li&gt;
  &lt;li&gt;Client sends &lt;code class=&quot;highlighter-rouge&quot;&gt;encrypt(&#39;caesarcipher&#39;, public_key)&lt;/code&gt; which turns out to look like &lt;code class=&quot;highlighter-rouge&quot;&gt;abcdefg&lt;/code&gt; to the server&lt;/li&gt;
  &lt;li&gt;The server attempts to &lt;code class=&quot;highlighter-rouge&quot;&gt;decrypt(&#39;abcdefg&#39;, private_key)&lt;/code&gt;, and thankfully, the server gets &lt;code class=&quot;highlighter-rouge&quot;&gt;caesarcipher&lt;/code&gt; (the correct shared session key)&lt;/li&gt;
  &lt;li&gt;The client buys the new season of Game of Thrones by sending his credit card number (encrypted with &lt;code class=&quot;highlighter-rouge&quot;&gt;caesarcipher&lt;/code&gt;) to the server and binge watches the entire season in one evening&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it. This is the real end. Again, this is a very, very basic overview and there is much more going on behind the scenes (for example, things like &lt;a href=&quot;http://security.stackexchange.com/questions/63971/how-is-the-premaster-secret-used-in-tls-generated&quot;&gt;pre-master and master secrets&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Cryptographic_nonce&quot;&gt;nonces&lt;/a&gt;, and all kinds of other stuff. Also, we are still discovering &lt;a href=&quot;http://robertheaton.com/2015/04/06/the-ssl-freak-vulnerability/&quot;&gt;bugs in SSL&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Further reading:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html&quot;&gt;SSL/TLS &amp;amp; Perfect Forward Secrecy&lt;/a&gt; from Vincent Bernat&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://security.stackexchange.com/questions/20105/are-ssl-encrypted-requests-vulnerable-to-replay-attacks&quot;&gt;Are SSL encrypted requests vulnerable to Replay Attacks?&lt;/a&gt; on Security StackExchange (explains partially why we use randoms “so old signatures and temporary keys cannot be replayed.”)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 17 Jan 2016 05:49:00 -0800</pubDate>
        <link>http://joshbeam.github.io/encryption/2016/01/17/breaking-down-https.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/encryption/2016/01/17/breaking-down-https.html</guid>
        
        
        <category>encryption</category>
        
      </item>
    
      <item>
        <title>Using node.js to upload your app to Google Play</title>
        <description>&lt;div class=&quot;note&quot;&gt;
&lt;!--excerpt.start--&gt;
If you&#39;re developing a hybrid mobile app, you may want to stick with node.js to upload your app to the Google Play Store. However, Google&#39;s node.js client is still in &quot;alpha&quot;, and documentation is very limited. This post gives information about basic setup to get started using the googleapis client.
&lt;!--excerpt.end--&gt;
&lt;/div&gt;

&lt;h1 id=&quot;why-would-i-use-nodejs-to-upload-an-android-app&quot;&gt;Why would I use node.js to upload an Android app?&lt;/h1&gt;

&lt;p&gt;Perhaps you’re developing a &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; (hybrid mobile) app :)&lt;/p&gt;

&lt;p&gt;The only library I found available to upload to the Play Store is &lt;a href=&quot;https://github.com/google/google-api-nodejs-client/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;google-api-nodejs-client&lt;/code&gt;&lt;/a&gt; (written by Google).&lt;/p&gt;

&lt;p&gt;Since I couldn’t find much documentation, I had to comb a bit through the source code of the library to figure out what was going on. This post will go over some of the initial set-up of the library (there are a few holes, which are left to be figured out).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This tutorial starts at the point after you’ve already set up your app in the Google Play store (but have not yet uploaded a new APK).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important: according to Play Store docs, you must first MANUALLY upload your APK the first time (by going into your developer console and clicking the “Upload” button). Any time after that, however, you can use a library such as the one in this tutorial.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also, I’m assuming you’ve already found out a way to build your APK. If you’re using Ionic/Cordiva, follow &lt;a href=&quot;http://ionicframework.com/docs/guide/publishing.html&quot;&gt;their official tutorial&lt;/a&gt; to figure out how to generate an APK.&lt;/p&gt;

&lt;h1 id=&quot;useful-documents-before-we-start&quot;&gt;Useful documents before we start&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;My full example code used in this tutorial (on &lt;a href=&quot;https://github.com/joshbeam/googleapis-androidpublisher-example&quot;&gt;Github&lt;/a&gt;. Save it as something like &lt;code class=&quot;highlighter-rouge&quot;&gt;upload.js&lt;/code&gt;, and remember to &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod a+x upload.js&lt;/code&gt; to be able to run it on the command line.) This may be incomplete or not fully functional in some places (it was originally tailored for one of our organization’s apps), but the basic “skeleton” is there. You can also &lt;a href=&quot;https://github.com/joshbeam/googleapis-androidpublisher-example/archive/master.zip&quot;&gt;download the ZIP&lt;/a&gt; (this is linked from Github).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/google-api-nodejs-client/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;googleapis&lt;/code&gt; README on Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/googleapis&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;googleapis&lt;/code&gt; npm page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/google/google-api-nodejs-client/blob/master/apis/androidpublisher/v2.js&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;androidpublisher&lt;/code&gt; v2 source code&lt;/a&gt;, which is what I used as my documentation (it’s pleasantly well-commented)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/android-publisher/getting_started&quot;&gt;Google documentation on developers.google.com&lt;/a&gt; for generic usage of the &lt;code class=&quot;highlighter-rouge&quot;&gt;android-publisher&lt;/code&gt; module&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;download-the-library&quot;&gt;Download the library&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install --save-dev googleapis&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the abovementioned library, which, according to Github is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Google’s officially supported node.js client library for using Google APIs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Supposedly it supports &lt;a href=&quot;https://developers.google.com/apis-explorer/#p/&quot;&gt;all of Google’s APIs&lt;/a&gt;, including the &lt;code class=&quot;highlighter-rouge&quot;&gt;androidpublisher&lt;/code&gt; (which is what we’ll be using).&lt;/p&gt;

&lt;h1 id=&quot;uploading-isnt-quite-what-it-seems&quot;&gt;Uploading isn’t quite what it seems&lt;/h1&gt;

&lt;p&gt;With this API, we don’t simply upload an APK.&lt;/p&gt;

&lt;p&gt;Instead, we:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open an “edit” (&lt;code class=&quot;highlighter-rouge&quot;&gt;play.edits.insert&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Upload the APK in sort of a limbo state (&lt;code class=&quot;highlighter-rouge&quot;&gt;play.edits.apks.upload&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Do whatever else in this step (say, set a track, etc.)&lt;/li&gt;
  &lt;li&gt;“Commit” the edit (&lt;code class=&quot;highlighter-rouge&quot;&gt;play.edits.commit&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Basically what we’re doing is opening some sort of “container” in cyberspace where we have a white room to upload our app, set whatever properties, etc., and then finally we either discard or commit all those edits.&lt;/p&gt;

&lt;h2 id=&quot;primer-on-tracks&quot;&gt;Primer on “tracks”&lt;/h2&gt;

&lt;p&gt;Read the &lt;a href=&quot;https://developers.google.com/android-publisher/tracks&quot;&gt;official Google docs about tracks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;“Tracks” are just channels (&lt;code class=&quot;highlighter-rouge&quot;&gt;alpha&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;beta&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;production&lt;/code&gt;). In the Play Store, you can put your app in any of these tracks. Why have &lt;code class=&quot;highlighter-rouge&quot;&gt;alpha&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;beta&lt;/code&gt;? Well, in each one of those tracks, you can designate specific testers.&lt;/p&gt;

&lt;p&gt;For example, your &lt;code class=&quot;highlighter-rouge&quot;&gt;alpha&lt;/code&gt; track can be closed testing for your developers only, and your &lt;code class=&quot;highlighter-rouge&quot;&gt;beta&lt;/code&gt; track can be for, say, QA engineers, or a small subset of other people.&lt;/p&gt;

&lt;p&gt;These “limited” tracks (&lt;code class=&quot;highlighter-rouge&quot;&gt;alpha&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;beta&lt;/code&gt;) are also &lt;strong&gt;fantastic&lt;/strong&gt; if your app is some sort of “admin” app that will only ever be available to specific users in your organization. But be careful: the moment you send your app to production, it is there to stay (and it’s live to everyone in the Play Store) (see &lt;a href=&quot;http://stackoverflow.com/questions/17006165/unable-to-deactivate-apk-accidentally-uploaded-to-prod&quot;&gt;Unable to deactivate APK accidentally uploaded to Prod&lt;/a&gt; on StackOverflow).&lt;/p&gt;

&lt;p&gt;Just as an aside, if you want each APK in each track to hit a different server (for example, if you want your &lt;code class=&quot;highlighter-rouge&quot;&gt;beta&lt;/code&gt; to hit “staging.example.com/api/1.0” and your &lt;code class=&quot;highlighter-rouge&quot;&gt;production&lt;/code&gt; track to hit “production.example.com/api/1.0”), you’re out of luck (as far as I know). The APK you upload and promote through the various tracks can’t be reconfigured each time you move it to a different track (by the way, to move your &lt;code class=&quot;highlighter-rouge&quot;&gt;beta&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;production&lt;/code&gt;, you can just hit the “Promote to…” button and click the new channel. I haven’t yet tried to use the API to do this, as opening a new zshell window is as easy as just logging into the Play Store console in Chrome and pressing the button. Some hardcore shell users may disagree with me.)&lt;/p&gt;

&lt;h1 id=&quot;initial-set-up&quot;&gt;Initial set up&lt;/h1&gt;

&lt;p&gt;There’s a lot going on here. Here are the initial module declarations.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// our handy library&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;googleapis&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// this is optional, but helpful&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;bluebird&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// just a utility library (handy, if you haven&#39;t used it before)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;lodash&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// command line parsing&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;yargs&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// see below in &quot;Finding your secret.json&quot; to find out how to get this&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;../../../secret.json&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// I&#39;m using my package.json as my source of truth for my versioning&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;../../../package.json&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// any unique id will do; a timestamp is easiest&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;editId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// editing &quot;scope&quot; allowed for OAuth2&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scopes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&#39;https://www.googleapis.com/auth/androidpublisher&#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// here, we&#39;ll initialize our client&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OAuth2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OAuth2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oauth2Client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OAuth2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jwtClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;client_email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;private_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scopes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;androidpublisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;v2&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oauth2Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// default options&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// this is the package name for your initial app you&#39;ve already set up on the Play Store&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;packageName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;com.example.app&#39;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oauth2Client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;finding-your-secretjson&quot;&gt;Finding your &lt;code class=&quot;highlighter-rouge&quot;&gt;secret.json&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;You can make one! Go to &lt;a href=&quot;https://console.developers.google.com/&quot;&gt;https://console.developers.google.com&lt;/a&gt;.&lt;/p&gt;

&lt;center&gt;
  &lt;img src=&quot;/images/googleapis-play-store-permissions-menu.png&quot; width=&quot;25%&quot; /&gt;
  &lt;br /&gt;
  &lt;i&gt;Click on &quot;permissions&quot; in the side menu&lt;/i&gt;
&lt;/center&gt;

&lt;center&gt;
  &lt;img src=&quot;/images/googleapis-permissions-service-account.png&quot; width=&quot;90%&quot; /&gt;
  &lt;br /&gt;
  &lt;i&gt;You can generate your key here. Don&#39;t worry, as of the date of writing this post, you can generate as many keys as you&#39;d like without the fear of revoking other active keys! :)&lt;/i&gt;&lt;br /&gt;
&lt;/center&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;secret.json&lt;/code&gt; should look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;private_key_id&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;y34hr1ght&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;private_key&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-----BEGIN PRIVATE KEY-----\nyouthoughtiwasgoingtopostmyprivatekey\n-----END PRIVATE KEY-----\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;client_email&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;someweirdlookingstring-123@developer.gserviceaccount.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;client_id&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;someweirdlookingstring-123.apps.googleusercontent.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;service_account&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I found the initial options and how to initialize &lt;code class=&quot;highlighter-rouge&quot;&gt;androidpublisher&lt;/code&gt; through a bit of trial and error. You can use the &lt;a href=&quot;https://github.com/google/google-api-nodejs-client&quot;&gt;general &lt;code class=&quot;highlighter-rouge&quot;&gt;googleapis&lt;/code&gt; README&lt;/a&gt; (which is not specific to &lt;code class=&quot;highlighter-rouge&quot;&gt;androidpublisher&lt;/code&gt;) if you want to see example of connecting to other APIs, using OAuth2, etc. Again, you won’t find much useful information for this specific case.&lt;/p&gt;

&lt;h1 id=&quot;lets-actually-do-some-stuff&quot;&gt;Let’s actually do some stuff&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// &quot;open&quot; our edit&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;startEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;fs&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;./Chronicled.apk&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// stage the upload (doesn&#39;t actually upload anything)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;apk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apk&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// set our track&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setTrack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// commit our changes&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commitToPlayStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// log our success!&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Successful upload:&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 *  Sets our authorization token and begins an edit transaction.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// get the tokens&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;jwtClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// set the credentials from the tokens&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;oauth2Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;editId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// this edit will be valid for 10 minutes&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;expiryTimeSeconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 *  Stages an upload of the APK (but doesn&#39;t actually upload anything)
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;editId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;na&quot;&gt;mimeType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;application/vnd.android.package-archive&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apk&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// pass any data we care about to the next function call&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;omit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uploadResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;apk&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 *  Sets our track (beta, production, etc.)
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setTrack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;track&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tracks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;alpha&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tracks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;editId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;versionCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uploadResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;versionCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;setTrackResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 *  Commits our edit transaction and makes our changes live.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commitToPlayStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;editId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;commitToPlayStoreResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the code above, all we’re doing is calling these steps in order:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open our edit (&lt;code class=&quot;highlighter-rouge&quot;&gt;startEdit&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Stage our APK for upload (&lt;code class=&quot;highlighter-rouge&quot;&gt;upload&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Set our track (&lt;code class=&quot;highlighter-rouge&quot;&gt;setTrack&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Committing our changes (&lt;code class=&quot;highlighter-rouge&quot;&gt;commitToPlayStore&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Throughout all these steps, all we’re doing is manipulating our data after each function call and piping it into the next function (nothing special about that part).&lt;/p&gt;

&lt;p&gt;If all went well, you should see something like this printed in your consol:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Successful&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1234567&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expiryTimeSeconds&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1441766670&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;uploadResults&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;versionCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;dddddd444444aaaaa55555&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;setTrackResults&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;track&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;beta&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;versionCodes&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;commitToPlayStoreResults&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1234567&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expiryTimeSeconds&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;1441766670&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;forgetting-to-bump-your-version&quot;&gt;Forgetting to bump your version&lt;/h2&gt;

&lt;p&gt;If you see this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;APK&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;specifies&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;already&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;been&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;used&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.]&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;androidpublisher&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;apkUpgradeVersionConflict&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;APK specifies a version code that has already been used.&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cannot&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;edit&#39;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This means you need to bump your &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; version.&lt;/p&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h1&gt;

&lt;p&gt;The node.js client used in this tutorial is still very much in its early stages, as noted by Google in their &lt;a href=&quot;https://github.com/google/google-api-nodejs-client/&quot;&gt;official README&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This library is in Alpha. We will make an effort to support the library, but we reserve the right to make incompatible changes when necessary.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another gaping hole missing in this tutorial is &lt;strong&gt;promotion through tracks&lt;/strong&gt;. If anyone knows more about that, please comment below! Thanks for reading, and I hope you’ve found some useful information in this post!&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Dec 2015 07:30:00 -0800</pubDate>
        <link>http://joshbeam.github.io/javascript/2015/12/26/using-nodejs-to-upload-app-to-google-play.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/javascript/2015/12/26/using-nodejs-to-upload-app-to-google-play.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Initial thoughts on event sourcing</title>
        <description>&lt;div class=&quot;note&quot;&gt;
&lt;!--excerpt.start--&gt;
&quot;The state of any object can be derived from the events that affect it.&quot; In a nutshell, this is the thesis of &quot;event sourcing&quot;, which, when implemented in an application, becomes an &quot;event driven architecture&quot;. In this post I&#39;ll discuss some of the practical applications, benefits, and drawbacks that the team and I have noticed after migrating our current, stateful database to a more event-driven approach.
&lt;!--excerpt.end--&gt;
&lt;/div&gt;

&lt;h1 id=&quot;tldr&quot;&gt;TL;DR&lt;/h1&gt;

&lt;p&gt;Store events in your database, and construct the current state of your database from those events. Keep side-effects separate (like emails being sent to users). Endpoints become open-ended and asynchronous, and you can track the state of your database throughout time (almost like Git).&lt;/p&gt;

&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;

&lt;p&gt;My team and I are several months into a move from a traditional RESTful implementation (which is referred to as &lt;strong&gt;“active record”&lt;/strong&gt; and is arguably the most widespread concept taught in web development) of our server to a more event-driven approach. If you haven’t read much about event-driven architecture (EDA) or &lt;strong&gt;event sourcing&lt;/strong&gt;, I would recommend taking a look at &lt;a href=&quot;https://ookami86.github.io/event-sourcing-in-practice/#title.md&quot;&gt;this easy-to-follow slide deck&lt;/a&gt; (it should take about &lt;strong&gt;10 minutes or so&lt;/strong&gt; to get a basic idea of what’s going on). If you prefer not to read that…&lt;/p&gt;

&lt;h1 id=&quot;heres-a-quick-rundown-of-some-of-the-basic-concepts&quot;&gt;Here’s a quick rundown of some of the basic concepts&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;“Entities” (records in your database) are modeled &lt;em&gt;as&lt;/em&gt; events (for example, &lt;code class=&quot;highlighter-rouge&quot;&gt;UserCreated&lt;/code&gt; would be an entity).&lt;/li&gt;
  &lt;li&gt;Your stateful objects (something that would traditionally be a &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; object or whatever) are &lt;em&gt;derived from&lt;/em&gt; your events.&lt;/li&gt;
  &lt;li&gt;In theory, &lt;strong&gt;if you only kept a backup of your event entities, you should be able to reconstruct the most up-to-date state of your entire database&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;center&gt;&lt;img src=&quot;/images/event-sourcing-diagram.png&quot; width=&quot;50%&quot; /&gt;&lt;/center&gt;

&lt;p&gt;Instead of mutating an object over and over and losing any notion of what led the object to that point, you can instead keep a timeline of the object and &lt;em&gt;derive&lt;/em&gt; its current state. It’s like &lt;strong&gt;having a history of every object in your database&lt;/strong&gt;. Kind of reminds me of Git.&lt;/p&gt;

&lt;p&gt;For performance reasons, every time some requests, say, &lt;code class=&quot;highlighter-rouge&quot;&gt;user/1234&lt;/code&gt;, you don’t want to recompute that user object based on the events that led up to that point (&lt;code class=&quot;highlighter-rouge&quot;&gt;UserCreated&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;UserUpdatedEmailAddress&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;UserLoggedIn&lt;/code&gt;, etc.), but instead, every time an update/delete occurs, you can just store the current state of whatever that object is in a separate table and query for &lt;em&gt;that&lt;/em&gt; on any &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; request.&lt;/p&gt;

&lt;p&gt;In other words, &lt;strong&gt;new events trigger updates, and &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; requests query for the stateful object itself&lt;/strong&gt;. This is almost like a cache.&lt;/p&gt;

&lt;p&gt;In other words, this is a very close model of real life. Things happen over time, and the current state of anything is just the sum of the things that happened to it.&lt;/p&gt;

&lt;h1 id=&quot;what-can-the-endpoints-look-like&quot;&gt;What can the endpoints look like?&lt;/h1&gt;

&lt;p&gt;Something like &lt;code class=&quot;highlighter-rouge&quot;&gt;/api/1.0/userCreated&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One approach is to model your endpoints as events themselves. In other words, the endpoints have a semantic meaning for their corresponding entity, just like any other traditional RESTful endpoint. However, this approach lends itself to being a bit &lt;strong&gt;more open-ended and a bit less procedural&lt;/strong&gt;. Additionally, all endpoints become basically either a &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; or a &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; (similar to “REST without &lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt;”), and side-effects are processed asynchronously on the backend.&lt;/p&gt;

&lt;p&gt;That last point about side-effects is important, because if you were to reconstruct your database from your events, you would want to do so without, say, triggering emails being sent to users, etc. The side-effects should be encapsulated in a set of logic seperate from the event creation itself (and endpoints are a great mechanism for this).&lt;/p&gt;

&lt;h1 id=&quot;some-benefits-ive-encountered&quot;&gt;Some benefits I’ve encountered&lt;/h1&gt;

&lt;h3 id=&quot;loosely-coupled-open-ended-endpoints&quot;&gt;Loosely coupled, open-ended endpoints&lt;/h3&gt;

&lt;p&gt;This has been absolutely &lt;em&gt;fantastic&lt;/em&gt;. For most operations, our client application just sends a &lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt; for a current stateful object, or a &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; to create an event. That’s it. If you’ve ever deployed an iOS application to the App Store, you’ll know it takes about a week (sometimes shorter, sometimes longer) to get approved. This means that if you have a bug in your client application, the fix takes the sum of the time it takes you to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Receive a complaint from a customer&lt;/li&gt;
  &lt;li&gt;Find out why the bug is happening (“well, it was working on my machine?!”)&lt;/li&gt;
  &lt;li&gt;Fix the bug&lt;/li&gt;
  &lt;li&gt;Code review&lt;/li&gt;
  &lt;li&gt;Do some QA&lt;/li&gt;
  &lt;li&gt;And then, get App Store approval&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means you need to &lt;strong&gt;remove flow of control from your client application as much as possible, and move that control to your server&lt;/strong&gt;. This is pretty trivial in most cases with open ended endpoints that simply respond to events.&lt;/p&gt;

&lt;p&gt;We have continuous integration set up through &lt;a href=&quot;https://circleci.com/&quot;&gt;CircleCI&lt;/a&gt;, which means that once we merge in Github from &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;staging&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;staging&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, our server &lt;strong&gt;automatically deploys&lt;/strong&gt;. This means that if we can keep as much logic as possible on our server, we can just deploy our server as often as we want to fix bugs that we encounter (this is obviously useless, however, if it’s a client UI bug).&lt;/p&gt;

&lt;h3 id=&quot;backend-becomes-asynchronous&quot;&gt;Backend becomes asynchronous&lt;/h3&gt;

&lt;p&gt;This is huge. This means that essentially all side effects happen inside workers. So the only response that gets sent back to the client is either something like a &lt;code class=&quot;highlighter-rouge&quot;&gt;401: Unauthorized&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;500: Internal error&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;200: Success&lt;/code&gt;. These responses are only those of &lt;strong&gt;the event creation itself&lt;/strong&gt;. Things that might take a shit ton of time (like making a third-party service send an email to user who just signed up) can take place in the background.&lt;/p&gt;

&lt;p&gt;An asynchronous backend can be implemented without an event-driven architecture (for example, by making traditional, RESTful, active record endpoints kick off async workers), but these approaches mesh very well together.&lt;/p&gt;

&lt;h1 id=&quot;some-drawbacks-ive-encountered&quot;&gt;Some drawbacks I’ve encountered&lt;/h1&gt;

&lt;h3 id=&quot;lots-of-entities&quot;&gt;Lots of entities&lt;/h3&gt;

&lt;p&gt;Events are entities, and, well… entities are entities too. In other words, if you store both events &lt;em&gt;and&lt;/em&gt; the current state of your database, then you have a big database.&lt;/p&gt;

&lt;h3 id=&quot;backend-becomes-asynchronous-1&quot;&gt;Backend becomes asynchronous&lt;/h3&gt;

&lt;p&gt;You’ll notice the second point was mentioned as both a benefit and a drawback. If your endpoints operate asynchronously, this means that you can only rely on sending an HTTP response &lt;em&gt;for the creation of the event itself&lt;/em&gt;. That’s it. No client logic can depend on any subsequent operations or side-effects that take place on the server, &lt;strong&gt;unless you implement some sort of two-way communication via polling, web sockets, etc.&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For example, say we want to prevent users from posting an ad for their used motorcycle on our app unless they’ve verified they’re email address. In a traditional, synchronous, active-record approach, we might do this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;POST /advertisement BODY: { type: &#39;motorcycle&#39;, make: &#39;Harley Davidson&#39; }&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Server checks &lt;code class=&quot;highlighter-rouge&quot;&gt;user.emailVerified === true&lt;/code&gt;?&lt;/li&gt;
  &lt;li&gt;If not, respond with, say, &lt;code class=&quot;highlighter-rouge&quot;&gt;401: Unauthorized&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;This response triggers logic on the client to show a prompt asking for the user to enter their email address in order to be sent an email with a link to verify it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This works great, if the backend is synchronous. What’s left to be discovered is the best approach for processing complex logic such as this with an asynchronous backend, which requires a different frame of thinking (something we’re still working on figuring out).&lt;/p&gt;

&lt;h1 id=&quot;some-final-thoughtsquestions&quot;&gt;Some final thoughts/questions&lt;/h1&gt;

&lt;h2 id=&quot;deletions&quot;&gt;Deletions&lt;/h2&gt;

&lt;p&gt;Do you want “soft deletes” or “hard deletes”? In other words, do you want to actually remove a stateful record from your database, or simply mark it (via a flag) as “removed” or “deleted”, or whatever?&lt;/p&gt;

&lt;h2 id=&quot;diffs&quot;&gt;Diffs&lt;/h2&gt;

&lt;p&gt;Since this approach is already closely related to Git, one of the only major things missing is the ability to “diff” objects. These diffs could be stored inside the event itself:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// UserUpdated event&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;UserUpdated&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;auth0|123456&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;new_email@gmail.com&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;updated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;MailingList&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;aXd45&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;new_email@gmail.com&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;User&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bgg7x&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;new_email@gmail.com&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are still many questions to be answered, and lots of cool things that can be implemented here. It is a shift in the commonly-taught paradigm (the “active record” approach). I am excited to learn more from others who have experience with this! Thanks for reading, and feel free to chime in in the comments below.&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Dec 2015 07:26:00 -0800</pubDate>
        <link>http://joshbeam.github.io/javascript/2015/12/24/initial-thoughts-on-event-sourcing.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/javascript/2015/12/24/initial-thoughts-on-event-sourcing.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Get rid of $scope, and extend into the view model</title>
        <description>&lt;div class=&quot;note&quot;&gt;
&lt;!--excerpt.start--&gt;
AngularJS&#39;s &lt;code&gt;controllerAs&lt;/code&gt; syntax is a good first step into being able to have some sort of sense of hierarchy in applications. However, large controllers can still get unwieldy. We can move towards controlling our controllers with &lt;code&gt;angular.extend&lt;/code&gt;.
&lt;!--excerpt.end--&gt;
&lt;/div&gt;

&lt;h1 id=&quot;tldr&quot;&gt;TL;DR&lt;/h1&gt;

&lt;p&gt;Put all your controller properties into an object literal, and extend that object into &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After that, always use &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; to refer to controller properties (don’t use &lt;code class=&quot;highlighter-rouge&quot;&gt;vm.whatever&lt;/code&gt;).&lt;/p&gt;

&lt;h1 id=&quot;a-brief-overview-of-controlleras&quot;&gt;A brief overview of &lt;code class=&quot;highlighter-rouge&quot;&gt;controllerAs&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;#skip&quot;&gt;Skip to the next section&lt;/a&gt; if you already know how to use this.&lt;/p&gt;

&lt;p&gt;Basically, if you have a parent controller and a child controller nested within, you have to explicitly refer to &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope.$parent&lt;/code&gt; to access the parent controller &lt;em&gt;from&lt;/em&gt; the child controller.&lt;/p&gt;

&lt;p&gt;However, with &lt;code class=&quot;highlighter-rouge&quot;&gt;controllerAs&lt;/code&gt; syntax, we get a &lt;strong&gt;namespace&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ParentCtrl as parent&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  
  {{parent.something}}
  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ChildCtrl as child&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    
    {{child.something}}
    {{parent.something}}
    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But then in your controller, you might have to deal with this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// parent.controller.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Builder&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;motto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Yes we can!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;motto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Also, wondering why we’re using &lt;code class=&quot;highlighter-rouge&quot;&gt;vm&lt;/code&gt;? Check out &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide#controlleras-with-vm&quot;&gt;John Papa’s AngularJS Style Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now imagine that, 1000x, when you have a controller full of lots and lots of stuff. Really, you could argue that you should consider leveraging directives and services for most of your business logic, but sometimes it’s difficult to do.&lt;/p&gt;

&lt;p&gt;By the way, &lt;code class=&quot;highlighter-rouge&quot;&gt;controllerAs&lt;/code&gt; still knows about &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt;. This fake “namespace” simply happens internally by attaching an object to &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt;. So in the above example, our parent controller &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt; would look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// a bunch of $$ angular properties, and then...&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Builder&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;motto&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Yes we can!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){...}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In fact, if you were to inject &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt; into that controller and ask for &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope.parent&lt;/code&gt;, you’d see all those properties. There’s nothing fancy about it.&lt;/p&gt;

&lt;p&gt;&lt;span id=&quot;skip&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;extending-the-view-model&quot;&gt;Extending the view model&lt;/h1&gt;

&lt;p&gt;Ever heard of &lt;a href=&quot;https://docs.angularjs.org/api/ng/function/angular.extend&quot;&gt;&lt;code&gt;angular.extend&lt;/code&gt;&lt;/a&gt;? It’s pretty nifty. It basically just puts properties from one object into another object, without overwriting any properties. AngularJS already attempts to protect us from this by delimiting internal properties with &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;$$&lt;/code&gt;, so it’s not really a concern anyway, but it’s a nice added touch.&lt;/p&gt;

&lt;p&gt;So, we can just make our controller look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// parent.controller.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Bob&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Builder&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;motto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Yes we can!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;motto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, you’ll notice that it’ll usually be better from then on to continue to refer to controller properties with &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;vm&lt;/code&gt;, because any changes through data-binding will propogate only to &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; (our namespaced controller), and not to our &lt;code class=&quot;highlighter-rouge&quot;&gt;vm&lt;/code&gt; object reference. You can leverage things like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;&lt;code&gt;Function.prototype.bind&lt;/code&gt;&lt;/a&gt; if you get into hairy contexts (like &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; loops, etc.).&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Aug 2015 11:30:00 -0700</pubDate>
        <link>http://joshbeam.github.io/angularjs/2015/08/23/extending-vm-into-this.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/angularjs/2015/08/23/extending-vm-into-this.html</guid>
        
        
        <category>angularjs</category>
        
      </item>
    
      <item>
        <title>3 lessons in solving stupid engineering problems (without resorting to manslaughter)</title>
        <description>&lt;div class=&quot;note&quot;&gt;
&lt;!--excerpt.start--&gt;
Recently, some colleagues and I dreadfully spent (read: wasted) valuable man hours attempting to solve a bug in a hybrid mobile app. The cause of the bug? A missing &amp;lt;script&amp;gt; tag. Several important lessons can be learned from the ways in which we decided to go about solving this simple headbanger (no, not like you&#39;d do at a heavy metal concert; rather, where you actually consider banging your head on a solid object) of a problem.
&lt;!--excerpt.end--&gt;
&lt;/div&gt;

&lt;center&gt;
  &lt;img src=&quot;/images/honorable-suicide-meme.png&quot; width=&quot;50%&quot; /&gt;
&lt;/center&gt;

&lt;h1 id=&quot;before-we-continue-heres-the-problem-and-our-solution&quot;&gt;Before we continue, here’s the problem and our solution&lt;/h1&gt;

&lt;p&gt;We were attempting to integrate a certain OAuth library into a hybrid mobile app, which uses &lt;a href=&quot;http://ionicframework.com/&quot;&gt;ionic&lt;/a&gt; (if you haven’t heard of it, it’s a pretty… interesting hybrid framework for building mobile apps with web technologies, aka, no Objective-C or Java).&lt;/p&gt;

&lt;p&gt;Basically, the OAuth library would just let us login to our app. Except we couldn’t login… Why? Because we were missing this line of code in our &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;
&amp;lt;script src=&quot;cordova.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;That took quite a while to figure out. Pretty simple solution, though, no?&lt;/p&gt;

&lt;h1 id=&quot;lesson-1-everyone-is-responsible-for-the-environment&quot;&gt;Lesson 1: Everyone is responsible for the environment&lt;/h1&gt;

&lt;center&gt;
  &lt;img src=&quot;/images/tree-hugger.png&quot; width=&quot;50%&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;No, not &lt;em&gt;that&lt;/em&gt; environment (well, that environment too, but that’s not what we’re referring to, here). We’re referring to the development environment.&lt;/p&gt;

&lt;p&gt;When you run &lt;code class=&quot;highlighter-rouge&quot;&gt;ionic start myApp blank&lt;/code&gt;, it scaffolds a blank app for you. It also happens to set up an &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; for you, which already contains this cryptic line:&lt;/p&gt;

&lt;pre&gt;
&amp;lt;!-- this will be a 404 when in a development environment --&amp;gt;
&amp;lt;script src=&quot;cordova.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;However, with plethora build tools available (like &lt;a href=&quot;http://webpack.github.io/&quot;&gt;webpack&lt;/a&gt;), one can usually just &lt;code class=&quot;highlighter-rouge&quot;&gt;require(&#39;ionic&#39;)&lt;/code&gt; or whatever. Instead, we got rid of the &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; and replaced it with our own, because we thought we were being super developers who could build an app in one step. There are many issues that play into this (for example, the whole point of a build tool such as webpack &lt;em&gt;is&lt;/em&gt; to be able to be a super developer and build the app in one step… but we’ll ignore that for now).&lt;/p&gt;

&lt;p&gt;Anyway, &lt;strong&gt;the initial assumption was that the environment was set up correctly from the get-go&lt;/strong&gt;. Usually this is a reasonable assumption, and everything &lt;em&gt;did&lt;/em&gt; appear to be working correctly from the get-go, but there were some clues that we weren’t paying attention to.&lt;/p&gt;

&lt;p&gt;This isn’t anyone’s fault, per se, but the &lt;strong&gt;key takeaway is that when you run into a bug like this, you should do your due diligence and consider that the environment could have, in fact, been setup incorrectly.&lt;/strong&gt; Had this been the first step, many man-hours would’ve been saved.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We had three devs working on this problem, and all of us assumed that everyone else had made sure the environment was pristine. We never questioned it.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;lesson-2-everything-is-a-clue&quot;&gt;Lesson 2: Everything is a clue&lt;/h1&gt;

&lt;center&gt;
  &lt;img src=&quot;/images/aliens.png&quot; width=&quot;50%&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;In our situation, we had two apps: the first app was already working, login and all. The environment, plugins, etc., in our second app appeared to be &lt;em&gt;equivalent&lt;/em&gt; to those of the first app. But there was a nagging clue that was ignored.&lt;/p&gt;

&lt;p&gt;In the context of ionic, in order to make outside requests (i.e., XHR), you have to have the &lt;a href=&quot;https://github.com/apache/cordova-plugin-whitelist&quot;&gt;cordova-plugin-whitelist&lt;/a&gt; installed. However, it’ll give you a nice little warning if you specify that the app can access &lt;em&gt;all&lt;/em&gt; outside origins (with an asterisk: &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;), and don’t supply a certain &lt;code class=&quot;highlighter-rouge&quot;&gt;meta&lt;/code&gt; tag: &lt;code class=&quot;highlighter-rouge&quot;&gt;No Content-Security-Policy meta tag found. Please add one when using the Cordova-plugin-whitelist plugin.&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because our second app environment was theoretically equivalent to the first app, we should’ve expected to see this warning in our second app. However, even though this clue was extremely subtle, it could’ve led us to a solution much earlier. In fact, I admit that I noticed the warning wasn’t present, but discounted it as a non-clue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The key takeaway is that everything, no matter how subtle, can be a clue.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;lesson-3-question-your-assumptions-and-then-question-them-again&quot;&gt;Lesson 3: Question your assumptions… and then question them again&lt;/h1&gt;

&lt;center&gt;
  &lt;img src=&quot;/images/debugging-timeline.png&quot; width=&quot;50%&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;Our initial assumption was that it &lt;em&gt;had&lt;/em&gt; to be the specific OAuth library we were using that was causing the problem.&lt;/p&gt;

&lt;p&gt;We spent several hours combing through the source code of the library, comparing the differences between execution in the first app and the second app. But they appeared identical. And that’s because they &lt;em&gt;were&lt;/em&gt; identical. That’s because our problem had virtually &lt;em&gt;nothing&lt;/em&gt; to do with the OAuth library.&lt;/p&gt;

&lt;p&gt;While delving into this source code did lead us to make some valuable discoveries (related and unrelated to the issue at hand), it was not the genesis of the bug. &lt;strong&gt;The key takeaway is that you should question your assumptions of where the root of the problem lies.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How do you do this practically? Well, perhaps by verbalizing your assumptions, and making a list of them. Here’s what our list would’ve been:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Assumption 1: our OAuth library is causing the problem&lt;/li&gt;
  &lt;li&gt;Assumption 2: our plugins (&lt;code class=&quot;highlighter-rouge&quot;&gt;whitelist&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;inAppBrowser&lt;/code&gt;, etc.) aren’t configured correctly&lt;/li&gt;
  &lt;li&gt;Assumption 3: our environment is set up correctly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These assumptions led us to &lt;strong&gt;this potentially devastating logic&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Assumption: our OAuth library sucks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion: therefore, we need to reimplement our login system&lt;/strong&gt;&lt;/p&gt;

&lt;center&gt;
  &lt;img src=&quot;/images/i-dont-always-make-assumptions-meme.png&quot; width=&quot;50%&quot; /&gt;
&lt;/center&gt;

&lt;h1 id=&quot;so-how-did-we-stumble-upon-a-solution-to-this-mystical-problem&quot;&gt;So how did we stumble upon a solution to this mystical problem?&lt;/h1&gt;

&lt;p&gt;We drunkenly stumbled into our solution by attempting to implement a workaround to the &lt;code class=&quot;highlighter-rouge&quot;&gt;inAppBrowser&lt;/code&gt; plugin. &lt;strong&gt;Wait, wot?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, one of our other underlying assumpetions was that &lt;code class=&quot;highlighter-rouge&quot;&gt;window.open&lt;/code&gt; wasn’t functioning properly (this is something the OAuth library was using interally). So we thought, why not try to use &lt;code class=&quot;highlighter-rouge&quot;&gt;cordova.inAppBrowser.open&lt;/code&gt; instead, as suggested by some StackOverflow answers?&lt;/p&gt;

&lt;p&gt;This led us to this haunting error (I’ll probably have nightmares about it for years to come):&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Uncaught ReferenceError: cordova is not defined&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Only at that point did we go back to the ionic docs and see that, in fact, you have to include this script tag in your &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; (even though we were attempting to use the magic of webpack):&lt;/p&gt;

&lt;pre&gt;
&amp;lt;!-- this will be a 404 when in a development environment --&amp;gt;
&amp;lt;script src=&quot;cordova.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;center&gt;
  &lt;img src=&quot;/images/y-u-no-include-cordova-webpack-meme.png&quot; width=&quot;50%&quot; /&gt;
&lt;/center&gt;
</description>
        <pubDate>Sun, 23 Aug 2015 06:39:00 -0700</pubDate>
        <link>http://joshbeam.github.io/javascript/2015/08/23/solving-stupid-problems.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/javascript/2015/08/23/solving-stupid-problems.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>3 reasons you should not be using Array.prototype.forEach</title>
        <description>&lt;div class=&quot;note&quot;&gt;&lt;!--excerpt.start--&gt;
One of the main problems with &lt;code&gt;forEach&lt;/code&gt; is that it primarily relies on side effects, whereas some native &lt;code&gt;Array.prototype&lt;/code&gt; alternatives make use of semantically-correct programming paradigms (such as reduction, mapping, and filtering) and may in turn introduce less &lt;a href=&quot;http://shaffner.us/cs/papers/tarpit.pdf&quot;&gt;incidental complexity&lt;/a&gt; (and enhance readability) when writing code.&lt;!--excerpt.end--&gt;
&lt;/div&gt;

&lt;center&gt;
  &lt;img src=&quot;https://i.imgflip.com/pm0to.jpg&quot; title=&quot;made at imgflip.com&quot; width=&quot;50%&quot; /&gt;
&lt;/center&gt;

&lt;h1 id=&quot;you-should-be-filtering&quot;&gt;3) You should be filtering&lt;/h1&gt;

&lt;p&gt;In this example, we have an array, and we want to eliminate items from an array that don’t meet a specific criteria. Here’s how you’ll see it done with &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;:&lt;/p&gt;

&lt;h2 id=&quot;bad&quot;&gt;Bad&lt;/h2&gt;

&lt;div class=&quot;repl&quot;&gt;
  &lt;div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filteredArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;filteredArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filteredArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;/div&gt;
  &lt;div&gt;
&lt;pre&gt;
[4, 5]
&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This is a typical implementation. With &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;, you simply push each object to a &lt;em&gt;completely new&lt;/em&gt; array. You’ll notice that &lt;strong&gt;this introduces extra state to maintain&lt;/strong&gt;. More state equals more brainpower needed to understand what is happening.&lt;/p&gt;

&lt;p&gt;Luckily, &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.filter&lt;/code&gt; already has you covered there. It simply &lt;em&gt;returns&lt;/em&gt; a new array of the items we want.&lt;/p&gt;

&lt;h2 id=&quot;good&quot;&gt;Good&lt;/h2&gt;

&lt;div class=&quot;repl&quot;&gt;
  &lt;div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filtered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isBig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isBig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filtered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;/div&gt;
  &lt;div&gt;
&lt;pre&gt;
[4, 5]
&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;you-should-be-mapping&quot;&gt;2) You should be mapping&lt;/h1&gt;

&lt;p&gt;In this example, we want to “change” each value in an array to something else. Here’s how we’d do it with &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;:&lt;/p&gt;

&lt;h2 id=&quot;bad-1&quot;&gt;Bad&lt;/h2&gt;

&lt;div class=&quot;repl&quot;&gt;
  &lt;div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stringNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Josh&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Beam&#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Ozzy&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Osbourne&#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;stringNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;/div&gt;
  &lt;div&gt;
&lt;pre&gt;
[&quot;Josh Beam&quot;, &quot;Ozzy Osbourne&quot;]
&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Again, naked looping requires us to create additional state within our application.&lt;/p&gt;

&lt;p&gt;Here, we’re gonna use &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; instead. Again, it simply returns a new array without requiring us to do it ourselves:&lt;/p&gt;

&lt;h2 id=&quot;good-1&quot;&gt;Good&lt;/h2&gt;

&lt;div class=&quot;repl&quot;&gt;
  &lt;div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Josh&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Beam&#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Ozzy&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Osbourne&#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39; &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;/div&gt;
  &lt;div&gt;
&lt;pre&gt;
[&quot;Josh Beam&quot;, &quot;Ozzy Osbourne&quot;]
&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;you-should-be-reducing&quot;&gt;1) You should be reducing&lt;/h1&gt;

&lt;p&gt;Here, we want to &lt;em&gt;combine certain values&lt;/em&gt; in an array.&lt;/p&gt;

&lt;h2 id=&quot;bad-2&quot;&gt;Bad&lt;/h2&gt;

&lt;div class=&quot;repl&quot;&gt;
  &lt;div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;/div&gt;
  &lt;div&gt;
&lt;pre&gt;
15
&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In other words, when you think “reduce”, think about “collapsing” items into a new item. Another way to think of it is to imagine you have an array filled with the words of a sentence, and you want to concatenate them all into one string.&lt;/p&gt;

&lt;h2 id=&quot;good-2&quot;&gt;Good&lt;/h2&gt;

&lt;div class=&quot;repl&quot;&gt;
  &lt;div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;/div&gt;
  &lt;div&gt;
&lt;pre&gt;
15
&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;You’ll notice one of the overarching concepts of all these three methods is that they all take the “functional route”, where they don’t necessarily require the manual creation of additional state. It is possible to introduce side effects within these methods, however, they don’t &lt;strong&gt;primarily rely on side effects to function&lt;/strong&gt;. In other words, you’ll see that &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.prototype.forEach&lt;/code&gt; primarly relies on side effects. &lt;strong&gt;It never returns a value other than &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; unless you explicity force it to&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Why am I referring to functional programming in the context of JavaScript, which is clearly &lt;em&gt;not&lt;/em&gt; a functional programming language? Well, to quote the &lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot;&gt;omniscient Wikipedia article on functional programming&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Eliminating side effects, i.e. changes in state that do not depend on the function inputs, can make it much easier to understand and predict the behavior of a program&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, it can take more “brain power” to understand what is happening in a &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; loop whose sole purpose is to mutate outside data based on side effects, whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; all have &lt;strong&gt;immediate&lt;/strong&gt; and &lt;strong&gt;clear&lt;/strong&gt; semantic meanings to the programmer (that’s not to say, though, that you can’t use the power of those methods for evil).&lt;/p&gt;

&lt;center&gt;
  &lt;img src=&quot;https://i.imgflip.com/pm0kr.jpg&quot; title=&quot;made at imgflip.com&quot; width=&quot;50%&quot; /&gt;
&lt;/center&gt;
</description>
        <pubDate>Sat, 15 Aug 2015 12:04:00 -0700</pubDate>
        <link>http://joshbeam.github.io/javascript/2015/08/15/3-reasons-you-should-not-be-using-foreach.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/javascript/2015/08/15/3-reasons-you-should-not-be-using-foreach.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>5 Things I Learned in My First Month at a Startup</title>
        <description>&lt;div class=&quot;note&quot;&gt;&lt;!--excerpt.start--&gt;
In a departure from the normal content of this blog, I wanted to talk briefly about some of (what I think) are some important things I&#39;ve learned so far in my first month working for a Bay Area tech startup.&lt;!--excerpt.end--&gt;
&lt;/div&gt;

&lt;p&gt;In no particular order (and at a very high level of abstraction and with as little fluff as possible)…&lt;/p&gt;

&lt;h1 id=&quot;dont-come-with-a-problem-come-with-a-working-prototype&quot;&gt;5) Don’t come with a problem. Come with a working prototype.&lt;/h1&gt;

&lt;p&gt;A working prototype says much more about a proposed solution, than does talking about the proposed solution.&lt;/p&gt;

&lt;h1 id=&quot;be-both-purist-and-pragmatic&quot;&gt;4) Be both purist and pragmatic&lt;/h1&gt;

&lt;p&gt;This is a careful balance of business goals vs. coding nirvana, ruthless pragmatism vs. lofty purism. In other words, it’s both good to know exactly what the perfect solution &lt;em&gt;should&lt;/em&gt; look like, and to know what compromises you have to make to have a working solution based on business timeline constraints.&lt;/p&gt;

&lt;h1 id=&quot;conflict-breeds-results-but-always-listen&quot;&gt;3) Conflict breeds results (but always listen)&lt;/h1&gt;

&lt;p&gt;As our patient, level-headed CTO says, “One person scores, but the whole team gets them there.” By “conflict” I don’t mean the &lt;em&gt;bad&lt;/em&gt; type of conflict. I mean the conflict that arises from a group of passionate people all trying to arrive at the best solution.&lt;/p&gt;

&lt;p&gt;The opposite side of the coin is: communication. “Today, I will learn nothing by speaking, but much by listening.” &lt;a href=&quot;https://twitter.com/mhkt/status/619526422906961920&quot;&gt;Beme engineer Matt Hackett (previously VP of Engineering at Tumblr) says&lt;/a&gt;: “Most important engineering skill: Humility.”&lt;/p&gt;

&lt;h1 id=&quot;the-pieces-eventually-come-together&quot;&gt;2) The pieces eventually come together&lt;/h1&gt;

&lt;p&gt;When working on teams of engineers (perhaps in an Agile environment), all the pieces of the product seem scattered, but eventually, everything will begin to cleanly merge back into the product that everyone has been imagining it would be.&lt;/p&gt;

&lt;h1 id=&quot;work-hard&quot;&gt;1) Work hard&lt;/h1&gt;

&lt;p&gt;You’re it. You directly influence the success or failure of your company. Dwayne Johnson says, “always be the hardest worker in the room.” This is a tough goal when everyone else is already working harder than everyone else in the room.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Great companies don’t hire skilled people and motivate them, they hire already motivated people and inspire them. People are either motivated or they are not. Unless you give motivated people something to believe in, something bigger than their job to work toward, they will motivate themselves to find a new job and you’ll be stuck with whoever’s left.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;— Simon Sinek, &lt;i&gt;&lt;a href=&quot;http://www.goodreads.com/work/quotes/7367737&quot;&gt;Start with Why: How Great Leaders Inspire Everyone to Take Action&lt;/a&gt;&lt;/i&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Aug 2015 10:48:00 -0700</pubDate>
        <link>http://joshbeam.github.io/engineering/2015/08/11/5-things-i-learned-in-my-first-month-at-a-startup.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/engineering/2015/08/11/5-things-i-learned-in-my-first-month-at-a-startup.html</guid>
        
        
        <category>engineering</category>
        
      </item>
    
      <item>
        <title>Modern Looking CSS Toggle Switch</title>
        <description>&lt;!--excerpt.start--&gt;
&lt;p&gt;Create a nice, modern toggle switch that works by just changing its padding and adding a transition (all it takes is a JavaScript click handler to add or remove a class)!
&lt;!--excerpt.end--&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/guduco/1/embed?output&quot;&gt;JS Bin&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Works in the latest version of IE, Chrome, Firefox, and Safari.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This toggle switch can be used to turn things into an “on” or “off” state (for example, through HTTP requests via AJAX), and the state is represented by the toggle’s CSS.&lt;/p&gt;

&lt;h1 id=&quot;components&quot;&gt;Components&lt;/h1&gt;

&lt;p&gt;The toggle is made up of two components:&lt;/p&gt;

&lt;p&gt;The “toggle” (the container for the whole thing):&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/images/2015-05-26-modern-looking-css-toggle-switch-toggle.png&quot; /&gt;&lt;/center&gt;

&lt;p&gt;This toggle gets the badass class name of, you guessed it, &lt;code class=&quot;highlighter-rouge&quot;&gt;.toggle&lt;/code&gt;. It can also receive the &lt;code class=&quot;highlighter-rouge&quot;&gt;.on&lt;/code&gt; class via JavaScript.&lt;/p&gt;

&lt;p&gt;The next component is the “switch” (the little round thing that moves back and forth):&lt;/p&gt;

&lt;center&gt;&lt;img src=&quot;/images/2015-05-26-modern-looking-css-toggle-switch-switch.png&quot; /&gt;&lt;/center&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toggle&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;switch&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;principle-of-function&quot;&gt;Principle of function&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;The only thing that changes when you click the toggle is its padding!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you click on the toggle, it gets an “on” class added or removed, through some nice vanilla JavaScript:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;[].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;toggle&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;mouseup&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;on&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What this “on” class does is set the &lt;code&gt;padding-left&lt;/code&gt; of the toggle (&lt;img width=&quot;30&quot; src=&quot;/images/2015-05-26-modern-looking-css-toggle-switch-toggle.png&quot; /&gt;) so that the switch appears to move to the side.&lt;/p&gt;

&lt;p&gt;All we do after that is add some nice CSS3 transitions to the &lt;code&gt;background-color&lt;/code&gt; and &lt;code&gt;padding&lt;/code&gt; by saying something like &lt;code&gt;transition: 400ms cubic-bezier(0, 0, 0, 1);&lt;/code&gt;, and we have a working switch.&lt;/p&gt;

&lt;h1 id=&quot;dont-sass-me&quot;&gt;Don’t SASS me&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.toggle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// this is both the width and height of the little circular switch
&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;$switch-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;36px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// change the spacing between the switch and the entire toggle
&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;$switch-margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// change the width of the whole toggle
&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;$toggle-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;70px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// don&#39;t change these calculations
&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;$toggle-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$switch-margin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$switch-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$toggle-padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$toggle-width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$toggle-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#eee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$toggle-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#ddd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;box-sizing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;border-box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$toggle-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400ms&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cubic-bezier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$toggle-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.on&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;lightblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$toggle-padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;nc&quot;&gt;.switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$switch-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$switch-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;in-its-simplest-form&quot;&gt;In its simplest form&lt;/h1&gt;

&lt;p&gt;For the slow people like me, here is a bare-bones version using regular ol’ &lt;code&gt;onclick&lt;/code&gt; and CSS (and some bad practices).&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/yovipa/1/embed?output&quot;&gt;JS Bin&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;html&quot;&gt;HTML:&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;toggle&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;switch&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;css&quot;&gt;CSS:&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.toggle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#eee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;box-sizing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;border-box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;500ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;150px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.toggle.on&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;javascript&quot;&gt;JavaScript:&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;toggle&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;on&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Well that’s that: a simple CSS selector switch (all it needs is a click handler). You could also make this an AngularJS directive called, say, &lt;code&gt;&amp;lt;toggle&amp;gt;&amp;lt;/toggle&amp;gt;&lt;/code&gt;, and add the click handler inside the directive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key points&lt;/strong&gt;: The switch moves by just changing the padding, and you can add a transition to make it all smooth-like.&lt;/p&gt;
</description>
        <pubDate>Tue, 26 May 2015 12:07:00 -0700</pubDate>
        <link>http://joshbeam.github.io/javascript/sass/2015/05/26/modern-looking-css-toggle-switch.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/javascript/sass/2015/05/26/modern-looking-css-toggle-switch.html</guid>
        
        
        <category>javascript</category>
        
        <category>sass</category>
        
      </item>
    
      <item>
        <title>From JavaScript to Ruby: Style Guide</title>
        <description>&lt;!--excerpt.start--&gt;
&lt;p&gt;This post is the second in the series of &lt;strong&gt;&lt;em&gt;“From JavaScript to Ruby”&lt;/em&gt;&lt;/strong&gt;, which is aimed at helping JavaScript developers transition their thinking from JavaScript to Ruby. Here you’ll find a table of the ways we do things in JavaScript, and the way you’re supposed to do them in Ruby.
&lt;!--excerpt.end--&gt;&lt;/p&gt;

&lt;h1 id=&quot;style-guide&quot;&gt;Style Guide&lt;/h1&gt;

&lt;p&gt;This post is a living document. Expect changes as necessary. Suggestions? Leave a comment below or email &lt;a href=&quot;mailto:frontendcollisionblog@gmail.com&quot;&gt;Josh&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Last updated: Apr 20, 2015&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;
        If you do this in JavaScript...
        &lt;br /&gt;
        &lt;small&gt;&lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;Airbnb&lt;/a&gt;&lt;/small&gt;
      &lt;/th&gt;
      &lt;th&gt;
        ...do it like this in Ruby
        &lt;br /&gt;
        &lt;small&gt;&lt;a href=&quot;https://github.com/bbatsov/ruby-style-guide&quot;&gt;bbatsov&lt;/a&gt;&lt;/small&gt;
      &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th colspan=&quot;2&quot;&gt;String quotes&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;&#39;Some string&#39;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;&#39;Some string&#39;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&quot;2&quot;&gt;String concatenation&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;world!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;helloWorld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;hello &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

      &lt;/td&gt;
      &lt;td&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;world&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hello_world&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&quot;2&quot;&gt;Variable names&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;
        &lt;code&gt;camelCaseVariable = true&lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
        &lt;code&gt;camel_case_variable = false&lt;/code&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&quot;2&quot;&gt;Tabs&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// &#39;hard tab&#39;, 4 spaces&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

      &lt;/td&gt;
      &lt;td&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# &#39;soft tab&#39;, 2 spaces&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&quot;2&quot;&gt;Callbacks&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;hello&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;undefined&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;someFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

      &lt;/td&gt;
      &lt;td&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;someMethod&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;hello&#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block_given?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;someMethod&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# or&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;someMethod&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&quot;2&quot;&gt;Talking about methods&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;someClass.someMethod&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code&gt;SomeClass#some_method&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&quot;2&quot;&gt;Comments&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;
        &lt;code&gt;// single-line comment&lt;/code&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*
  multi-line
  comment
*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

      &lt;/td&gt;
      &lt;td&gt;
        &lt;code&gt;# single-line comment&lt;/code&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# multi-line&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# comment&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

      &lt;/td&gt;
    &lt;/tr&gt;    
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Mon, 20 Apr 2015 07:57:00 -0700</pubDate>
        <link>http://joshbeam.github.io/javascript/ruby/2015/04/20/from-javascript-to-ruby-style-guide.html</link>
        <guid isPermaLink="true">http://joshbeam.github.io/javascript/ruby/2015/04/20/from-javascript-to-ruby-style-guide.html</guid>
        
        
        <category>javascript</category>
        
        <category>ruby</category>
        
      </item>
    
  </channel>
</rss>
